-- MySQL dump 10.13  Distrib 5.7.25, for Linux (x86_64)
--
-- Host: localhost    Database: wp_myblog
-- ------------------------------------------------------
-- Server version	5.7.25-0ubuntu0.16.04.2

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `wp_commentmeta`
--

DROP TABLE IF EXISTS `wp_commentmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_commentmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_520_ci,
  PRIMARY KEY (`meta_id`),
  KEY `comment_id` (`comment_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_commentmeta`
--

LOCK TABLES `wp_commentmeta` WRITE;
/*!40000 ALTER TABLE `wp_commentmeta` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_commentmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_comments`
--

DROP TABLE IF EXISTS `wp_comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_comments` (
  `comment_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_post_ID` bigint(20) unsigned NOT NULL DEFAULT '0',
  `comment_author` tinytext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `comment_author_email` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_type` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`comment_ID`),
  KEY `comment_post_ID` (`comment_post_ID`),
  KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  KEY `comment_date_gmt` (`comment_date_gmt`),
  KEY `comment_parent` (`comment_parent`),
  KEY `comment_author_email` (`comment_author_email`(10))
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_comments`
--

LOCK TABLES `wp_comments` WRITE;
/*!40000 ALTER TABLE `wp_comments` DISABLE KEYS */;
INSERT INTO `wp_comments` VALUES (1,1,'A WordPress Commenter','wapuu@wordpress.example','https://wordpress.org/','','2019-03-08 10:11:22','2019-03-08 10:11:22','Hi, this is a comment.\nTo get started with moderating, editing, and deleting comments, please visit the Comments screen in the dashboard.\nCommenter avatars come from <a href=\"https://gravatar.com\">Gravatar</a>.',0,'post-trashed','','',0,0);
/*!40000 ALTER TABLE `wp_comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_links`
--

DROP TABLE IF EXISTS `wp_links`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_links` (
  `link_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `link_url` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_name` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_image` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_target` varchar(25) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_description` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_visible` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) unsigned NOT NULL DEFAULT '1',
  `link_rating` int(11) NOT NULL DEFAULT '0',
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_notes` mediumtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `link_rss` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`link_id`),
  KEY `link_visible` (`link_visible`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_links`
--

LOCK TABLES `wp_links` WRITE;
/*!40000 ALTER TABLE `wp_links` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_links` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_options`
--

DROP TABLE IF EXISTS `wp_options`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_options` (
  `option_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `option_name` varchar(191) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `option_value` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `autoload` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'yes',
  PRIMARY KEY (`option_id`),
  UNIQUE KEY `option_name` (`option_name`)
) ENGINE=InnoDB AUTO_INCREMENT=486 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_options`
--

LOCK TABLES `wp_options` WRITE;
/*!40000 ALTER TABLE `wp_options` DISABLE KEYS */;
INSERT INTO `wp_options` VALUES (1,'siteurl','http://192.168.1.181:8080/wordpress','yes'),(2,'home','http://192.168.1.181:8080/wordpress','yes'),(3,'blogname','Devops Tutorial','yes'),(4,'blogdescription','Devops','yes'),(5,'users_can_register','0','yes'),(6,'admin_email','manoj.himt@gmail.com','yes'),(7,'start_of_week','1','yes'),(8,'use_balanceTags','0','yes'),(9,'use_smilies','1','yes'),(10,'require_name_email','1','yes'),(11,'comments_notify','1','yes'),(12,'posts_per_rss','10','yes'),(13,'rss_use_excerpt','0','yes'),(14,'mailserver_url','mail.example.com','yes'),(15,'mailserver_login','login@example.com','yes'),(16,'mailserver_pass','password','yes'),(17,'mailserver_port','110','yes'),(18,'default_category','1','yes'),(19,'default_comment_status','open','yes'),(20,'default_ping_status','open','yes'),(21,'default_pingback_flag','1','yes'),(22,'posts_per_page','10','yes'),(23,'date_format','F j, Y','yes'),(24,'time_format','g:i a','yes'),(25,'links_updated_date_format','F j, Y g:i a','yes'),(26,'comment_moderation','0','yes'),(27,'moderation_notify','1','yes'),(28,'permalink_structure','/index.php/%year%/%monthnum%/%day%/%postname%/','yes'),(29,'rewrite_rules','a:90:{s:11:\"^wp-json/?$\";s:22:\"index.php?rest_route=/\";s:14:\"^wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:21:\"^index.php/wp-json/?$\";s:22:\"index.php?rest_route=/\";s:24:\"^index.php/wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:57:\"index.php/category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:52:\"index.php/category/(.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:33:\"index.php/category/(.+?)/embed/?$\";s:46:\"index.php?category_name=$matches[1]&embed=true\";s:45:\"index.php/category/(.+?)/page/?([0-9]{1,})/?$\";s:53:\"index.php?category_name=$matches[1]&paged=$matches[2]\";s:27:\"index.php/category/(.+?)/?$\";s:35:\"index.php?category_name=$matches[1]\";s:54:\"index.php/tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:49:\"index.php/tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:30:\"index.php/tag/([^/]+)/embed/?$\";s:36:\"index.php?tag=$matches[1]&embed=true\";s:42:\"index.php/tag/([^/]+)/page/?([0-9]{1,})/?$\";s:43:\"index.php?tag=$matches[1]&paged=$matches[2]\";s:24:\"index.php/tag/([^/]+)/?$\";s:25:\"index.php?tag=$matches[1]\";s:55:\"index.php/type/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:50:\"index.php/type/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:31:\"index.php/type/([^/]+)/embed/?$\";s:44:\"index.php?post_format=$matches[1]&embed=true\";s:43:\"index.php/type/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?post_format=$matches[1]&paged=$matches[2]\";s:25:\"index.php/type/([^/]+)/?$\";s:33:\"index.php?post_format=$matches[1]\";s:48:\".*wp-(atom|rdf|rss|rss2|feed|commentsrss2)\\.php$\";s:18:\"index.php?feed=old\";s:20:\".*wp-app\\.php(/.*)?$\";s:19:\"index.php?error=403\";s:18:\".*wp-register.php$\";s:23:\"index.php?register=true\";s:42:\"index.php/feed/(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:37:\"index.php/(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:18:\"index.php/embed/?$\";s:21:\"index.php?&embed=true\";s:30:\"index.php/page/?([0-9]{1,})/?$\";s:28:\"index.php?&paged=$matches[1]\";s:37:\"index.php/comment-page-([0-9]{1,})/?$\";s:38:\"index.php?&page_id=2&cpage=$matches[1]\";s:51:\"index.php/comments/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:46:\"index.php/comments/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:27:\"index.php/comments/embed/?$\";s:21:\"index.php?&embed=true\";s:54:\"index.php/search/(.+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:49:\"index.php/search/(.+)/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:30:\"index.php/search/(.+)/embed/?$\";s:34:\"index.php?s=$matches[1]&embed=true\";s:42:\"index.php/search/(.+)/page/?([0-9]{1,})/?$\";s:41:\"index.php?s=$matches[1]&paged=$matches[2]\";s:24:\"index.php/search/(.+)/?$\";s:23:\"index.php?s=$matches[1]\";s:57:\"index.php/author/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:52:\"index.php/author/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:33:\"index.php/author/([^/]+)/embed/?$\";s:44:\"index.php?author_name=$matches[1]&embed=true\";s:45:\"index.php/author/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?author_name=$matches[1]&paged=$matches[2]\";s:27:\"index.php/author/([^/]+)/?$\";s:33:\"index.php?author_name=$matches[1]\";s:79:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:74:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:55:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/embed/?$\";s:74:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&embed=true\";s:67:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]\";s:49:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/?$\";s:63:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]\";s:66:\"index.php/([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:61:\"index.php/([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:42:\"index.php/([0-9]{4})/([0-9]{1,2})/embed/?$\";s:58:\"index.php?year=$matches[1]&monthnum=$matches[2]&embed=true\";s:54:\"index.php/([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]\";s:36:\"index.php/([0-9]{4})/([0-9]{1,2})/?$\";s:47:\"index.php?year=$matches[1]&monthnum=$matches[2]\";s:53:\"index.php/([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:48:\"index.php/([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:29:\"index.php/([0-9]{4})/embed/?$\";s:37:\"index.php?year=$matches[1]&embed=true\";s:41:\"index.php/([0-9]{4})/page/?([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&paged=$matches[2]\";s:23:\"index.php/([0-9]{4})/?$\";s:26:\"index.php?year=$matches[1]\";s:68:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:78:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:98:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:93:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:93:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:74:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:63:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/embed/?$\";s:91:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&embed=true\";s:67:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/trackback/?$\";s:85:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&tb=1\";s:87:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:97:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&feed=$matches[5]\";s:82:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:97:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&feed=$matches[5]\";s:75:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/page/?([0-9]{1,})/?$\";s:98:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&paged=$matches[5]\";s:82:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/comment-page-([0-9]{1,})/?$\";s:98:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&cpage=$matches[5]\";s:71:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)(?:/([0-9]+))?/?$\";s:97:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&page=$matches[5]\";s:57:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:67:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:87:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:82:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:82:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:63:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:74:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/comment-page-([0-9]{1,})/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&cpage=$matches[4]\";s:61:\"index.php/([0-9]{4})/([0-9]{1,2})/comment-page-([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&cpage=$matches[3]\";s:48:\"index.php/([0-9]{4})/comment-page-([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&cpage=$matches[2]\";s:37:\"index.php/.?.+?/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:47:\"index.php/.?.+?/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:67:\"index.php/.?.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:62:\"index.php/.?.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:62:\"index.php/.?.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:43:\"index.php/.?.+?/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:26:\"index.php/(.?.+?)/embed/?$\";s:41:\"index.php?pagename=$matches[1]&embed=true\";s:30:\"index.php/(.?.+?)/trackback/?$\";s:35:\"index.php?pagename=$matches[1]&tb=1\";s:50:\"index.php/(.?.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:45:\"index.php/(.?.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:38:\"index.php/(.?.+?)/page/?([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&paged=$matches[2]\";s:45:\"index.php/(.?.+?)/comment-page-([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&cpage=$matches[2]\";s:34:\"index.php/(.?.+?)(?:/([0-9]+))?/?$\";s:47:\"index.php?pagename=$matches[1]&page=$matches[2]\";}','yes'),(30,'hack_file','0','yes'),(31,'blog_charset','UTF-8','yes'),(32,'moderation_keys','','no'),(33,'active_plugins','a:0:{}','yes'),(34,'category_base','','yes'),(35,'ping_sites','http://rpc.pingomatic.com/','yes'),(36,'comment_max_links','2','yes'),(37,'gmt_offset','0','yes'),(38,'default_email_category','1','yes'),(39,'recently_edited','','no'),(40,'template','twentysixteen','yes'),(41,'stylesheet','twentysixteen','yes'),(42,'comment_whitelist','1','yes'),(43,'blacklist_keys','','no'),(44,'comment_registration','0','yes'),(45,'html_type','text/html','yes'),(46,'use_trackback','0','yes'),(47,'default_role','subscriber','yes'),(48,'db_version','44719','yes'),(49,'uploads_use_yearmonth_folders','1','yes'),(50,'upload_path','','yes'),(51,'blog_public','1','yes'),(52,'default_link_category','2','yes'),(53,'show_on_front','page','yes'),(54,'tag_base','','yes'),(55,'show_avatars','1','yes'),(56,'avatar_rating','G','yes'),(57,'upload_url_path','','yes'),(58,'thumbnail_size_w','150','yes'),(59,'thumbnail_size_h','150','yes'),(60,'thumbnail_crop','1','yes'),(61,'medium_size_w','300','yes'),(62,'medium_size_h','300','yes'),(63,'avatar_default','mystery','yes'),(64,'large_size_w','1024','yes'),(65,'large_size_h','1024','yes'),(66,'image_default_link_type','none','yes'),(67,'image_default_size','','yes'),(68,'image_default_align','','yes'),(69,'close_comments_for_old_posts','0','yes'),(70,'close_comments_days_old','14','yes'),(71,'thread_comments','1','yes'),(72,'thread_comments_depth','5','yes'),(73,'page_comments','0','yes'),(74,'comments_per_page','50','yes'),(75,'default_comments_page','newest','yes'),(76,'comment_order','asc','yes'),(77,'sticky_posts','a:0:{}','yes'),(78,'widget_categories','a:2:{i:2;a:4:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:12:\"hierarchical\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(79,'widget_text','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(80,'widget_rss','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(81,'uninstall_plugins','a:0:{}','no'),(82,'timezone_string','','yes'),(83,'page_for_posts','0','yes'),(84,'page_on_front','2','yes'),(85,'default_post_format','0','yes'),(86,'link_manager_enabled','0','yes'),(87,'finished_splitting_shared_terms','1','yes'),(88,'site_icon','0','yes'),(89,'medium_large_size_w','768','yes'),(90,'medium_large_size_h','0','yes'),(91,'wp_page_for_privacy_policy','3','yes'),(92,'show_comments_cookies_opt_in','1','yes'),(93,'initial_db_version','44719','yes'),(94,'wp_user_roles','a:5:{s:13:\"administrator\";a:2:{s:4:\"name\";s:13:\"Administrator\";s:12:\"capabilities\";a:61:{s:13:\"switch_themes\";b:1;s:11:\"edit_themes\";b:1;s:16:\"activate_plugins\";b:1;s:12:\"edit_plugins\";b:1;s:10:\"edit_users\";b:1;s:10:\"edit_files\";b:1;s:14:\"manage_options\";b:1;s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:6:\"import\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:8:\"level_10\";b:1;s:7:\"level_9\";b:1;s:7:\"level_8\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:12:\"delete_users\";b:1;s:12:\"create_users\";b:1;s:17:\"unfiltered_upload\";b:1;s:14:\"edit_dashboard\";b:1;s:14:\"update_plugins\";b:1;s:14:\"delete_plugins\";b:1;s:15:\"install_plugins\";b:1;s:13:\"update_themes\";b:1;s:14:\"install_themes\";b:1;s:11:\"update_core\";b:1;s:10:\"list_users\";b:1;s:12:\"remove_users\";b:1;s:13:\"promote_users\";b:1;s:18:\"edit_theme_options\";b:1;s:13:\"delete_themes\";b:1;s:6:\"export\";b:1;}}s:6:\"editor\";a:2:{s:4:\"name\";s:6:\"Editor\";s:12:\"capabilities\";a:34:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;}}s:6:\"author\";a:2:{s:4:\"name\";s:6:\"Author\";s:12:\"capabilities\";a:10:{s:12:\"upload_files\";b:1;s:10:\"edit_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:22:\"delete_published_posts\";b:1;}}s:11:\"contributor\";a:2:{s:4:\"name\";s:11:\"Contributor\";s:12:\"capabilities\";a:5:{s:10:\"edit_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;}}s:10:\"subscriber\";a:2:{s:4:\"name\";s:10:\"Subscriber\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:7:\"level_0\";b:1;}}}','yes'),(95,'fresh_site','0','yes'),(96,'widget_search','a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(97,'widget_recent-posts','a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}','yes'),(98,'widget_recent-comments','a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}','yes'),(99,'widget_archives','a:2:{i:2;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(100,'widget_meta','a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(101,'sidebars_widgets','a:3:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}s:13:\"array_version\";i:3;}','yes'),(102,'widget_pages','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(103,'widget_calendar','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(104,'widget_media_audio','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(105,'widget_media_image','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(106,'widget_media_gallery','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(107,'widget_media_video','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(108,'nonce_key','Ni1ya$D p2T2rO6<!g1pVnx9n5hK3H:bSIQYIyKf1WKGPFvO6_&9<>=+JS[*4M66','no'),(109,'nonce_salt','gN;m!72_e=Q<0P`}YWsE#u<>]pcA-eBiUHb;vqZ[:F-peGoYK|W-~vnxCXQ?g &N','no'),(110,'widget_tag_cloud','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(111,'widget_nav_menu','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(112,'widget_custom_html','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(113,'cron','a:5:{i:1558357883;a:1:{s:34:\"wp_privacy_delete_old_export_files\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:6:\"hourly\";s:4:\"args\";a:0:{}s:8:\"interval\";i:3600;}}}i:1558390283;a:3:{s:16:\"wp_version_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:17:\"wp_update_plugins\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_update_themes\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1558433497;a:2:{s:19:\"wp_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}s:25:\"delete_expired_transients\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1558433505;a:1:{s:30:\"wp_scheduled_auto_draft_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}s:7:\"version\";i:2;}','yes'),(114,'theme_mods_twentynineteen','a:2:{s:18:\"custom_css_post_id\";i:-1;s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1556865375;s:4:\"data\";a:2:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}}}}','yes'),(122,'auth_key','f=+5W9Yj97L{}Jn.CtIaAJ*IpKeqm6Hu2<5TGxyI$<c.Ep+=|IrCoBJ|:pK;P>7b','no'),(123,'auth_salt','9DN/FZ#nB0DL57@d1.|ci{qakx1xvd~2_G%sR.h8rstb=b$(](=6^5>>A`Fa]*#x','no'),(124,'logged_in_key','&`A39ZOkGD/3aT|Xe}!9WYobCet(4,]|BSe{;Lok(Xd*SU@- ;H[_X6$GH6xZML<','no'),(125,'logged_in_salt','*Q/%f_r$UlDhk?tpcy=:7*T%[7,*3iEZU&2NldB]?y4T72}Z~@Ao4{vCpf2<x$#R','no'),(131,'can_compress_scripts','0','no'),(143,'_site_transient_update_core','O:8:\"stdClass\":4:{s:7:\"updates\";a:2:{i:0;O:8:\"stdClass\":10:{s:8:\"response\";s:7:\"upgrade\";s:8:\"download\";s:57:\"https://downloads.wordpress.org/release/wordpress-5.2.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:57:\"https://downloads.wordpress.org/release/wordpress-5.2.zip\";s:10:\"no_content\";s:68:\"https://downloads.wordpress.org/release/wordpress-5.2-no-content.zip\";s:11:\"new_bundled\";s:69:\"https://downloads.wordpress.org/release/wordpress-5.2-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:3:\"5.2\";s:7:\"version\";s:3:\"5.2\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.0\";s:15:\"partial_version\";s:0:\"\";}i:1;O:8:\"stdClass\":11:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:57:\"https://downloads.wordpress.org/release/wordpress-5.2.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:57:\"https://downloads.wordpress.org/release/wordpress-5.2.zip\";s:10:\"no_content\";s:68:\"https://downloads.wordpress.org/release/wordpress-5.2-no-content.zip\";s:11:\"new_bundled\";s:69:\"https://downloads.wordpress.org/release/wordpress-5.2-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:3:\"5.2\";s:7:\"version\";s:3:\"5.2\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.0\";s:15:\"partial_version\";s:0:\"\";s:9:\"new_files\";s:1:\"1\";}}s:12:\"last_checked\";i:1558347624;s:15:\"version_checked\";s:5:\"5.1.1\";s:12:\"translations\";a:0:{}}','no'),(144,'auto_core_update_notified','a:4:{s:4:\"type\";s:7:\"success\";s:5:\"email\";s:20:\"manoj.himt@gmail.com\";s:7:\"version\";s:5:\"5.1.1\";s:9:\"timestamp\";i:1552553248;}','no'),(233,'theme_mods_twentysixteen','a:6:{s:18:\"custom_css_post_id\";i:-1;s:18:\"nav_menu_locations\";a:1:{s:7:\"primary\";i:6;}s:12:\"header_image\";s:82:\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/cropped-nginx-t.jpg\";s:17:\"header_image_data\";O:8:\"stdClass\":5:{s:13:\"attachment_id\";i:15;s:3:\"url\";s:82:\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/cropped-nginx-t.jpg\";s:13:\"thumbnail_url\";s:82:\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/cropped-nginx-t.jpg\";s:6:\"height\";i:281;s:5:\"width\";i:1200;}s:11:\"custom_logo\";s:0:\"\";s:16:\"background_image\";s:75:\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/download.jpg\";}','yes'),(235,'current_theme','Twenty Sixteen','yes'),(236,'theme_switched','','yes'),(237,'theme_switched_via_customizer','','yes'),(238,'customize_stashed_theme_mods','a:0:{}','no'),(241,'nav_menu_options','a:1:{s:8:\"auto_add\";a:1:{i:0;i:2;}}','yes'),(311,'theme_mods_shogunlite','a:3:{s:18:\"custom_css_post_id\";i:-1;s:18:\"nav_menu_locations\";a:1:{s:7:\"primary\";i:2;}s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1556882501;s:4:\"data\";a:2:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}}}}','yes'),(312,'theme_switch_menu_locations','a:1:{s:7:\"primary\";i:2;}','yes'),(322,'recently_activated','a:0:{}','yes'),(430,'_site_transient_timeout_browser_c86eca523557211ecf5df3a94f6b5dd5','1558938107','no'),(431,'_site_transient_browser_c86eca523557211ecf5df3a94f6b5dd5','a:10:{s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"74.0.3729.157\";s:8:\"platform\";s:7:\"Windows\";s:10:\"update_url\";s:29:\"https://www.google.com/chrome\";s:7:\"img_src\";s:43:\"http://s.w.org/images/browsers/chrome.png?1\";s:11:\"img_src_ssl\";s:44:\"https://s.w.org/images/browsers/chrome.png?1\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;s:6:\"mobile\";b:0;}','no'),(432,'_site_transient_timeout_php_check_3e23a966a8bd4235958ed00caaca8c5d','1558938109','no'),(433,'_site_transient_php_check_3e23a966a8bd4235958ed00caaca8c5d','a:5:{s:19:\"recommended_version\";s:3:\"7.3\";s:15:\"minimum_version\";s:6:\"5.6.20\";s:12:\"is_supported\";b:0;s:9:\"is_secure\";b:0;s:13:\"is_acceptable\";b:1;}','no'),(434,'_transient_timeout_dash_v2_88ae138922fe95674369b1cb3d215a2b','1558376517','no'),(435,'_transient_dash_v2_88ae138922fe95674369b1cb3d215a2b','<div class=\"rss-widget\"><ul><li>An error has occurred, which probably means the feed is down. Try again later.</li></ul></div><div class=\"rss-widget\"><ul><li>An error has occurred, which probably means the feed is down. Try again later.</li></ul></div>','no'),(436,'_site_transient_timeout_community-events-2c8826d5d44014f3d257734977965683','1558376518','no'),(437,'_site_transient_community-events-2c8826d5d44014f3d257734977965683','a:2:{s:8:\"location\";a:1:{s:2:\"ip\";s:11:\"192.168.1.0\";}s:6:\"events\";a:1:{i:0;a:7:{s:4:\"type\";s:8:\"wordcamp\";s:5:\"title\";s:15:\"WordCamp Europe\";s:3:\"url\";s:33:\"https://2019.europe.wordcamp.org/\";s:6:\"meetup\";s:0:\"\";s:10:\"meetup_url\";s:0:\"\";s:4:\"date\";s:19:\"2019-06-20 00:00:00\";s:8:\"location\";a:4:{s:8:\"location\";s:15:\"Berlin, Germany\";s:7:\"country\";s:2:\"DE\";s:8:\"latitude\";d:52.506970000000003;s:9:\"longitude\";d:13.2843064;}}}}','no'),(466,'_site_transient_timeout_theme_roots','1558349426','no'),(467,'_site_transient_theme_roots','a:4:{s:10:\"shogunlite\";s:7:\"/themes\";s:14:\"twentynineteen\";s:7:\"/themes\";s:15:\"twentyseventeen\";s:7:\"/themes\";s:13:\"twentysixteen\";s:7:\"/themes\";}','no'),(468,'_site_transient_update_themes','O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1558347628;s:7:\"checked\";a:4:{s:10:\"shogunlite\";s:5:\"1.0.0\";s:14:\"twentynineteen\";s:3:\"1.3\";s:15:\"twentyseventeen\";s:3:\"2.1\";s:13:\"twentysixteen\";s:3:\"1.9\";}s:8:\"response\";a:4:{s:10:\"shogunlite\";a:4:{s:5:\"theme\";s:10:\"shogunlite\";s:11:\"new_version\";s:5:\"1.0.1\";s:3:\"url\";s:40:\"https://wordpress.org/themes/shogunlite/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/theme/shogunlite.1.0.1.zip\";}s:14:\"twentynineteen\";a:4:{s:5:\"theme\";s:14:\"twentynineteen\";s:11:\"new_version\";s:3:\"1.4\";s:3:\"url\";s:44:\"https://wordpress.org/themes/twentynineteen/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/theme/twentynineteen.1.4.zip\";}s:15:\"twentyseventeen\";a:4:{s:5:\"theme\";s:15:\"twentyseventeen\";s:11:\"new_version\";s:3:\"2.2\";s:3:\"url\";s:45:\"https://wordpress.org/themes/twentyseventeen/\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/theme/twentyseventeen.2.2.zip\";}s:13:\"twentysixteen\";a:4:{s:5:\"theme\";s:13:\"twentysixteen\";s:11:\"new_version\";s:3:\"2.0\";s:3:\"url\";s:43:\"https://wordpress.org/themes/twentysixteen/\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/theme/twentysixteen.2.0.zip\";}}s:12:\"translations\";a:0:{}}','no'),(469,'_site_transient_update_plugins','O:8:\"stdClass\":5:{s:12:\"last_checked\";i:1558347630;s:7:\"checked\";a:2:{s:19:\"akismet/akismet.php\";s:5:\"4.1.1\";s:9:\"hello.php\";s:5:\"1.7.1\";}s:8:\"response\";a:1:{s:19:\"akismet/akismet.php\";O:8:\"stdClass\":12:{s:2:\"id\";s:21:\"w.org/plugins/akismet\";s:4:\"slug\";s:7:\"akismet\";s:6:\"plugin\";s:19:\"akismet/akismet.php\";s:11:\"new_version\";s:5:\"4.1.2\";s:3:\"url\";s:38:\"https://wordpress.org/plugins/akismet/\";s:7:\"package\";s:56:\"https://downloads.wordpress.org/plugin/akismet.4.1.2.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:59:\"https://ps.w.org/akismet/assets/icon-256x256.png?rev=969272\";s:2:\"1x\";s:59:\"https://ps.w.org/akismet/assets/icon-128x128.png?rev=969272\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:61:\"https://ps.w.org/akismet/assets/banner-772x250.jpg?rev=479904\";}s:11:\"banners_rtl\";a:0:{}s:6:\"tested\";s:3:\"5.2\";s:12:\"requires_php\";b:0;s:13:\"compatibility\";O:8:\"stdClass\":0:{}}}s:12:\"translations\";a:0:{}s:9:\"no_update\";a:1:{s:9:\"hello.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:25:\"w.org/plugins/hello-dolly\";s:4:\"slug\";s:11:\"hello-dolly\";s:6:\"plugin\";s:9:\"hello.php\";s:11:\"new_version\";s:3:\"1.6\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/hello-dolly/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/plugin/hello-dolly.1.6.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:64:\"https://ps.w.org/hello-dolly/assets/icon-256x256.jpg?rev=2052855\";s:2:\"1x\";s:64:\"https://ps.w.org/hello-dolly/assets/icon-128x128.jpg?rev=2052855\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:66:\"https://ps.w.org/hello-dolly/assets/banner-772x250.jpg?rev=2052855\";}s:11:\"banners_rtl\";a:0:{}}}}','no'),(482,'category_children','a:1:{i:5;a:1:{i:0;i:1;}}','yes'),(484,'_transient_is_multi_author','0','yes'),(485,'_transient_twentysixteen_categories','2','yes');
/*!40000 ALTER TABLE `wp_options` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_postmeta`
--

DROP TABLE IF EXISTS `wp_postmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_postmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_520_ci,
  PRIMARY KEY (`meta_id`),
  KEY `post_id` (`post_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB AUTO_INCREMENT=332 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_postmeta`
--

LOCK TABLES `wp_postmeta` WRITE;
/*!40000 ALTER TABLE `wp_postmeta` DISABLE KEYS */;
INSERT INTO `wp_postmeta` VALUES (1,2,'_wp_page_template','default'),(2,3,'_wp_page_template','default'),(3,10,'_edit_lock','1556865358:1'),(4,10,'_wp_trash_meta_status','publish'),(5,10,'_wp_trash_meta_time','1556865375'),(6,1,'_wp_trash_meta_status','publish'),(7,1,'_wp_trash_meta_time','1556865569'),(8,1,'_wp_desired_post_slug','hello-world'),(9,1,'_wp_trash_meta_comments_status','a:1:{i:1;s:1:\"1\";}'),(10,12,'_wp_trash_meta_status','publish'),(11,12,'_wp_trash_meta_time','1556865653'),(12,13,'_wp_trash_meta_status','publish'),(13,13,'_wp_trash_meta_time','1556865709'),(14,14,'_wp_attached_file','2019/05/nginx-t.jpg'),(15,14,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:630;s:4:\"file\";s:19:\"2019/05/nginx-t.jpg\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"nginx-t-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"nginx-t-300x158.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:158;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:19:\"nginx-t-768x403.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:403;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:20:\"nginx-t-1024x538.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:538;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:20:\"nginx-t-1200x630.jpg\";s:5:\"width\";i:1200;s:6:\"height\";i:630;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:24:\"Shutterstock / agsandrew\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:215:\"Deep Networking series. Abstract design made of industrial grunge texture, numbers and dark gradients on the subject of computing, industrial design and modern technology; Shutterstock ID 119971306; PO: DigitalGuide\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:9:\"119971306\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:41:{i:0;s:8:\"abstract\";i:1;s:10:\"arithmetic\";i:2;s:11:\"arrangement\";i:3;s:8:\"backdrop\";i:4;s:10:\"background\";i:5;s:5:\"black\";i:6;s:11:\"calculation\";i:7;s:4:\"code\";i:8;s:5:\"color\";i:9;s:11:\"composition\";i:10;s:11:\"computation\";i:11;s:7:\"concept\";i:12;s:4:\"dark\";i:13;s:4:\"data\";i:14;s:6:\"design\";i:15;s:5:\"digit\";i:16;s:7:\"dynamic\";i:17;s:4:\"grid\";i:18;s:6:\"grunge\";i:19;s:11:\"information\";i:20;s:22:\"information technology\";i:21;s:7:\"integer\";i:22;s:9:\"knowledge\";i:23;s:4:\"line\";i:24;s:5:\"logic\";i:25;s:4:\"math\";i:26;s:6:\"matrix\";i:27;s:8:\"metaphor\";i:28;s:6:\"motion\";i:29;s:8:\"movement\";i:30;s:6:\"number\";i:31;s:11:\"oscillation\";i:32;s:7:\"pattern\";i:33;s:7:\"science\";i:34;s:4:\"sine\";i:35;s:6:\"stream\";i:36;s:9:\"structure\";i:37;s:6:\"symbol\";i:38;s:10:\"technology\";i:39;s:7:\"texture\";i:40;s:4:\"wave\";}}}'),(16,15,'_wp_attached_file','2019/05/cropped-nginx-t.jpg'),(17,15,'_wp_attachment_context','custom-header'),(18,15,'_wp_attachment_metadata','a:6:{s:5:\"width\";i:1200;s:6:\"height\";i:281;s:4:\"file\";s:27:\"2019/05/cropped-nginx-t.jpg\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"cropped-nginx-t-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:26:\"cropped-nginx-t-300x70.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:70;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:27:\"cropped-nginx-t-768x180.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:180;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:28:\"cropped-nginx-t-1024x240.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:240;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:28:\"cropped-nginx-t-1200x281.jpg\";s:5:\"width\";i:1200;s:6:\"height\";i:281;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}s:17:\"attachment_parent\";i:14;}'),(19,15,'_wp_attachment_custom_header_last_used_twentysixteen','1556865883'),(20,15,'_wp_attachment_is_custom_header','twentysixteen'),(21,16,'_wp_trash_meta_status','publish'),(22,16,'_wp_trash_meta_time','1556865883'),(23,2,'_edit_lock','1556866828:1'),(24,17,'_wp_attached_file','2019/05/nrpe.png'),(25,17,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:479;s:6:\"height\";i:141;s:4:\"file\";s:16:\"2019/05/nrpe.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:16:\"nrpe-150x141.png\";s:5:\"width\";i:150;s:6:\"height\";i:141;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:15:\"nrpe-300x88.png\";s:5:\"width\";i:300;s:6:\"height\";i:88;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(26,20,'_edit_lock','1556867104:1'),(29,22,'_edit_lock','1556867031:1'),(32,22,'_edit_last','1'),(35,20,'_edit_last','1'),(38,24,'_edit_lock','1556867445:1'),(41,26,'_edit_lock','1556877859:1'),(42,27,'_wp_attached_file','2019/05/q.png'),(43,27,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:691;s:6:\"height\";i:437;s:4:\"file\";s:13:\"2019/05/q.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:13:\"q-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:13:\"q-300x190.png\";s:5:\"width\";i:300;s:6:\"height\";i:190;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(46,29,'_wp_attached_file','2019/05/images.png'),(47,29,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:75;s:6:\"height\";i:50;s:4:\"file\";s:18:\"2019/05/images.png\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(48,30,'_wp_attached_file','2019/05/cropped-images.png'),(49,30,'_wp_attachment_context','custom-logo'),(50,30,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:240;s:6:\"height\";i:240;s:4:\"file\";s:26:\"2019/05/cropped-images.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:26:\"cropped-images-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(51,31,'_wp_trash_meta_status','publish'),(52,31,'_wp_trash_meta_time','1556878287'),(53,32,'_wp_trash_meta_status','publish'),(54,32,'_wp_trash_meta_time','1556878329'),(55,33,'_wp_trash_meta_status','publish'),(56,33,'_wp_trash_meta_time','1556878411'),(58,35,'_wp_attached_file','2019/05/2.-Nagios-Setup-and-Configuration.pdf'),(59,36,'_wp_attached_file','2019/05/Chapter-10-Monitoring-and-Logging.pdf'),(60,37,'_wp_attached_file','2019/05/How-to-install-NRPE-Nagios-Client-on-Linux.pdf'),(61,38,'_wp_attached_file','2019/05/Nagios-Installation-on-Linux-Step-by-Step-Nagios-Tutorial.pdf'),(62,39,'_edit_lock','1556883392:1'),(63,40,'_wp_attached_file','2019/05/2.-Nagios-Setup-and-Configuration-1.pdf'),(64,41,'_wp_attached_file','2019/05/2.-Nagios-Setup-and-Configuration-2.pdf'),(65,42,'_wp_attached_file','2019/05/Chapter-10-Monitoring-and-Logging-1.pdf'),(66,43,'_wp_attached_file','2019/05/How-to-install-NRPE-Nagios-Client-on-Linux-1.pdf'),(67,44,'_wp_attached_file','2019/05/Nagios-Installation-on-Linux-Step-by-Step-Nagios-Tutorial-1.pdf'),(70,46,'_wp_attached_file','2019/05/Nagios-tutorial.docx'),(74,49,'_edit_lock','1556879470:1'),(75,50,'_wp_attached_file','2019/05/5thingsyoudidntknownginxcoulddo-140527135212-phpapp02.pdf'),(76,51,'_wp_attached_file','2019/05/Chapter-5-Understand-Web-Servers.pdf'),(77,52,'_wp_attached_file','2019/05/Chapter-6-HA-Proxy.pdf'),(78,53,'_wp_attached_file','2019/05/devinsampa-nginx-scripting-120915181542-phpapp01.pdf'),(79,54,'_wp_attached_file','2019/05/nginx-190214143939.pdf'),(80,55,'_wp_attached_file','2019/05/nginx-reverse-proxy-cache-apache-wordpress.pdf'),(83,57,'_wp_attached_file','2019/05/Apache-compilation-with-Ansible.docx'),(84,58,'_wp_attached_file','2019/05/APACHE-With-PHP-Compilation.docx'),(85,59,'_wp_attached_file','2019/05/apache-nginx-notes.docx'),(86,60,'_wp_attached_file','2019/05/Nginx-Apache-question-answer.docx'),(89,62,'_edit_lock','1556880701:1'),(92,64,'_edit_lock','1556880778:1'),(96,67,'_edit_lock','1556880878:1'),(99,69,'_edit_lock','1556881139:1'),(102,71,'_edit_lock','1556881513:1'),(103,72,'_wp_attached_file','2019/05/e.png'),(104,72,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:874;s:6:\"height\";i:415;s:4:\"file\";s:13:\"2019/05/e.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:13:\"e-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:13:\"e-300x142.png\";s:5:\"width\";i:300;s:6:\"height\";i:142;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:13:\"e-768x365.png\";s:5:\"width\";i:768;s:6:\"height\";i:365;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(108,39,'_edit_last','1'),(111,75,'_wp_attached_file','2019/05/4.png'),(112,75,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1007;s:6:\"height\";i:608;s:4:\"file\";s:13:\"2019/05/4.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:13:\"4-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:13:\"4-300x181.png\";s:5:\"width\";i:300;s:6:\"height\";i:181;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:13:\"4-768x464.png\";s:5:\"width\";i:768;s:6:\"height\";i:464;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(113,75,'_wp_attachment_is_custom_background','twentysixteen'),(114,76,'_wp_trash_meta_status','publish'),(115,76,'_wp_trash_meta_time','1556882094'),(116,77,'_edit_lock','1556882236:1'),(117,78,'_wp_attached_file','2019/05/download.jpg'),(118,78,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:267;s:6:\"height\";i:189;s:4:\"file\";s:20:\"2019/05/download.jpg\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"download-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(119,78,'_wp_attachment_is_custom_background','twentysixteen'),(120,77,'_wp_trash_meta_status','publish'),(121,77,'_wp_trash_meta_time','1556882250'),(122,79,'_wp_trash_meta_status','publish'),(123,79,'_wp_trash_meta_time','1556882408'),(124,80,'_wp_trash_meta_status','publish'),(125,80,'_wp_trash_meta_time','1556882501'),(126,81,'_wp_trash_meta_status','publish'),(127,81,'_wp_trash_meta_time','1556882542'),(128,82,'_menu_item_type','post_type'),(129,82,'_menu_item_menu_item_parent','0'),(130,82,'_menu_item_object_id','39'),(131,82,'_menu_item_object','post'),(132,82,'_menu_item_target',''),(133,82,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(134,82,'_menu_item_xfn',''),(135,82,'_menu_item_url',''),(137,83,'_menu_item_type','post_type'),(138,83,'_menu_item_menu_item_parent','0'),(139,83,'_menu_item_object_id','26'),(140,83,'_menu_item_object','post'),(141,83,'_menu_item_target',''),(142,83,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(143,83,'_menu_item_xfn',''),(144,83,'_menu_item_url',''),(146,84,'_menu_item_type','post_type'),(147,84,'_menu_item_menu_item_parent','0'),(148,84,'_menu_item_object_id','24'),(149,84,'_menu_item_object','post'),(150,84,'_menu_item_target',''),(151,84,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(152,84,'_menu_item_xfn',''),(153,84,'_menu_item_url',''),(155,85,'_menu_item_type','post_type'),(156,85,'_menu_item_menu_item_parent','0'),(157,85,'_menu_item_object_id','22'),(158,85,'_menu_item_object','post'),(159,85,'_menu_item_target',''),(160,85,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(161,85,'_menu_item_xfn',''),(162,85,'_menu_item_url',''),(164,86,'_menu_item_type','post_type'),(165,86,'_menu_item_menu_item_parent','0'),(166,86,'_menu_item_object_id','20'),(167,86,'_menu_item_object','post'),(168,86,'_menu_item_target',''),(169,86,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(170,86,'_menu_item_xfn',''),(171,86,'_menu_item_url',''),(174,88,'_edit_lock','1557125273:1'),(178,91,'_edit_lock','1557129628:1'),(181,93,'_edit_lock','1557137151:1'),(182,94,'_wp_attached_file','2019/05/Jenkins-Tutorial.docx'),(183,95,'_wp_attached_file','2019/05/Workshop-CI-CD-GIT-Jenkins-Python-Application.pdf'),(187,93,'_edit_last','1'),(190,98,'_wp_attached_file','2019/05/CI-CD-Pipeline.docx'),(191,101,'_edit_lock','1557226137:1'),(192,102,'_wp_attached_file','2019/05/Git-jagdeshblogspot.docx'),(197,104,'_wp_attached_file','2019/05/GIT-notes.docx'),(198,105,'_wp_attached_file','2019/05/git.ppt.pdf'),(199,106,'_wp_attached_file','2019/05/Git_Notes.pdf'),(202,108,'_edit_lock','1557227528:1'),(205,110,'_edit_lock','1557227238:1'),(214,116,'_edit_lock','1557295661:1'),(217,116,'_oembed_9c322d8e78f3e5942d8b84f408c236bc','{{unknown}}'),(218,119,'_edit_lock','1558334105:1'),(219,119,'_oembed_8ca71c5e7d9404431d80a7d5065e7afd','{{unknown}}'),(222,121,'_edit_lock','1558334449:1'),(227,123,'_edit_lock','1558338742:1'),(228,124,'_edit_lock','1558338742:1'),(229,125,'_edit_lock','1558345559:1'),(230,126,'_wp_attached_file','2019/05/using-VBA-IF-statement-code-in-excel.png'),(231,126,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:344;s:6:\"height\";i:200;s:4:\"file\";s:48:\"2019/05/using-VBA-IF-statement-code-in-excel.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:48:\"using-VBA-IF-statement-code-in-excel-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:48:\"using-VBA-IF-statement-code-in-excel-300x174.png\";s:5:\"width\";i:300;s:6:\"height\";i:174;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(232,127,'_wp_attached_file','2019/05/using-VBA-IF-statement-code-in-excel-1.png'),(233,127,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:344;s:6:\"height\";i:200;s:4:\"file\";s:50:\"2019/05/using-VBA-IF-statement-code-in-excel-1.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:50:\"using-VBA-IF-statement-code-in-excel-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:50:\"using-VBA-IF-statement-code-in-excel-1-300x174.png\";s:5:\"width\";i:300;s:6:\"height\";i:174;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(236,129,'_wp_attached_file','2019/05/4-1.png'),(237,129,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1599;s:6:\"height\";i:384;s:4:\"file\";s:15:\"2019/05/4-1.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"4-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:14:\"4-1-300x72.png\";s:5:\"width\";i:300;s:6:\"height\";i:72;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:15:\"4-1-768x184.png\";s:5:\"width\";i:768;s:6:\"height\";i:184;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:16:\"4-1-1024x246.png\";s:5:\"width\";i:1024;s:6:\"height\";i:246;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:16:\"4-1-1200x288.png\";s:5:\"width\";i:1200;s:6:\"height\";i:288;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(238,130,'_wp_attached_file','2019/05/3-1.png'),(239,130,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:434;s:6:\"height\";i:83;s:4:\"file\";s:15:\"2019/05/3-1.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:14:\"3-1-150x83.png\";s:5:\"width\";i:150;s:6:\"height\";i:83;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:14:\"3-1-300x57.png\";s:5:\"width\";i:300;s:6:\"height\";i:57;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(240,131,'_wp_attached_file','2019/05/1-1.png'),(241,131,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:382;s:6:\"height\";i:306;s:4:\"file\";s:15:\"2019/05/1-1.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"1-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:15:\"1-1-300x240.png\";s:5:\"width\";i:300;s:6:\"height\";i:240;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(242,132,'_wp_attached_file','2019/05/8-1.png'),(243,132,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:961;s:6:\"height\";i:692;s:4:\"file\";s:15:\"2019/05/8-1.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"8-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:15:\"8-1-300x216.png\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:15:\"8-1-768x553.png\";s:5:\"width\";i:768;s:6:\"height\";i:553;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(244,134,'_wp_attached_file','2019/05/6-1.png'),(245,134,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:492;s:6:\"height\";i:302;s:4:\"file\";s:15:\"2019/05/6-1.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"6-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:15:\"6-1-300x184.png\";s:5:\"width\";i:300;s:6:\"height\";i:184;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(246,135,'_wp_attached_file','2019/05/11-1.png'),(247,135,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:269;s:6:\"height\";i:225;s:4:\"file\";s:16:\"2019/05/11-1.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:16:\"11-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(250,139,'_edit_lock','1558345380:1'),(251,137,'_edit_lock','1558345380:1'),(252,138,'_edit_lock','1558345526:1'),(257,141,'_edit_lock','1558350713:1'),(258,142,'_wp_attached_file','2019/05/bitbucket_jenkins.png'),(259,142,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:616;s:6:\"height\";i:297;s:4:\"file\";s:29:\"2019/05/bitbucket_jenkins.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"bitbucket_jenkins-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"bitbucket_jenkins-300x145.png\";s:5:\"width\";i:300;s:6:\"height\";i:145;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(260,143,'_wp_attached_file','2019/05/7.png'),(261,143,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:702;s:6:\"height\";i:715;s:4:\"file\";s:13:\"2019/05/7.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:13:\"7-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:13:\"7-295x300.png\";s:5:\"width\";i:295;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(262,144,'_wp_attached_file','2019/05/1.png'),(263,144,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1599;s:6:\"height\";i:355;s:4:\"file\";s:13:\"2019/05/1.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:13:\"1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:12:\"1-300x67.png\";s:5:\"width\";i:300;s:6:\"height\";i:67;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:13:\"1-768x171.png\";s:5:\"width\";i:768;s:6:\"height\";i:171;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:14:\"1-1024x227.png\";s:5:\"width\";i:1024;s:6:\"height\";i:227;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:14:\"1-1200x266.png\";s:5:\"width\";i:1200;s:6:\"height\";i:266;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(264,145,'_wp_attached_file','2019/05/2.png'),(265,145,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1242;s:6:\"height\";i:126;s:4:\"file\";s:13:\"2019/05/2.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:13:\"2-150x126.png\";s:5:\"width\";i:150;s:6:\"height\";i:126;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:12:\"2-300x30.png\";s:5:\"width\";i:300;s:6:\"height\";i:30;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:12:\"2-768x78.png\";s:5:\"width\";i:768;s:6:\"height\";i:78;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:14:\"2-1024x104.png\";s:5:\"width\";i:1024;s:6:\"height\";i:104;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:14:\"2-1200x122.png\";s:5:\"width\";i:1200;s:6:\"height\";i:122;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(266,146,'_wp_attached_file','2019/05/3.png'),(267,146,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1223;s:6:\"height\";i:471;s:4:\"file\";s:13:\"2019/05/3.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:13:\"3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:13:\"3-300x116.png\";s:5:\"width\";i:300;s:6:\"height\";i:116;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:13:\"3-768x296.png\";s:5:\"width\";i:768;s:6:\"height\";i:296;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:14:\"3-1024x394.png\";s:5:\"width\";i:1024;s:6:\"height\";i:394;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:14:\"3-1200x462.png\";s:5:\"width\";i:1200;s:6:\"height\";i:462;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(268,147,'_wp_attached_file','2019/05/4-2.png'),(269,147,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:385;s:6:\"height\";i:427;s:4:\"file\";s:15:\"2019/05/4-2.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"4-2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:15:\"4-2-270x300.png\";s:5:\"width\";i:270;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(270,148,'_wp_attached_file','2019/05/5.png'),(271,148,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1179;s:6:\"height\";i:800;s:4:\"file\";s:13:\"2019/05/5.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:13:\"5-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:13:\"5-300x204.png\";s:5:\"width\";i:300;s:6:\"height\";i:204;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:13:\"5-768x521.png\";s:5:\"width\";i:768;s:6:\"height\";i:521;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:14:\"5-1024x695.png\";s:5:\"width\";i:1024;s:6:\"height\";i:695;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(272,149,'_wp_attached_file','2019/05/7-1.png'),(273,149,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:252;s:6:\"height\";i:354;s:4:\"file\";s:15:\"2019/05/7-1.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"7-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:15:\"7-1-214x300.png\";s:5:\"width\";i:214;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(274,150,'_wp_attached_file','2019/05/6.png'),(275,150,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1599;s:6:\"height\";i:519;s:4:\"file\";s:13:\"2019/05/6.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:13:\"6-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:12:\"6-300x97.png\";s:5:\"width\";i:300;s:6:\"height\";i:97;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:13:\"6-768x249.png\";s:5:\"width\";i:768;s:6:\"height\";i:249;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:14:\"6-1024x332.png\";s:5:\"width\";i:1024;s:6:\"height\";i:332;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:14:\"6-1200x389.png\";s:5:\"width\";i:1200;s:6:\"height\";i:389;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(278,152,'_edit_lock','1558348999:1'),(279,153,'_wp_attached_file','2019/05/jenkins-master-slave-configuration.jpg'),(280,153,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:370;s:6:\"height\";i:392;s:4:\"file\";s:46:\"2019/05/jenkins-master-slave-configuration.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"jenkins-master-slave-configuration-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"jenkins-master-slave-configuration-283x300.jpg\";s:5:\"width\";i:283;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(281,154,'_wp_attached_file','2019/05/3-2.png'),(282,154,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:958;s:6:\"height\";i:320;s:4:\"file\";s:15:\"2019/05/3-2.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"3-2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:15:\"3-2-300x100.png\";s:5:\"width\";i:300;s:6:\"height\";i:100;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:15:\"3-2-768x257.png\";s:5:\"width\";i:768;s:6:\"height\";i:257;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(283,155,'_wp_attached_file','2019/05/4-3.png'),(284,155,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:712;s:6:\"height\";i:137;s:4:\"file\";s:15:\"2019/05/4-3.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"4-3-150x137.png\";s:5:\"width\";i:150;s:6:\"height\";i:137;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:14:\"4-3-300x58.png\";s:5:\"width\";i:300;s:6:\"height\";i:58;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(285,156,'_wp_attached_file','2019/05/1-2.png'),(286,156,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:993;s:6:\"height\";i:591;s:4:\"file\";s:15:\"2019/05/1-2.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"1-2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:15:\"1-2-300x179.png\";s:5:\"width\";i:300;s:6:\"height\";i:179;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:15:\"1-2-768x457.png\";s:5:\"width\";i:768;s:6:\"height\";i:457;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(287,157,'_wp_attached_file','2019/05/3-1-1.png'),(288,157,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1599;s:6:\"height\";i:301;s:4:\"file\";s:17:\"2019/05/3-1-1.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"3-1-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:16:\"3-1-1-300x56.png\";s:5:\"width\";i:300;s:6:\"height\";i:56;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:17:\"3-1-1-768x145.png\";s:5:\"width\";i:768;s:6:\"height\";i:145;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:18:\"3-1-1-1024x193.png\";s:5:\"width\";i:1024;s:6:\"height\";i:193;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:18:\"3-1-1-1200x226.png\";s:5:\"width\";i:1200;s:6:\"height\";i:226;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(289,158,'_wp_attached_file','2019/05/4-1-1.png'),(290,158,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1599;s:6:\"height\";i:827;s:4:\"file\";s:17:\"2019/05/4-1-1.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"4-1-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"4-1-1-300x155.png\";s:5:\"width\";i:300;s:6:\"height\";i:155;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:17:\"4-1-1-768x397.png\";s:5:\"width\";i:768;s:6:\"height\";i:397;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:18:\"4-1-1-1024x530.png\";s:5:\"width\";i:1024;s:6:\"height\";i:530;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:18:\"4-1-1-1200x621.png\";s:5:\"width\";i:1200;s:6:\"height\";i:621;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(291,159,'_wp_attached_file','2019/05/6-2.png'),(292,159,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1599;s:6:\"height\";i:399;s:4:\"file\";s:15:\"2019/05/6-2.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"6-2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:14:\"6-2-300x75.png\";s:5:\"width\";i:300;s:6:\"height\";i:75;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:15:\"6-2-768x192.png\";s:5:\"width\";i:768;s:6:\"height\";i:192;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:16:\"6-2-1024x256.png\";s:5:\"width\";i:1024;s:6:\"height\";i:256;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:16:\"6-2-1200x299.png\";s:5:\"width\";i:1200;s:6:\"height\";i:299;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(293,160,'_wp_attached_file','2019/05/7-2.png'),(294,160,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1599;s:6:\"height\";i:452;s:4:\"file\";s:15:\"2019/05/7-2.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"7-2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:14:\"7-2-300x85.png\";s:5:\"width\";i:300;s:6:\"height\";i:85;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:15:\"7-2-768x217.png\";s:5:\"width\";i:768;s:6:\"height\";i:217;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:16:\"7-2-1024x289.png\";s:5:\"width\";i:1024;s:6:\"height\";i:289;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:16:\"7-2-1200x339.png\";s:5:\"width\";i:1200;s:6:\"height\";i:339;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(297,162,'_edit_lock','1558349671:1'),(298,163,'_wp_attached_file','2019/05/1-3.png'),(299,163,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:540;s:6:\"height\";i:200;s:4:\"file\";s:15:\"2019/05/1-3.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"1-3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:15:\"1-3-300x111.png\";s:5:\"width\";i:300;s:6:\"height\";i:111;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(300,164,'_wp_attached_file','2019/05/2-1.png'),(301,164,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1083;s:6:\"height\";i:809;s:4:\"file\";s:15:\"2019/05/2-1.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"2-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:15:\"2-1-300x224.png\";s:5:\"width\";i:300;s:6:\"height\";i:224;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:15:\"2-1-768x574.png\";s:5:\"width\";i:768;s:6:\"height\";i:574;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:16:\"2-1-1024x765.png\";s:5:\"width\";i:1024;s:6:\"height\";i:765;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(302,165,'_wp_attached_file','2019/05/3-3.png'),(303,165,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1120;s:6:\"height\";i:247;s:4:\"file\";s:15:\"2019/05/3-3.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"3-3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:14:\"3-3-300x66.png\";s:5:\"width\";i:300;s:6:\"height\";i:66;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:15:\"3-3-768x169.png\";s:5:\"width\";i:768;s:6:\"height\";i:169;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:16:\"3-3-1024x226.png\";s:5:\"width\";i:1024;s:6:\"height\";i:226;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(304,166,'_wp_attached_file','2019/05/4-4.png'),(305,166,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:611;s:6:\"height\";i:226;s:4:\"file\";s:15:\"2019/05/4-4.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"4-4-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:15:\"4-4-300x111.png\";s:5:\"width\";i:300;s:6:\"height\";i:111;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(310,170,'_edit_lock','1558350699:1'),(311,169,'_edit_lock','1558350138:1'),(312,171,'_wp_attached_file','2019/05/1.jpg'),(313,171,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1600;s:6:\"height\";i:400;s:4:\"file\";s:13:\"2019/05/1.jpg\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:13:\"1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:12:\"1-300x75.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:75;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:13:\"1-768x192.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:192;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:14:\"1-1024x256.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:256;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:14:\"1-1200x300.jpg\";s:5:\"width\";i:1200;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),(316,173,'_wp_attached_file','2019/05/gradle.png'),(317,173,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1033;s:6:\"height\";i:85;s:4:\"file\";s:18:\"2019/05/gradle.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"gradle-150x85.png\";s:5:\"width\";i:150;s:6:\"height\";i:85;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"gradle-300x25.png\";s:5:\"width\";i:300;s:6:\"height\";i:25;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:17:\"gradle-768x63.png\";s:5:\"width\";i:768;s:6:\"height\";i:63;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:18:\"gradle-1024x84.png\";s:5:\"width\";i:1024;s:6:\"height\";i:84;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(318,174,'_wp_attached_file','2019/05/Build.png'),(319,174,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:974;s:6:\"height\";i:350;s:4:\"file\";s:17:\"2019/05/Build.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"Build-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"Build-300x108.png\";s:5:\"width\";i:300;s:6:\"height\";i:108;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:17:\"Build-768x276.png\";s:5:\"width\";i:768;s:6:\"height\";i:276;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(320,175,'_wp_attached_file','2019/05/post-build.png'),(321,175,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:978;s:6:\"height\";i:270;s:4:\"file\";s:22:\"2019/05/post-build.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"post-build-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"post-build-300x83.png\";s:5:\"width\";i:300;s:6:\"height\";i:83;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"post-build-768x212.png\";s:5:\"width\";i:768;s:6:\"height\";i:212;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(322,176,'_wp_attached_file','2019/05/buils_now.png'),(323,176,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:276;s:6:\"height\";i:348;s:4:\"file\";s:21:\"2019/05/buils_now.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"buils_now-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"buils_now-238x300.png\";s:5:\"width\";i:238;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(324,177,'_wp_attached_file','2019/05/after_build.png'),(325,177,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:878;s:6:\"height\";i:374;s:4:\"file\";s:23:\"2019/05/after_build.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"after_build-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"after_build-300x128.png\";s:5:\"width\";i:300;s:6:\"height\";i:128;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:23:\"after_build-768x327.png\";s:5:\"width\";i:768;s:6:\"height\";i:327;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(328,170,'_edit_last','1'),(331,141,'_edit_last','1');
/*!40000 ALTER TABLE `wp_postmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_posts`
--

DROP TABLE IF EXISTS `wp_posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_title` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_excerpt` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_status` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'open',
  `post_password` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `post_name` varchar(200) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `to_ping` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `pinged` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `guid` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  KEY `post_name` (`post_name`(191)),
  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  KEY `post_parent` (`post_parent`),
  KEY `post_author` (`post_author`)
) ENGINE=InnoDB AUTO_INCREMENT=179 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_posts`
--

LOCK TABLES `wp_posts` WRITE;
/*!40000 ALTER TABLE `wp_posts` DISABLE KEYS */;
INSERT INTO `wp_posts` VALUES (1,1,'2019-03-08 10:11:22','2019-03-08 10:11:22','<!-- wp:paragraph -->\n<p>Welcome to WordPress. This is your first post. Edit or delete it, then start writing!</p>\n<!-- /wp:paragraph -->','Hello world!','','trash','open','open','','hello-world__trashed','','','2019-05-03 06:39:29','2019-05-03 06:39:29','',0,'http://192.168.1.181:8080/wordpress/?p=1',0,'post','',1),(2,1,'2019-03-08 10:11:22','2019-03-08 10:11:22','<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p> <br>How to Install NRPE on Ubuntu 18.04 &amp; 16.04 LTS </p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p><strong>NRPE (Nagios Remote Plugin Executor)</strong>&nbsp;is used for executing Nagios plugins on remote client systems. In previous&nbsp;<a href=\"https://tecadmin.net/install-nagios-monitoring-server-on-ubuntu/\" target=\"_blank\" rel=\"noreferrer noopener\">article</a>&nbsp;we had described about installation of Nagios Server on Ubuntu operating system. This article will help you to install NRPE on Ubuntu 18.04 LTS, 16.04 LTS &amp; LinuxMint 19/18 systems.\n\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":17} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nrpe.png\" alt=\"\" class=\"wp-image-17\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 1 – Install NRPE on Ubuntu<br>\nNRPE is available under default apt repositories of Ubuntu systems. Execute the following command to install it</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo apt-get update<br>\nsudo apt-get install nagios-nrpe-server nagios-plugins<br>\nStep 2 – Configure NRPE<br>\nIn NRPE configuration, first we need to nrpe to which nagios servers it accepts requests, For example your nagios server ip is 192.168.1.100, then add this ip to allowed hosts list. Edit NRPE configuration file /etc/nagios/nrpe.cfg and make changes like</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>/etc/nagios/nrpe.cfg<br>\n allowed_hosts=127.0.0.1, 192.168.1.100<br>\nwe can add more Nagios servers in allowed hosts by comma separated list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now restart NRPE service. Now its ready to listen to requests from Nagios server</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo /etc/init.d/nagios-nrpe-server restart<br>\nStep 3 – Verify Connection<br>\nLet’s verify the connection between the Nagios server and NRPE client machine. Login to your Nagios server and check the Nagios server can communicate with NRPE service properly.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Use check_nrpe command on Nagios server under plugins directory. The command will be like as below here 192.168.1.11 is the IP address of client machine.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>check_nrpe -H 192.168.1.11</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>NRPE v2.15<br>\nThe output “NRPE v2.15” shows that the Nagios server successfully communicated with NRPE.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 4 – Add Check Commands in NRPE<br>\nAll the services check commands with the nagios plugins packages, which is by default installed in /usr/lib/nagios/plugins/ for 32 bit systems. Default installation adds few commands in configuration file. Add more commands as per your requirements like below</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>vim /etc/nagios/nrpe.cfg<br>\n/etc/nagios/nrpe.cfg<br>\ncommand[check_users]=/usr/lib/nagios/plugins/check_users -w 5 -c 10<br>\ncommand[check_load]=/usr/lib/nagios/plugins/check_load -w 15,10,5 -c 30,25,20<br>\ncommand[check_hda1]=/usr/lib/nagios/plugins/check_disk -w 20% -c 10% -p /dev/hda1<br>\ncommand[check_zombie_procs]=/usr/lib/nagios/plugins/check_procs -w 5 -c 10 -s Z<br>\ncommand[check_total_procs]=/usr/lib/nagios/plugins/check_procs -w 150 -c 200<br>\nStep 5 – Start/Stop NRPE Service<br>\nUse following commands to start, stop or restart NRPE service. Each time we make any changes in configuration file required to restart service</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo /etc/init.d/nagios-nrpe-server stop<br>\nsudo /etc/init.d/nagios-nrpe-server start<br>\nsudo /etc/init.d/nagios-nrpe-server restart</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Nagios','','publish','closed','open','','sample-page','','','2019-05-03 06:56:32','2019-05-03 06:56:32','',0,'http://192.168.1.181:8080/wordpress/?page_id=2',0,'page','',0),(3,1,'2019-03-08 10:11:22','2019-03-08 10:11:22','<!-- wp:heading --><h2>Who we are</h2><!-- /wp:heading --><!-- wp:paragraph --><p>Our website address is: http://192.168.1.181:8080/wordpress.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>What personal data we collect and why we collect it</h2><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>Comments</h3><!-- /wp:heading --><!-- wp:paragraph --><p>When visitors leave comments on the site we collect the data shown in the comments form, and also the visitor&#8217;s IP address and browser user agent string to help spam detection.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>An anonymized string created from your email address (also called a hash) may be provided to the Gravatar service to see if you are using it. The Gravatar service privacy policy is available here: https://automattic.com/privacy/. After approval of your comment, your profile picture is visible to the public in the context of your comment.</p><!-- /wp:paragraph --><!-- wp:heading {\"level\":3} --><h3>Media</h3><!-- /wp:heading --><!-- wp:paragraph --><p>If you upload images to the website, you should avoid uploading images with embedded location data (EXIF GPS) included. Visitors to the website can download and extract any location data from images on the website.</p><!-- /wp:paragraph --><!-- wp:heading {\"level\":3} --><h3>Contact forms</h3><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>Cookies</h3><!-- /wp:heading --><!-- wp:paragraph --><p>If you leave a comment on our site you may opt-in to saving your name, email address and website in cookies. These are for your convenience so that you do not have to fill in your details again when you leave another comment. These cookies will last for one year.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>If you have an account and you log in to this site, we will set a temporary cookie to determine if your browser accepts cookies. This cookie contains no personal data and is discarded when you close your browser.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>When you log in, we will also set up several cookies to save your login information and your screen display choices. Login cookies last for two days, and screen options cookies last for a year. If you select &quot;Remember Me&quot;, your login will persist for two weeks. If you log out of your account, the login cookies will be removed.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>If you edit or publish an article, an additional cookie will be saved in your browser. This cookie includes no personal data and simply indicates the post ID of the article you just edited. It expires after 1 day.</p><!-- /wp:paragraph --><!-- wp:heading {\"level\":3} --><h3>Embedded content from other websites</h3><!-- /wp:heading --><!-- wp:paragraph --><p>Articles on this site may include embedded content (e.g. videos, images, articles, etc.). Embedded content from other websites behaves in the exact same way as if the visitor has visited the other website.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>These websites may collect data about you, use cookies, embed additional third-party tracking, and monitor your interaction with that embedded content, including tracking your interaction with the embedded content if you have an account and are logged in to that website.</p><!-- /wp:paragraph --><!-- wp:heading {\"level\":3} --><h3>Analytics</h3><!-- /wp:heading --><!-- wp:heading --><h2>Who we share your data with</h2><!-- /wp:heading --><!-- wp:heading --><h2>How long we retain your data</h2><!-- /wp:heading --><!-- wp:paragraph --><p>If you leave a comment, the comment and its metadata are retained indefinitely. This is so we can recognize and approve any follow-up comments automatically instead of holding them in a moderation queue.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>For users that register on our website (if any), we also store the personal information they provide in their user profile. All users can see, edit, or delete their personal information at any time (except they cannot change their username). Website administrators can also see and edit that information.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>What rights you have over your data</h2><!-- /wp:heading --><!-- wp:paragraph --><p>If you have an account on this site, or have left comments, you can request to receive an exported file of the personal data we hold about you, including any data you have provided to us. You can also request that we erase any personal data we hold about you. This does not include any data we are obliged to keep for administrative, legal, or security purposes.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>Where we send your data</h2><!-- /wp:heading --><!-- wp:paragraph --><p>Visitor comments may be checked through an automated spam detection service.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>Your contact information</h2><!-- /wp:heading --><!-- wp:heading --><h2>Additional information</h2><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>How we protect your data</h3><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>What data breach procedures we have in place</h3><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>What third parties we receive data from</h3><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>What automated decision making and/or profiling we do with user data</h3><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>Industry regulatory disclosure requirements</h3><!-- /wp:heading -->','Privacy Policy','','draft','closed','open','','privacy-policy','','','2019-03-08 10:11:22','2019-03-08 10:11:22','',0,'http://192.168.1.181:8080/wordpress/?page_id=3',0,'page','',0),(10,1,'2019-05-03 06:36:15','2019-05-03 06:36:15','{\n    \"show_on_front\": {\n        \"value\": \"page\",\n        \"type\": \"option\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2019-05-03 06:35:57\"\n    },\n    \"page_on_front\": {\n        \"value\": \"2\",\n        \"type\": \"option\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2019-05-03 06:35:57\"\n    },\n    \"old_sidebars_widgets_data\": {\n        \"value\": {\n            \"wp_inactive_widgets\": [],\n            \"sidebar-1\": [\n                \"search-2\",\n                \"recent-posts-2\",\n                \"recent-comments-2\",\n                \"archives-2\",\n                \"categories-2\",\n                \"meta-2\"\n            ]\n        },\n        \"type\": \"global_variable\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2019-05-03 06:36:15\"\n    }\n}','','','trash','closed','closed','','06f433af-9b03-4649-9148-19eaff4bee8a','','','2019-05-03 06:36:15','2019-05-03 06:36:15','',0,'http://192.168.1.181:8080/wordpress/?p=10',0,'customize_changeset','',0),(11,1,'2019-05-03 06:39:29','2019-05-03 06:39:29','<!-- wp:paragraph -->\n<p>Welcome to WordPress. This is your first post. Edit or delete it, then start writing!</p>\n<!-- /wp:paragraph -->','Hello world!','','inherit','closed','closed','','1-revision-v1','','','2019-05-03 06:39:29','2019-05-03 06:39:29','',1,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/1-revision-v1/',0,'revision','',0),(12,1,'2019-05-03 06:40:53','2019-05-03 06:40:53','{\n    \"twentysixteen::nav_menu_locations[primary]\": {\n        \"value\": -2924519643545243600,\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2019-05-03 06:40:53\"\n    },\n    \"nav_menu[-2924519643545243600]\": {\n        \"value\": {\n            \"name\": \"Nagios\",\n            \"description\": \"\",\n            \"parent\": 0,\n            \"auto_add\": false\n        },\n        \"type\": \"nav_menu\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2019-05-03 06:40:53\"\n    }\n}','','','trash','closed','closed','','04761c74-cc0a-44ae-85ac-be41816c8d9d','','','2019-05-03 06:40:53','2019-05-03 06:40:53','',0,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/04761c74-cc0a-44ae-85ac-be41816c8d9d/',0,'customize_changeset','',0),(13,1,'2019-05-03 06:41:49','2019-05-03 06:41:49','{\n    \"nav_menu[2]\": {\n        \"value\": {\n            \"name\": \"Nagios\",\n            \"description\": \"\",\n            \"parent\": 0,\n            \"auto_add\": true\n        },\n        \"type\": \"nav_menu\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2019-05-03 06:41:49\"\n    }\n}','','','trash','closed','closed','','7481f495-3a46-4fe0-b449-aafb3fc54abc','','','2019-05-03 06:41:49','2019-05-03 06:41:49','',0,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/7481f495-3a46-4fe0-b449-aafb3fc54abc/',0,'customize_changeset','',0),(14,1,'2019-05-03 06:44:24','2019-05-03 06:44:24','','nginx-t','Deep Networking series. Abstract design made of industrial grunge texture, numbers and dark gradients on the subject of computing, industrial design and modern technology; Shutterstock ID 119971306; PO: DigitalGuide','inherit','open','closed','','nginx-t','','','2019-05-03 06:44:24','2019-05-03 06:44:24','',0,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nginx-t.jpg',0,'attachment','image/jpeg',0),(15,1,'2019-05-03 06:44:32','2019-05-03 06:44:32','','cropped-nginx-t.jpg','','inherit','open','closed','','cropped-nginx-t-jpg','','','2019-05-03 06:44:32','2019-05-03 06:44:32','',0,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/cropped-nginx-t.jpg',0,'attachment','image/jpeg',0),(16,1,'2019-05-03 06:44:43','2019-05-03 06:44:43','{\n    \"twentysixteen::header_image\": {\n        \"value\": \"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/cropped-nginx-t.jpg\",\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2019-05-03 06:44:43\"\n    },\n    \"twentysixteen::header_image_data\": {\n        \"value\": {\n            \"url\": \"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/cropped-nginx-t.jpg\",\n            \"thumbnail_url\": \"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/cropped-nginx-t.jpg\",\n            \"timestamp\": 1556865872601,\n            \"attachment_id\": 15,\n            \"width\": 1200,\n            \"height\": 281\n        },\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2019-05-03 06:44:43\"\n    }\n}','','','trash','closed','closed','','182de3a4-86d4-4f8e-8f45-4cf432281626','','','2019-05-03 06:44:43','2019-05-03 06:44:43','',0,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/182de3a4-86d4-4f8e-8f45-4cf432281626/',0,'customize_changeset','',0),(17,1,'2019-05-03 06:50:08','2019-05-03 06:50:08','','nrpe','','inherit','open','closed','','nrpe','','','2019-05-03 06:50:08','2019-05-03 06:50:08','',2,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nrpe.png',0,'attachment','image/png',0),(18,1,'2019-05-03 06:51:23','2019-05-03 06:51:23','<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p> <br>How to Install NRPE on Ubuntu 18.04 &amp; 16.04 LTS </p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p><strong>NRPE (Nagios Remote Plugin Executor)</strong>&nbsp;is used for executing Nagios plugins on remote client systems. In previous&nbsp;<a href=\"https://tecadmin.net/install-nagios-monitoring-server-on-ubuntu/\" target=\"_blank\" rel=\"noreferrer noopener\">article</a>&nbsp;we had described about installation of Nagios Server on Ubuntu operating system. This article will help you to install NRPE on Ubuntu 18.04 LTS, 16.04 LTS &amp; LinuxMint 19/18 systems.\n\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":17} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nrpe.png\" alt=\"\" class=\"wp-image-17\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 1 – Install NRPE on Ubuntu<br>\nNRPE is available under default apt repositories of Ubuntu systems. Execute the following command to install it</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo apt-get update<br>\nsudo apt-get install nagios-nrpe-server nagios-plugins<br>\nStep 2 – Configure NRPE<br>\nIn NRPE configuration, first we need to nrpe to which nagios servers it accepts requests, For example your nagios server ip is 192.168.1.100, then add this ip to allowed hosts list. Edit NRPE configuration file /etc/nagios/nrpe.cfg and make changes like</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>/etc/nagios/nrpe.cfg<br>\n allowed_hosts=127.0.0.1, 192.168.1.100<br>\nwe can add more Nagios servers in allowed hosts by comma separated list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now restart NRPE service. Now its ready to listen to requests from Nagios server</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo /etc/init.d/nagios-nrpe-server restart<br>\nStep 3 – Verify Connection<br>\nLet’s verify the connection between the Nagios server and NRPE client machine. Login to your Nagios server and check the Nagios server can communicate with NRPE service properly.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Use check_nrpe command on Nagios server under plugins directory. The command will be like as below here 192.168.1.11 is the IP address of client machine.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>check_nrpe -H 192.168.1.11</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>NRPE v2.15<br>\nThe output “NRPE v2.15” shows that the Nagios server successfully communicated with NRPE.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 4 – Add Check Commands in NRPE<br>\nAll the services check commands with the nagios plugins packages, which is by default installed in /usr/lib/nagios/plugins/ for 32 bit systems. Default installation adds few commands in configuration file. Add more commands as per your requirements like below</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>vim /etc/nagios/nrpe.cfg<br>\n/etc/nagios/nrpe.cfg<br>\ncommand[check_users]=/usr/lib/nagios/plugins/check_users -w 5 -c 10<br>\ncommand[check_load]=/usr/lib/nagios/plugins/check_load -w 15,10,5 -c 30,25,20<br>\ncommand[check_hda1]=/usr/lib/nagios/plugins/check_disk -w 20% -c 10% -p /dev/hda1<br>\ncommand[check_zombie_procs]=/usr/lib/nagios/plugins/check_procs -w 5 -c 10 -s Z<br>\ncommand[check_total_procs]=/usr/lib/nagios/plugins/check_procs -w 150 -c 200<br>\nStep 5 – Start/Stop NRPE Service<br>\nUse following commands to start, stop or restart NRPE service. Each time we make any changes in configuration file required to restart service</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo /etc/init.d/nagios-nrpe-server stop<br>\nsudo /etc/init.d/nagios-nrpe-server start<br>\nsudo /etc/init.d/nagios-nrpe-server restart</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Nagios','','inherit','closed','closed','','2-revision-v1','','','2019-05-03 06:51:23','2019-05-03 06:51:23','',2,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/2-revision-v1/',0,'revision','',0),(19,1,'2019-05-03 06:56:32','2019-05-03 06:56:32','<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p> <br>How to Install NRPE on Ubuntu 18.04 &amp; 16.04 LTS </p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p><strong>NRPE (Nagios Remote Plugin Executor)</strong>&nbsp;is used for executing Nagios plugins on remote client systems. In previous&nbsp;<a href=\"https://tecadmin.net/install-nagios-monitoring-server-on-ubuntu/\" target=\"_blank\" rel=\"noreferrer noopener\">article</a>&nbsp;we had described about installation of Nagios Server on Ubuntu operating system. This article will help you to install NRPE on Ubuntu 18.04 LTS, 16.04 LTS &amp; LinuxMint 19/18 systems.\n\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":17} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nrpe.png\" alt=\"\" class=\"wp-image-17\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 1 – Install NRPE on Ubuntu<br>\nNRPE is available under default apt repositories of Ubuntu systems. Execute the following command to install it</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo apt-get update<br>\nsudo apt-get install nagios-nrpe-server nagios-plugins<br>\nStep 2 – Configure NRPE<br>\nIn NRPE configuration, first we need to nrpe to which nagios servers it accepts requests, For example your nagios server ip is 192.168.1.100, then add this ip to allowed hosts list. Edit NRPE configuration file /etc/nagios/nrpe.cfg and make changes like</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>/etc/nagios/nrpe.cfg<br>\n allowed_hosts=127.0.0.1, 192.168.1.100<br>\nwe can add more Nagios servers in allowed hosts by comma separated list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now restart NRPE service. Now its ready to listen to requests from Nagios server</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo /etc/init.d/nagios-nrpe-server restart<br>\nStep 3 – Verify Connection<br>\nLet’s verify the connection between the Nagios server and NRPE client machine. Login to your Nagios server and check the Nagios server can communicate with NRPE service properly.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Use check_nrpe command on Nagios server under plugins directory. The command will be like as below here 192.168.1.11 is the IP address of client machine.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>check_nrpe -H 192.168.1.11</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>NRPE v2.15<br>\nThe output “NRPE v2.15” shows that the Nagios server successfully communicated with NRPE.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 4 – Add Check Commands in NRPE<br>\nAll the services check commands with the nagios plugins packages, which is by default installed in /usr/lib/nagios/plugins/ for 32 bit systems. Default installation adds few commands in configuration file. Add more commands as per your requirements like below</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>vim /etc/nagios/nrpe.cfg<br>\n/etc/nagios/nrpe.cfg<br>\ncommand[check_users]=/usr/lib/nagios/plugins/check_users -w 5 -c 10<br>\ncommand[check_load]=/usr/lib/nagios/plugins/check_load -w 15,10,5 -c 30,25,20<br>\ncommand[check_hda1]=/usr/lib/nagios/plugins/check_disk -w 20% -c 10% -p /dev/hda1<br>\ncommand[check_zombie_procs]=/usr/lib/nagios/plugins/check_procs -w 5 -c 10 -s Z<br>\ncommand[check_total_procs]=/usr/lib/nagios/plugins/check_procs -w 150 -c 200<br>\nStep 5 – Start/Stop NRPE Service<br>\nUse following commands to start, stop or restart NRPE service. Each time we make any changes in configuration file required to restart service</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo /etc/init.d/nagios-nrpe-server stop<br>\nsudo /etc/init.d/nagios-nrpe-server start<br>\nsudo /etc/init.d/nagios-nrpe-server restart</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Nagios','','inherit','closed','closed','','2-revision-v1','','','2019-05-03 06:56:32','2019-05-03 06:56:32','',2,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/2-revision-v1/',0,'revision','',0),(20,1,'2019-05-03 06:59:33','2019-05-03 06:59:33','<!-- wp:paragraph -->\n<p>sudo apt-get install wget libapache2-mod-php build-essential libgd2-xpm-dev openssl libssl-dev unzip apache2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>wget -c https://assets.nagios.com/downloads/nagioscore/releases/nagios-4.3.4.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>tar zxf nagios-4.3.4.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>cd nagios-4.3.4<br>\nsudo useradd nagios<br>\nl sudo groupadd nagcmd<br>\nsudo usermod -a -G nagcmd nagios<br>\n./configure --with-nagios-group=nagios --with-commandgroup=nagcmd</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>make all</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>make install</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>make install-commandmode</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>make install-init</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>make install-config</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>cp sample-config/httpd.conf /etc/apache2/sites-available/nagios.conf</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo usermod -G nagcmd www-data</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>wget -c http://nagios-plugins.org/download/nagios-plugins-2.2.1.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>tar vxzf nagios-plugins-2.2.1.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>cd nagios-plugins-2.2.1</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>./configure --with-nagios-user=nagios --with-nagios-group=nagios --with-openssl=/usr/bin/openssl <br>\nmake <br>\nmake install</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>wget https://sourceforge.net/projects/nagios/files/nrpe-3.x/nrpe-3.2.1/nrpe-3.2.1.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>tar zxf nrpe-3.2.1.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>cd nrpe-3.2.1</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>./configure</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>make check_nrpe</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo make install-plugin</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Open the main Nagios configuration file in your text editor</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(vi  /usr/local/nagios/etc/nagios.cfg) and uncomment below line:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>cfg_dir=/usr/local/nagios/etc/servers</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now create the directory which will store the configuration files:<br>\n sudo mkdir /usr/local/nagios/etc/servers</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Find the email directive and replace its value with your own email address and username in file </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>/usr/local/nagios/etc/objects/contacts.cfg.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note: The username should be devopsadmin which we will use in htpasswd command in 15th slide Next, add check_npre command in file,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>/usr/local/nagios/etc/objects/commands.cfg<br>\ndefine command{<br>\n command_name check_nrpe<br>\n command_line $USER1$/check_nrpe -H $HOSTADDRESS$ -c $ARG1$</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>}</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Enable the Apache rewrite and cgi modules with the a2enmod command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo a2enmod rewrite</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo a2enmod cgi</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo htpasswd -c /usr/local/nagios/etc/htpasswd.users devopsadmin</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo ln -s /etc/apache2/sites-available/nagios.conf /etc/apache2/sites-enabled/</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>vim /etc/systemd/system/nagios.service<br>\n[Unit]<br>\nDescription=Nagios<br>\nBindTo=network.target<br>\n[Install]<br>\nWantedBy=multi-user.target<br>\n[Service]<br>\nType=simple<br>\nUser=nagios<br>\nGroup=nagios<br>\nExecStart=/usr/local/nagios/bin/nagios /usr/local/nagios/etc/nagios.cfg</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo systemctl enable /etc/systemd/system/nagios.service</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo systemctl start nagios</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>install nrpe on host</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>useradd nagios<br>\napt-get update<br>\napt-get install openssl build-essential libgd2-xpm-dev libssldev</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>wget -c http://nagios-plugins.org/download/nagios-plugins-2.2.1.tar.gz<br>\ntar zxf nagios-plugins-2.2.1.tar.gz<br>\ncd nagios-plugins-2.2.1<br>\n./configure --with-nagios-user=nagios --with-nagios-group=nagios<br>\n--with-openssl<br>\nmake<br>\nmake install<br>\nwget https://github.com/NagiosEnterprises/nrpe/releases/download/nrpe-3.2.1/nrpe-3.2.1.tar.gz<br>\ntar zxvf nrpe-3.2.1.tar.gz<br>\ncd nrpe-3.2.1<br>\nConfigure, compile and install Nagios plugins:<br>\n./configure --enable-command-args --with-nagios-user=nagios --with-nagiosgroup=nagios --with-ssl=/usr/bin/openssl --with-ssl-lib=/usr/lib/x86_64-linux-gnu<br>\nmake all<br>\nmake install<br>\nmake install-config<br>\n make install-init</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, we need to allow Nagios server to connect with NRPE in file<br>\n/usr/local/nagios/etc/nrpe.cfg:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>allowed_hosts=127.0.0.1,<br>\nNow start the service:<br>\nsystemctl start nrpe.service<br>\nsystemctl status nrpe.service</p>\n<!-- /wp:paragraph -->','Nagios Installtion Steps','','publish','open','open','','nagios-installtion-steps','','','2019-05-03 07:05:03','2019-05-03 07:05:03','',0,'http://192.168.1.181:8080/wordpress/?p=20',0,'post','',0),(21,1,'2019-05-03 06:59:33','2019-05-03 06:59:33','<!-- wp:paragraph -->\n<p>sudo apt-get install wget libapache2-mod-php build-essential libgd2-xpm-dev openssl libssl-dev unzip apache2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>wget -c https://assets.nagios.com/downloads/nagioscore/releases/nagios-4.3.4.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>tar zxf nagios-4.3.4.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>cd nagios-4.3.4<br>\nsudo useradd nagios<br>\nl sudo groupadd nagcmd<br>\nsudo usermod -a -G nagcmd nagios<br>\n./configure --with-nagios-group=nagios --with-commandgroup=nagcmd</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>make all</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>make install</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>make install-commandmode</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>make install-init</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>make install-config</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>cp sample-config/httpd.conf /etc/apache2/sites-available/nagios.conf</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo usermod -G nagcmd www-data</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>wget -c http://nagios-plugins.org/download/nagios-plugins-2.2.1.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>tar vxzf nagios-plugins-2.2.1.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>cd nagios-plugins-2.2.1</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>./configure --with-nagios-user=nagios --with-nagios-group=nagios --with-openssl=/usr/bin/openssl <br>\nmake <br>\nmake install</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>wget https://sourceforge.net/projects/nagios/files/nrpe-3.x/nrpe-3.2.1/nrpe-3.2.1.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>tar zxf nrpe-3.2.1.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>cd nrpe-3.2.1</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>./configure</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>make check_nrpe</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo make install-plugin</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Open the main Nagios configuration file in your text editor</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(vi  /usr/local/nagios/etc/nagios.cfg) and uncomment below line:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>cfg_dir=/usr/local/nagios/etc/servers</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now create the directory which will store the configuration files:<br>\n sudo mkdir /usr/local/nagios/etc/servers</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Find the email directive and replace its value with your own email address and username in file </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>/usr/local/nagios/etc/objects/contacts.cfg.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note: The username should be devopsadmin which we will use in htpasswd command in 15th slide Next, add check_npre command in file,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>/usr/local/nagios/etc/objects/commands.cfg<br>\ndefine command{<br>\n command_name check_nrpe<br>\n command_line $USER1$/check_nrpe -H $HOSTADDRESS$ -c $ARG1$</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>}</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Enable the Apache rewrite and cgi modules with the a2enmod command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo a2enmod rewrite</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo a2enmod cgi</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo htpasswd -c /usr/local/nagios/etc/htpasswd.users devopsadmin</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo ln -s /etc/apache2/sites-available/nagios.conf /etc/apache2/sites-enabled/</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>vim /etc/systemd/system/nagios.service<br>\n[Unit]<br>\nDescription=Nagios<br>\nBindTo=network.target<br>\n[Install]<br>\nWantedBy=multi-user.target<br>\n[Service]<br>\nType=simple<br>\nUser=nagios<br>\nGroup=nagios<br>\nExecStart=/usr/local/nagios/bin/nagios /usr/local/nagios/etc/nagios.cfg</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo systemctl enable /etc/systemd/system/nagios.service</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sudo systemctl start nagios</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>install nrpe on host</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>useradd nagios<br>\napt-get update<br>\napt-get install openssl build-essential libgd2-xpm-dev libssldev</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>wget -c http://nagios-plugins.org/download/nagios-plugins-2.2.1.tar.gz<br>\ntar zxf nagios-plugins-2.2.1.tar.gz<br>\ncd nagios-plugins-2.2.1<br>\n./configure --with-nagios-user=nagios --with-nagios-group=nagios<br>\n--with-openssl<br>\nmake<br>\nmake install<br>\nwget https://github.com/NagiosEnterprises/nrpe/releases/download/nrpe-3.2.1/nrpe-3.2.1.tar.gz<br>\ntar zxvf nrpe-3.2.1.tar.gz<br>\ncd nrpe-3.2.1<br>\nConfigure, compile and install Nagios plugins:<br>\n./configure --enable-command-args --with-nagios-user=nagios --with-nagiosgroup=nagios --with-ssl=/usr/bin/openssl --with-ssl-lib=/usr/lib/x86_64-linux-gnu<br>\nmake all<br>\nmake install<br>\nmake install-config<br>\n make install-init</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, we need to allow Nagios server to connect with NRPE in file<br>\n/usr/local/nagios/etc/nrpe.cfg:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>allowed_hosts=127.0.0.1,<br>\nNow start the service:<br>\nsystemctl start nrpe.service<br>\nsystemctl status nrpe.service</p>\n<!-- /wp:paragraph -->','Nagios Installtion Steps','','inherit','closed','closed','','20-revision-v1','','','2019-05-03 06:59:33','2019-05-03 06:59:33','',20,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/20-revision-v1/',0,'revision','',0),(22,1,'2019-05-03 07:02:18','2019-05-03 07:02:18','<!-- wp:paragraph -->\n<p>PING UNKNOWN    05-02-2019 09:17:35 0d 0h 2m 59s    4/4 CRITICAL  You need more args!!!(error)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>No output on stdout) stderr: execvp(/usr/local/nagios/libexec/check_snmp, …) failed. errno is 2: No such file or directory </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>apt-get install nagios-plugins<br>\ncp /usr/lib/nagios/plugins/check_* /usr/local/nagios/libexec/</p>\n<!-- /wp:paragraph -->','Nagios Troubleshoot','','publish','open','open','','nagios-troubleshoot','','','2019-05-03 07:03:51','2019-05-03 07:03:51','',0,'http://192.168.1.181:8080/wordpress/?p=22',0,'post','',0),(23,1,'2019-05-03 07:02:18','2019-05-03 07:02:18','<!-- wp:paragraph -->\n<p>PING UNKNOWN    05-02-2019 09:17:35 0d 0h 2m 59s    4/4 CRITICAL  You need more args!!!(error)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>No output on stdout) stderr: execvp(/usr/local/nagios/libexec/check_snmp, …) failed. errno is 2: No such file or directory </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>apt-get install nagios-plugins<br>\ncp /usr/lib/nagios/plugins/check_* /usr/local/nagios/libexec/</p>\n<!-- /wp:paragraph -->','Nagios Troubleshoot','','inherit','closed','closed','','22-revision-v1','','','2019-05-03 07:02:18','2019-05-03 07:02:18','',22,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/22-revision-v1/',0,'revision','',0),(24,1,'2019-05-03 07:13:06','2019-05-03 07:13:06','<!-- wp:paragraph -->\n<p>Nagios server (AKA nagios core) is a very useful, open-source\nmonitoring tool. With the help of Nagios server, we can monitor stats like ram\nusage, cpu usage, hdd usage along with other parameters of a number of\nmachines/servers on single screen. If something goes wrong , its sends us\nwarning by using sound or sending a mailto configured users or we can even\nconfigure Nagios to send a sms to a phone number.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Pre-requisites</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Before we can install Nagios , we need some packages like&nbsp;<strong>httpd, php, gcc, glibc, glibc-comman &amp; GD</strong>&nbsp;on our\nsystem.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To install all these packages, run following</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ yum install –y httpd php gcc glibc glibc-comman gd gd-devel\nmake net-snmp</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After all the packages are installed, we will now download the Nagios\n&amp; its plugins source file. As of writing of this tutorial, Nagios 4.2.4\n&nbsp;&amp; Plugins 2.1.4 are the latest. You can directly download the files\nusing link below or you can use wget also to get these files</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ wget\nhttps://netix.dl.sourceforge.net/project/nagios/nagios-4.x/nagios-4.4.2/nagios-4.4.2.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ wget <a href=\"https://nagios-plugins.org/download/nagios-plugins-2.2.1.tar.gz\">https://nagios-plugins.org/download/nagios-plugins-2.2.1.tar.gz</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2><strong>Installation</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Step 1 – Create &nbsp;a\nuser &amp; group for Nagios</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We\nwill add a user&nbsp;nagios&nbsp;&amp; a group&nbsp;nagcmd</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\nuseradd nagios</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\npasswd nagios&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (enter a\npassword)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\ngroupadd nagcmd</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now,\nwe will add nagios &amp; apache to nagcmd group</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\nusermod –G nagcmd nagios</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\nusermod –G nagcmd apache</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step2- Extracting Nagios\nfiles</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We\nwill now extract the nagios &amp; plugins files on our system</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\ntar -xvf nagios-4.2.4.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\ntar -xvf nagios-plugins-2.1.4.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 3- Configuring Nagios\nserver</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now\nthat we have extracted the Nagios file, we will now go to the extracted folder\n&amp; compile those files to install Nagios server</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\ncd nagios-4.2.4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\n./configure –with-command-group=nagcmd</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>after it’s completed, we\nwill now run make &amp; make install to complete our installation</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>once these steps are done, we need to install init –scripts,\ncommandmode &amp; also need to install some sample&nbsp; Nagios files</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install-init</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install-comandmode</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install-config</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step4 – Configuring Web-Interface</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once all the above installations are complete, we can now\nconfigure web-interface where we will do all the monitoring. To install\nweb-interface, run the following command</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install-webconf</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Our web-interface is now installed and a default user\n“nagiosadmin” has been created. We will now assign password to user\n“nagiosadmin”</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ htpasswd -s -c /usr/local/nagios/etc/htpasswd.users\nnagiosadmin</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 5- Setting an email for sending alerts</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To set an email to receive alerts , open</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ vi /usr/local/nagios/etc/objects/contacts.cfg</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>and enter an email address.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(Also Read: Complete monitoring solution : Install OMD (Open\nMonitoring Distribution))</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 6- Installing the Nagios Plugins</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, it’s time to install Nagios plugins</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ cd nagios-plugins-2.1.4/</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ ./configure – -with-nagios-user=nagios\n–with-nagios-group=nagios</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 7 – Verify Nagios files</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the last step of Nagios server installation, we will\nverify Nagios configuration file against a sample configuration file to make\nsure all the settings are Okay</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ /usr/local/nagios/bin/nagios -v\n/usr/local/nagios/etc/nagios.cfg</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If all the settings made are correct you should not receive\nany error.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now restart nagios server &amp; httpd server</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ service nagios restart</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ chkconfig nagios on</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$service httpd restart</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ chkconfig httpd on</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 8- Logging into Web-interface</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Open your browser &amp; enter http://localhost/Nagios or http://IP-address/Nagios  in your address bar &amp; you will be asked to enter the username &amp; password. Upon entering the credentials, you can now see your Nagios Web-interface. When you see<strong> service overview</strong> page, we can only see services of our localhost . That is because we have not added other host services on Nagios .</p>\n<!-- /wp:paragraph -->','Beginner’s guide to Installing & Configuring NAGIOS server','','publish','open','open','','beginners-guide-to-installing-configuring-nagios-server','','','2019-05-03 07:13:06','2019-05-03 07:13:06','',0,'http://192.168.1.181:8080/wordpress/?p=24',0,'post','',0),(25,1,'2019-05-03 07:13:06','2019-05-03 07:13:06','<!-- wp:paragraph -->\n<p>Nagios server (AKA nagios core) is a very useful, open-source\nmonitoring tool. With the help of Nagios server, we can monitor stats like ram\nusage, cpu usage, hdd usage along with other parameters of a number of\nmachines/servers on single screen. If something goes wrong , its sends us\nwarning by using sound or sending a mailto configured users or we can even\nconfigure Nagios to send a sms to a phone number.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Pre-requisites</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Before we can install Nagios , we need some packages like&nbsp;<strong>httpd, php, gcc, glibc, glibc-comman &amp; GD</strong>&nbsp;on our\nsystem.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To install all these packages, run following</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ yum install –y httpd php gcc glibc glibc-comman gd gd-devel\nmake net-snmp</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After all the packages are installed, we will now download the Nagios\n&amp; its plugins source file. As of writing of this tutorial, Nagios 4.2.4\n&nbsp;&amp; Plugins 2.1.4 are the latest. You can directly download the files\nusing link below or you can use wget also to get these files</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ wget\nhttps://netix.dl.sourceforge.net/project/nagios/nagios-4.x/nagios-4.4.2/nagios-4.4.2.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ wget <a href=\"https://nagios-plugins.org/download/nagios-plugins-2.2.1.tar.gz\">https://nagios-plugins.org/download/nagios-plugins-2.2.1.tar.gz</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2><strong>Installation</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Step 1 – Create &nbsp;a\nuser &amp; group for Nagios</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We\nwill add a user&nbsp;nagios&nbsp;&amp; a group&nbsp;nagcmd</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\nuseradd nagios</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\npasswd nagios&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (enter a\npassword)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\ngroupadd nagcmd</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now,\nwe will add nagios &amp; apache to nagcmd group</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\nusermod –G nagcmd nagios</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\nusermod –G nagcmd apache</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step2- Extracting Nagios\nfiles</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We\nwill now extract the nagios &amp; plugins files on our system</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\ntar -xvf nagios-4.2.4.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\ntar -xvf nagios-plugins-2.1.4.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 3- Configuring Nagios\nserver</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now\nthat we have extracted the Nagios file, we will now go to the extracted folder\n&amp; compile those files to install Nagios server</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\ncd nagios-4.2.4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\n./configure –with-command-group=nagcmd</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>after it’s completed, we\nwill now run make &amp; make install to complete our installation</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>once these steps are done, we need to install init –scripts,\ncommandmode &amp; also need to install some sample&nbsp; Nagios files</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install-init</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install-comandmode</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install-config</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step4 – Configuring Web-Interface</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once all the above installations are complete, we can now\nconfigure web-interface where we will do all the monitoring. To install\nweb-interface, run the following command</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install-webconf</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Our web-interface is now installed and a default user\n“nagiosadmin” has been created. We will now assign password to user\n“nagiosadmin”</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ htpasswd -s -c /usr/local/nagios/etc/htpasswd.users\nnagiosadmin</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 5- Setting an email for sending alerts</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To set an email to receive alerts , open</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ vi /usr/local/nagios/etc/objects/contacts.cfg</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>and enter an email address.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(Also Read: Complete monitoring solution : Install OMD (Open\nMonitoring Distribution))</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 6- Installing the Nagios Plugins</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, it’s time to install Nagios plugins</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ cd nagios-plugins-2.1.4/</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ ./configure – -with-nagios-user=nagios\n–with-nagios-group=nagios</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 7 – Verify Nagios files</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the last step of Nagios server installation, we will\nverify Nagios configuration file against a sample configuration file to make\nsure all the settings are Okay</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ /usr/local/nagios/bin/nagios -v\n/usr/local/nagios/etc/nagios.cfg</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If all the settings made are correct you should not receive\nany error.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now restart nagios server &amp; httpd server</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ service nagios restart</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ chkconfig nagios on</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$service httpd restart</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ chkconfig httpd on</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 8- Logging into Web-interface</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Open your browser &amp; enter http://localhost/Nagios or http://IP-address/Nagios  in your address bar &amp; you will be asked to enter the username &amp; password. Upon entering the credentials, you can now see your Nagios Web-interface. When you see<strong> service overview</strong> page, we can only see services of our localhost . That is because we have not added other host services on Nagios .</p>\n<!-- /wp:paragraph -->','Beginner’s guide to Installing & Configuring NAGIOS server','','inherit','closed','closed','','24-revision-v1','','','2019-05-03 07:13:06','2019-05-03 07:13:06','',24,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/24-revision-v1/',0,'revision','',0),(26,1,'2019-05-03 10:06:38','2019-05-03 10:06:38','<!-- wp:paragraph -->\n<p>In this\ntutorial, we will learn to configure nagios monitoring using ssh. SSH is\nusually installed on almost all the Linux distributions, so no extra packages\nneed to be installed. We only need check_by_ssh plugin, this plugin allows\nNagios to execute monitoring plugins and scripts on the remote machine in a\nsecure manner, without having to supply authentication credentials.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So let’s\nstart the configuration for setting up Nagios monitoring using SSH,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 1-\nInstalling &amp; configuring Nagios plugins on Client</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Firstly,\ninstall the following packages to resolve all dependencies required for\ninstalling the plugins ,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ yum install -y gcc glibc glibc-common gd\ngd-devel make net-snmp openssl-devel</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>now add\na user for Nagios by name “nagios”,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ useradd nagios</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ passwd nagios</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next\ndownload the Nagios plugins to the system using the following command,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ wget\nhttps://nagios-plugins.org/download/nagios-plugins-2.2.1.tar.gz</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We will\nnow extract the plugins from the downloaded tar archive,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ tar -xvf nagios-plugins-2.2.1.tar.gz</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ cd nagios-plugins-2.2.1</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And now\nwe will compile &amp; install the plugins</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ ./configure –with-nagios-user=nagios</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ make</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ make install</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After\nthe plugins are installed, we will change the ownership of the plugins folders</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ chown nagios.nagios /usr/local/nagios</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ chown -R nagios.nagios\n/usr/local/nagios/libexec</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 2-\nConfigure password less login between Nagios server &amp; client</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now, we\nneed to setup password less login between Nagios server &amp; client using the\nssh public/private key setup. To create the Public/Private keys, login to\nnagios server &amp; change the user to nagios,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ su nagios</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Than\ncreate the keys using the following command,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ ssh-keygen</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Press Enter to select default file name &amp;\npassphrase. Once the keys have been generated, we can locate them in the&nbsp;<strong>‘/home/nagios/.ssh’</strong>&nbsp;folder.\nGoto that folder,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ cd /home/nagios/.ssh</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&amp;\ncopy the public key (it’s named ‘id_rsa.pub’) to client machine using the\nfollowing command,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ ssh-copy-id -i ~/.ssh/id_rsa.pub\nnagios@client_IP</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next\nlogin to the client machine &amp; goto folder ‘/home/nagios/.ssh’ &amp; make\nsure that the permissions for the folder ‘authorized_keys’ are 700, so that\nonly ‘nagios’ user can read, write &amp; execute to that folder,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ chmod 700 /home/nagios/.ssh/authorized_keys</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Testing the\nconnection</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In order\nfor check_by_ssh to work, we should should be able to login to client machine\nfrom nagios server without any authentication. We have already made the\nnecessary changes on both Nagios server &amp; client machine, all we have to do\nis to test the connection between the two.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To test\nthe connection, ssh into the client machine from Nagios server using the\nfollowing command,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ ssh nagios@client_IP</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&amp; we\nshould be directly able to connect to the client machine, without any username\n&amp; password.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once we\nhave successfully tested the tconnection between nagios server &amp; client, we\nwill next check the check_by_ssh plugin connectivity from server to client. So\nlogout from client &amp; log back into the nagios server &amp; execute the\nfollowing command,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ /usr/local/nagios/libexec/check_by_ssh -H\nclient_ip -C uptime</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&amp; we\nshould get following output,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>12:47:01 up 3:04, 2 users, load average: 0.04,\n0.07, 0.08</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This\nshows that check_by_ssh plugin is also working the way its supposed to .</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Configuring\ncheck_by_ssh on server</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This will be the last step to setup Nagios\nmonitoring using SSH, we now have to define the commands definition to use\ncheck_by_ssh for connecting to clients. To do this , we will have to edit&nbsp;<strong>‘commands.cfg’</strong>&nbsp;,\nits located in<strong>&nbsp;‘/usr/local/nagios/etc’</strong>&nbsp;folder. Open the file,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ vim /usr/local/nagios/etc/commands.cfg</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&amp;\nadd the following commands to the file,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>define command{</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>command_name check_remote_disk</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>command_line $USER1$/check_by_ssh -p $ARG1$ \\</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>-H $HOSTADDRESS$ -C\n‘/usr/lib/nagios/plugins/check_disk \\</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>-w $ARG2$ -c $ARG3$ -p $ARG4$’</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>}</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>define command{</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>command_name check_remote_users</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>command_line $USER1$/check_by_ssh -p $ARG1$ \\</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>-H $HOSTADDRESS$ -C\n‘/usr/lib/nagios/plugins/check_users \\</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>-w $ARG2$ -c $ARG3$’</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>}</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>define command{</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>command_name check_remote_load</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>command_line $USER1$/check_by_ssh -p $ARG1$ \\</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>-H $HOSTADDRESS$ -C\n‘/usr/lib/nagios/plugins/check_load \\</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>-w $ARG2$ -c $ARG3$’</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>}</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>define command{</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>command_name check_remote_procs</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>command_line $USER1$/check_by_ssh -p $ARG1$</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>-H $HOSTADDRESS$ -C ‘/usr/lib/nagios/plugins/check_procs\n\\</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>-w $ARG2$ -c $ARG3$ -s $ARG4$’</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>}</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>define command{</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>command_name check_remote_swap</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>command_line $USER1$/check_by_ssh -p $ARG1$ \\</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>-H $HOSTADDRESS$ -C\n‘/usr/lib/nagios/plugins/check_swap \\</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>-w $ARG2$ -c $ARG3$’</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>}</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Depending\non how you configured the nagios &amp; plugins, you might need to change the\nsame in commands mentioned above. Now save the file &amp; exit &amp; restart\nthe nagios server to implement the changes,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ service nagios restart</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now\nvisit the nagios monitoring page &amp; you should be able to see the client\ninformation. With this we end this tutorial on how to setup Nagios monitoring\nusing SSH, please feel free to send in your queries and suggestions using the\ncomment box below.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Nagios Server : Adding Linux hosts for monitoring using NRPE</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Configuring Linux Host</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Before we begin installtion, we will first install Nagios\nplugin on host</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Installing required packages</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Install the following packages to resolve all\ndependencies required for installing the plugins ,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ yum\ninstall -y gcc glibc glibc-common gd gd-devel make net-snmp openssl-devel</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Download\nthe Nagios Plugins</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next,\nwe will download the Nagios plugins from the following url</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\nwget https://nagios-plugins.org/download/nagios-plugins-2.1.4.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Installing\n&amp; Configuring the plugin</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Before\ninstalling Nagios plugin, we need to add a user “nagios”</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ useradd nagios</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ passwd nagios</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>after\ncreating user, goto the folder with plugins. We will now extract the plugins</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ tar -xvf nagios-plugins-2.1.4.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ cd nagios-plugins-2.1.4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And\nnow we will compile &amp; install the plugins</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ ./configure –with-nagios-user=nagios</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;Changing the\nownership of plugin folder</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After the plugins are installed, we will change the\nownership of the plugins folders</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ chown nagios.nagios /usr/local/nagios</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ chown -R nagios.nagios /usr/local/nagios/libexec</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Downloading\n&amp; installing NRPE</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now\nits time we download&nbsp; the plugin, use the\nlink below</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\nwget\nhttps://sourceforge.net/projects/nagios/files/nrpe-3.x/nrpe-3.2.1/nrpe-3.2.1.tar.gz/download</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>then,\nextract the plugin</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ tar –xvf nrpe-3.0.1.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ cd nrpe-3.0.1</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>next,\nwe compile &amp; install it</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ ./configure</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make all</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install-plugin</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install-daemon&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n# Install plugin daemon #</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install-daemon-config&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Install plugin daemon sample\nconfig file #</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install-xinetd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Install plugin daemon as\na service under xinetd #</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Making\nchanges to Config file</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now\nopen config file and add the localhost and IP address of the Nagios Monitoring\nServer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ vi /etc/xinet.d/nrpe</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>only_from = 127.0.0.1 localhost 192.168.1.100</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&amp; in /etc/services file , add following line &amp;\nsave it</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ vi /etc/services</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>nrpe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n5666/tcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NRPE</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>finally,\nstart xinetd</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\nservice xinted restart</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note:-\nxinted is installed on most of the Linux distributions by default, but if that\nis not the case you install it using</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>yum\ninstall xinetd.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Verifying\nconnectivity from Nagios to host</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now\nthat the plugin has been installed, we will verify connectivity of host from\nnagios server by following on Nagios server</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\n/usr/local/nagios/libexec/check_nrpe -H 192.168.1.115</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>where,\n192.168.1.115 is IP address of Linux host which is to be monitored.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note:-\nNRPE config file (/usr/local/nagios/etc/nrpe.cfg) has some of the commands\nalready written on it, you can modify them as per your needs &amp; can test\nthem by directly running these on terminal.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next,\nwe move on to Nagios &amp; configure it to receive updates from Linux host.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Nagios\nServer configuration</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Download\n&amp; install NRPE</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First,\nwe download &amp; install remote plugin on Nagios server , as we did on Linux\nhost</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ tar -xzvf nrpe-3.0.1.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ cd nrpe-3.0.1</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ ./configure</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make all</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install-daemon</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Adding\nremote Linux host</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Create\ntwo files named linux_hosts.cfg &amp; linux_services.cfg in folder\n“/usr/local/nagios/etc/”</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ cd /usr/local/nagios/etc/</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ touch linux_hosts.cfg</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ touch linux_services.cfg</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>then\nwe will edit nagios.cfg &amp; add the following two files in it</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ vi /usr/local/nagios/etc/nagios.cfg</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>cfg_file=/usr/local/nagios/etc/linux_hosts.cfg</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>cfg_file=/usr/local/nagios/etc/linux_services.cfg</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now,\nwe will copy the default templates for hosts &amp; services, present in\n/usr/local/nagios/etc/objects/ to these files &amp; will edit them as per our\nneed</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Firstly\n, open&nbsp; linux_hosts.cfg &amp; edit it\n(see screenshot)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ cd /usr/local/nagios/etc/linux_hosts.cfg</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":27} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/q.png\" alt=\"\" class=\"wp-image-27\"/><figcaption> then we will add services in linux_services.cfg (see screenshot)<br> $ cd /usr/local/nagios/etc/linux_services.cfg<br> <br> &amp; lastly, we will add NRPE command definition to /usr/local/nagios/etc/objects/commands.cfg<br> $ vi /usr/local/nagios/etc/objects/commands.cfg<br> &amp; add the following command definition<br> ###############################################################################<br> # NRPE CHECK COMMAND<br> #<br> # Command to use NRPE to check remote host systems<br> ###############################################################################<br> define command{<br> command_name check_nrpe<br> command_line $USER1$/check_nrpe -H $HOSTADDRESS$ -c $ARG1$<br> }<br>  <br> Verifying Nagios configuration file<br>  <br> $ /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg<br> If there are any errors, resolve them &amp; then restart the nagios server for changes to take effect.<br> $ service nagios restart<br> Open web-console<br> Open your web-console, by typing your nagios IP address or FQDN  in your browser &amp; enter credentials for nagios. Once inside the web-console, goto services page &amp; you should see that services for your Linux hosts have added here for monitoring .<br> Nagios Server : Adding Windows host to Nagios server for monitoring<br> To add a Windows host to Nagios server, we need a plugin called <strong>NSclient++</strong>. <em>NSclient++</em> acts as a proxy or an intermediary between Nagios server &amp; Windows machine. <em>NSclient ++</em>communicates with the help <em>check_nt</em> plugin.<br> Now we will proceed with the steps required to adding Windows host to Nagios server…<br> STEP 1 Downloading &amp; installing NSclient++<br> We can download the latest version of NSclient++ from following link on the windows machine <a rel=\"noreferrer noopener\" href=\"https://sourceforge.net/projects/nscplus/\" target=\"_blank\">https://sourceforge.net/projects/nscplus/</a><br> Once you have downloaded the file which is a .msi file, double click on it to run the setup. Hit next on the setup screen, it will then ask you to accept the license agreement , accept &amp; hit next again.<br> Then choose the typical setup &amp; hit next again. You will be then asked if you would like to install some sample configurations file , leave it as it &amp; hit next.<br> Now comes the main part of setup, here you will be asked to enter the IP of nagios server (refer to screenshot below) <br>  <br>  Our installation on Windows hosts is now complete. We will configure our Nagios server for adding windows host.<br> STEP 2 Configuring Nagios server<br> Firstly, open nagios configuration file,<br> $ vi /usr/local/nagios/etc/nagios.cfg<br> &amp;  uncomment the following line<br> # Definitions for monitoring a Windows machine<br> cfg_file=/usr/local/nagios/etc/objects/windows.cfg<br> /usr/local/nagios/etc/objects/windows.cfg  is the file where we will add information about our Windows hosts. Now we will edit the windows.cfg file<br> $ vi /usr/local/nagios/etc/objects/windows.cfg<br> A sample host definition is already present in the file, we can either copy it or edit it to point to our windows machine <br> <br><br><br><br></figcaption></figure>\n<!-- /wp:image -->','Easy guide to setup Nagios monitoring using SSH (check_by_ssh)','','publish','open','open','','easy-guide-to-setup-nagios-monitoring-using-ssh-check_by_ssh','','','2019-05-03 10:06:39','2019-05-03 10:06:39','',0,'http://192.168.1.181:8080/wordpress/?p=26',0,'post','',0),(27,1,'2019-05-03 07:18:49','2019-05-03 07:18:49','','q','','inherit','open','closed','','q','','','2019-05-03 07:18:49','2019-05-03 07:18:49','',26,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/q.png',0,'attachment','image/png',0),(28,1,'2019-05-03 10:06:39','2019-05-03 10:06:39','<!-- wp:paragraph -->\n<p>In this\ntutorial, we will learn to configure nagios monitoring using ssh. SSH is\nusually installed on almost all the Linux distributions, so no extra packages\nneed to be installed. We only need check_by_ssh plugin, this plugin allows\nNagios to execute monitoring plugins and scripts on the remote machine in a\nsecure manner, without having to supply authentication credentials.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So let’s\nstart the configuration for setting up Nagios monitoring using SSH,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 1-\nInstalling &amp; configuring Nagios plugins on Client</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Firstly,\ninstall the following packages to resolve all dependencies required for\ninstalling the plugins ,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ yum install -y gcc glibc glibc-common gd\ngd-devel make net-snmp openssl-devel</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>now add\na user for Nagios by name “nagios”,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ useradd nagios</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ passwd nagios</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next\ndownload the Nagios plugins to the system using the following command,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ wget\nhttps://nagios-plugins.org/download/nagios-plugins-2.2.1.tar.gz</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We will\nnow extract the plugins from the downloaded tar archive,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ tar -xvf nagios-plugins-2.2.1.tar.gz</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ cd nagios-plugins-2.2.1</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And now\nwe will compile &amp; install the plugins</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ ./configure –with-nagios-user=nagios</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ make</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ make install</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After\nthe plugins are installed, we will change the ownership of the plugins folders</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ chown nagios.nagios /usr/local/nagios</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ chown -R nagios.nagios\n/usr/local/nagios/libexec</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 2-\nConfigure password less login between Nagios server &amp; client</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now, we\nneed to setup password less login between Nagios server &amp; client using the\nssh public/private key setup. To create the Public/Private keys, login to\nnagios server &amp; change the user to nagios,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ su nagios</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Than\ncreate the keys using the following command,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ ssh-keygen</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Press Enter to select default file name &amp;\npassphrase. Once the keys have been generated, we can locate them in the&nbsp;<strong>‘/home/nagios/.ssh’</strong>&nbsp;folder.\nGoto that folder,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ cd /home/nagios/.ssh</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&amp;\ncopy the public key (it’s named ‘id_rsa.pub’) to client machine using the\nfollowing command,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ ssh-copy-id -i ~/.ssh/id_rsa.pub\nnagios@client_IP</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next\nlogin to the client machine &amp; goto folder ‘/home/nagios/.ssh’ &amp; make\nsure that the permissions for the folder ‘authorized_keys’ are 700, so that\nonly ‘nagios’ user can read, write &amp; execute to that folder,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ chmod 700 /home/nagios/.ssh/authorized_keys</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Testing the\nconnection</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In order\nfor check_by_ssh to work, we should should be able to login to client machine\nfrom nagios server without any authentication. We have already made the\nnecessary changes on both Nagios server &amp; client machine, all we have to do\nis to test the connection between the two.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To test\nthe connection, ssh into the client machine from Nagios server using the\nfollowing command,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ ssh nagios@client_IP</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&amp; we\nshould be directly able to connect to the client machine, without any username\n&amp; password.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once we\nhave successfully tested the tconnection between nagios server &amp; client, we\nwill next check the check_by_ssh plugin connectivity from server to client. So\nlogout from client &amp; log back into the nagios server &amp; execute the\nfollowing command,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ /usr/local/nagios/libexec/check_by_ssh -H\nclient_ip -C uptime</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&amp; we\nshould get following output,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>12:47:01 up 3:04, 2 users, load average: 0.04,\n0.07, 0.08</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This\nshows that check_by_ssh plugin is also working the way its supposed to .</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Configuring\ncheck_by_ssh on server</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This will be the last step to setup Nagios\nmonitoring using SSH, we now have to define the commands definition to use\ncheck_by_ssh for connecting to clients. To do this , we will have to edit&nbsp;<strong>‘commands.cfg’</strong>&nbsp;,\nits located in<strong>&nbsp;‘/usr/local/nagios/etc’</strong>&nbsp;folder. Open the file,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ vim /usr/local/nagios/etc/commands.cfg</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&amp;\nadd the following commands to the file,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>define command{</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>command_name check_remote_disk</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>command_line $USER1$/check_by_ssh -p $ARG1$ \\</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>-H $HOSTADDRESS$ -C\n‘/usr/lib/nagios/plugins/check_disk \\</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>-w $ARG2$ -c $ARG3$ -p $ARG4$’</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>}</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>define command{</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>command_name check_remote_users</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>command_line $USER1$/check_by_ssh -p $ARG1$ \\</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>-H $HOSTADDRESS$ -C\n‘/usr/lib/nagios/plugins/check_users \\</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>-w $ARG2$ -c $ARG3$’</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>}</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>define command{</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>command_name check_remote_load</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>command_line $USER1$/check_by_ssh -p $ARG1$ \\</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>-H $HOSTADDRESS$ -C\n‘/usr/lib/nagios/plugins/check_load \\</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>-w $ARG2$ -c $ARG3$’</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>}</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>define command{</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>command_name check_remote_procs</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>command_line $USER1$/check_by_ssh -p $ARG1$</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>-H $HOSTADDRESS$ -C ‘/usr/lib/nagios/plugins/check_procs\n\\</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>-w $ARG2$ -c $ARG3$ -s $ARG4$’</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>}</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>define command{</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>command_name check_remote_swap</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>command_line $USER1$/check_by_ssh -p $ARG1$ \\</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>-H $HOSTADDRESS$ -C\n‘/usr/lib/nagios/plugins/check_swap \\</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>-w $ARG2$ -c $ARG3$’</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>}</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Depending\non how you configured the nagios &amp; plugins, you might need to change the\nsame in commands mentioned above. Now save the file &amp; exit &amp; restart\nthe nagios server to implement the changes,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>$ service nagios restart</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now\nvisit the nagios monitoring page &amp; you should be able to see the client\ninformation. With this we end this tutorial on how to setup Nagios monitoring\nusing SSH, please feel free to send in your queries and suggestions using the\ncomment box below.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Nagios Server : Adding Linux hosts for monitoring using NRPE</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Configuring Linux Host</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Before we begin installtion, we will first install Nagios\nplugin on host</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Installing required packages</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Install the following packages to resolve all\ndependencies required for installing the plugins ,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ yum\ninstall -y gcc glibc glibc-common gd gd-devel make net-snmp openssl-devel</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Download\nthe Nagios Plugins</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next,\nwe will download the Nagios plugins from the following url</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\nwget https://nagios-plugins.org/download/nagios-plugins-2.1.4.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Installing\n&amp; Configuring the plugin</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Before\ninstalling Nagios plugin, we need to add a user “nagios”</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ useradd nagios</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ passwd nagios</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>after\ncreating user, goto the folder with plugins. We will now extract the plugins</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ tar -xvf nagios-plugins-2.1.4.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ cd nagios-plugins-2.1.4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And\nnow we will compile &amp; install the plugins</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ ./configure –with-nagios-user=nagios</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;Changing the\nownership of plugin folder</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After the plugins are installed, we will change the\nownership of the plugins folders</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ chown nagios.nagios /usr/local/nagios</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ chown -R nagios.nagios /usr/local/nagios/libexec</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Downloading\n&amp; installing NRPE</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now\nits time we download&nbsp; the plugin, use the\nlink below</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\nwget\nhttps://sourceforge.net/projects/nagios/files/nrpe-3.x/nrpe-3.2.1/nrpe-3.2.1.tar.gz/download</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>then,\nextract the plugin</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ tar –xvf nrpe-3.0.1.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ cd nrpe-3.0.1</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>next,\nwe compile &amp; install it</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ ./configure</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make all</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install-plugin</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install-daemon&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n# Install plugin daemon #</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install-daemon-config&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Install plugin daemon sample\nconfig file #</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install-xinetd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Install plugin daemon as\na service under xinetd #</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Making\nchanges to Config file</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now\nopen config file and add the localhost and IP address of the Nagios Monitoring\nServer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ vi /etc/xinet.d/nrpe</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>only_from = 127.0.0.1 localhost 192.168.1.100</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&amp; in /etc/services file , add following line &amp;\nsave it</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ vi /etc/services</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>nrpe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n5666/tcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NRPE</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>finally,\nstart xinetd</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\nservice xinted restart</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note:-\nxinted is installed on most of the Linux distributions by default, but if that\nis not the case you install it using</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>yum\ninstall xinetd.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Verifying\nconnectivity from Nagios to host</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now\nthat the plugin has been installed, we will verify connectivity of host from\nnagios server by following on Nagios server</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$\n/usr/local/nagios/libexec/check_nrpe -H 192.168.1.115</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>where,\n192.168.1.115 is IP address of Linux host which is to be monitored.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note:-\nNRPE config file (/usr/local/nagios/etc/nrpe.cfg) has some of the commands\nalready written on it, you can modify them as per your needs &amp; can test\nthem by directly running these on terminal.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next,\nwe move on to Nagios &amp; configure it to receive updates from Linux host.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Nagios\nServer configuration</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Download\n&amp; install NRPE</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First,\nwe download &amp; install remote plugin on Nagios server , as we did on Linux\nhost</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ tar -xzvf nrpe-3.0.1.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ cd nrpe-3.0.1</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ ./configure</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make all</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ make install-daemon</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Adding\nremote Linux host</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Create\ntwo files named linux_hosts.cfg &amp; linux_services.cfg in folder\n“/usr/local/nagios/etc/”</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ cd /usr/local/nagios/etc/</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ touch linux_hosts.cfg</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ touch linux_services.cfg</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>then\nwe will edit nagios.cfg &amp; add the following two files in it</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ vi /usr/local/nagios/etc/nagios.cfg</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>cfg_file=/usr/local/nagios/etc/linux_hosts.cfg</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>cfg_file=/usr/local/nagios/etc/linux_services.cfg</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now,\nwe will copy the default templates for hosts &amp; services, present in\n/usr/local/nagios/etc/objects/ to these files &amp; will edit them as per our\nneed</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Firstly\n, open&nbsp; linux_hosts.cfg &amp; edit it\n(see screenshot)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ cd /usr/local/nagios/etc/linux_hosts.cfg</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":27} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/q.png\" alt=\"\" class=\"wp-image-27\"/><figcaption> then we will add services in linux_services.cfg (see screenshot)<br> $ cd /usr/local/nagios/etc/linux_services.cfg<br> <br> &amp; lastly, we will add NRPE command definition to /usr/local/nagios/etc/objects/commands.cfg<br> $ vi /usr/local/nagios/etc/objects/commands.cfg<br> &amp; add the following command definition<br> ###############################################################################<br> # NRPE CHECK COMMAND<br> #<br> # Command to use NRPE to check remote host systems<br> ###############################################################################<br> define command{<br> command_name check_nrpe<br> command_line $USER1$/check_nrpe -H $HOSTADDRESS$ -c $ARG1$<br> }<br>  <br> Verifying Nagios configuration file<br>  <br> $ /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg<br> If there are any errors, resolve them &amp; then restart the nagios server for changes to take effect.<br> $ service nagios restart<br> Open web-console<br> Open your web-console, by typing your nagios IP address or FQDN  in your browser &amp; enter credentials for nagios. Once inside the web-console, goto services page &amp; you should see that services for your Linux hosts have added here for monitoring .<br> Nagios Server : Adding Windows host to Nagios server for monitoring<br> To add a Windows host to Nagios server, we need a plugin called <strong>NSclient++</strong>. <em>NSclient++</em> acts as a proxy or an intermediary between Nagios server &amp; Windows machine. <em>NSclient ++</em>communicates with the help <em>check_nt</em> plugin.<br> Now we will proceed with the steps required to adding Windows host to Nagios server…<br> STEP 1 Downloading &amp; installing NSclient++<br> We can download the latest version of NSclient++ from following link on the windows machine <a rel=\"noreferrer noopener\" href=\"https://sourceforge.net/projects/nscplus/\" target=\"_blank\">https://sourceforge.net/projects/nscplus/</a><br> Once you have downloaded the file which is a .msi file, double click on it to run the setup. Hit next on the setup screen, it will then ask you to accept the license agreement , accept &amp; hit next again.<br> Then choose the typical setup &amp; hit next again. You will be then asked if you would like to install some sample configurations file , leave it as it &amp; hit next.<br> Now comes the main part of setup, here you will be asked to enter the IP of nagios server (refer to screenshot below) <br>  <br>  Our installation on Windows hosts is now complete. We will configure our Nagios server for adding windows host.<br> STEP 2 Configuring Nagios server<br> Firstly, open nagios configuration file,<br> $ vi /usr/local/nagios/etc/nagios.cfg<br> &amp;  uncomment the following line<br> # Definitions for monitoring a Windows machine<br> cfg_file=/usr/local/nagios/etc/objects/windows.cfg<br> /usr/local/nagios/etc/objects/windows.cfg  is the file where we will add information about our Windows hosts. Now we will edit the windows.cfg file<br> $ vi /usr/local/nagios/etc/objects/windows.cfg<br> A sample host definition is already present in the file, we can either copy it or edit it to point to our windows machine <br> <br><br><br><br></figcaption></figure>\n<!-- /wp:image -->','Easy guide to setup Nagios monitoring using SSH (check_by_ssh)','','inherit','closed','closed','','26-revision-v1','','','2019-05-03 10:06:39','2019-05-03 10:06:39','',26,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/26-revision-v1/',0,'revision','',0),(29,1,'2019-05-03 10:11:16','2019-05-03 10:11:16','','images','','inherit','open','closed','','images','','','2019-05-03 10:11:16','2019-05-03 10:11:16','',0,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/images.png',0,'attachment','image/png',0),(30,1,'2019-05-03 10:11:21','2019-05-03 10:11:21','http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/cropped-images.png','cropped-images.png','','inherit','open','closed','','cropped-images-png','','','2019-05-03 10:11:21','2019-05-03 10:11:21','',0,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/cropped-images.png',0,'attachment','image/png',0),(31,1,'2019-05-03 10:11:27','2019-05-03 10:11:27','{\n    \"blogdescription\": {\n        \"value\": \"Devops\",\n        \"type\": \"option\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2019-05-03 10:11:27\"\n    },\n    \"twentysixteen::custom_logo\": {\n        \"value\": 30,\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2019-05-03 10:11:27\"\n    }\n}','','','trash','closed','closed','','a2b88325-e604-4c0b-bfa9-67c3d2739ef8','','','2019-05-03 10:11:27','2019-05-03 10:11:27','',0,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/a2b88325-e604-4c0b-bfa9-67c3d2739ef8/',0,'customize_changeset','',0),(32,1,'2019-05-03 10:12:09','2019-05-03 10:12:09','{\n    \"twentysixteen::custom_logo\": {\n        \"value\": \"\",\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2019-05-03 10:12:09\"\n    }\n}','','','trash','closed','closed','','5cd9d47c-3b84-46f5-83bd-46b56b1585c7','','','2019-05-03 10:12:09','2019-05-03 10:12:09','',0,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/5cd9d47c-3b84-46f5-83bd-46b56b1585c7/',0,'customize_changeset','',0),(33,1,'2019-05-03 10:13:31','2019-05-03 10:13:31','{\n    \"blogname\": {\n        \"value\": \"Devops Tutorial\",\n        \"type\": \"option\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2019-05-03 10:13:31\"\n    }\n}','','','trash','closed','closed','','50205b07-cc33-46c3-83b7-fe77fbdaef77','','','2019-05-03 10:13:31','2019-05-03 10:13:31','',0,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/50205b07-cc33-46c3-83b7-fe77fbdaef77/',0,'customize_changeset','',0),(35,1,'2019-05-03 10:15:07','2019-05-03 10:15:07','','2. Nagios Setup and Configuration','','inherit','open','closed','','2-nagios-setup-and-configuration','','','2019-05-03 10:15:07','2019-05-03 10:15:07','',0,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.-Nagios-Setup-and-Configuration.pdf',0,'attachment','application/pdf',0),(36,1,'2019-05-03 10:15:08','2019-05-03 10:15:08','','Chapter #10 - Monitoring and Logging','','inherit','open','closed','','chapter-10-monitoring-and-logging','','','2019-05-03 10:15:08','2019-05-03 10:15:08','',0,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-10-Monitoring-and-Logging.pdf',0,'attachment','application/pdf',0),(37,1,'2019-05-03 10:15:08','2019-05-03 10:15:08','','How to install NRPE Nagios Client on Linux','','inherit','open','closed','','how-to-install-nrpe-nagios-client-on-linux','','','2019-05-03 10:15:08','2019-05-03 10:15:08','',0,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/How-to-install-NRPE-Nagios-Client-on-Linux.pdf',0,'attachment','application/pdf',0),(38,1,'2019-05-03 10:15:08','2019-05-03 10:15:08','','Nagios Installation on Linux - Step by Step Nagios Tutorial','','inherit','open','closed','','nagios-installation-on-linux-step-by-step-nagios-tutorial','','','2019-05-03 10:15:08','2019-05-03 10:15:08','',0,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nagios-Installation-on-Linux-Step-by-Step-Nagios-Tutorial.pdf',0,'attachment','application/pdf',0),(39,1,'2019-05-03 10:18:37','2019-05-03 10:18:37','<!-- wp:file {\"id\":40,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.-Nagios-Setup-and-Configuration-1.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.-Nagios-Setup-and-Configuration-1.pdf\">2. Nagios Setup and Configuration</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.-Nagios-Setup-and-Configuration-1.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":41,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.-Nagios-Setup-and-Configuration-2.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.-Nagios-Setup-and-Configuration-2.pdf\">2. Nagios Setup and Configuration</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.-Nagios-Setup-and-Configuration-2.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":42,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-10-Monitoring-and-Logging-1.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-10-Monitoring-and-Logging-1.pdf\">Chapter #10 - Monitoring and Logging</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-10-Monitoring-and-Logging-1.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":43,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/How-to-install-NRPE-Nagios-Client-on-Linux-1.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/How-to-install-NRPE-Nagios-Client-on-Linux-1.pdf\">How to install NRPE Nagios Client on Linux</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/How-to-install-NRPE-Nagios-Client-on-Linux-1.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":44,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nagios-Installation-on-Linux-Step-by-Step-Nagios-Tutorial-1.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nagios-Installation-on-Linux-Step-by-Step-Nagios-Tutorial-1.pdf\">Nagios Installation on Linux - Step by Step Nagios Tutorial</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nagios-Installation-on-Linux-Step-by-Step-Nagios-Tutorial-1.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":46,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nagios-tutorial.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nagios-tutorial.docx\">Nagios-tutorial</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nagios-tutorial.docx\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->','Nagios Pdf','','publish','open','open','','nagios-pdf','','','2019-05-03 11:38:54','2019-05-03 11:38:54','',0,'http://192.168.1.181:8080/wordpress/?p=39',0,'post','',0),(40,1,'2019-05-03 10:17:26','2019-05-03 10:17:26','','2. Nagios Setup and Configuration','','inherit','open','closed','','2-nagios-setup-and-configuration-2','','','2019-05-03 10:17:26','2019-05-03 10:17:26','',39,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.-Nagios-Setup-and-Configuration-1.pdf',0,'attachment','application/pdf',0),(41,1,'2019-05-03 10:17:49','2019-05-03 10:17:49','','2. Nagios Setup and Configuration','','inherit','open','closed','','2-nagios-setup-and-configuration-3','','','2019-05-03 10:17:49','2019-05-03 10:17:49','',39,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.-Nagios-Setup-and-Configuration-2.pdf',0,'attachment','application/pdf',0),(42,1,'2019-05-03 10:18:02','2019-05-03 10:18:02','','Chapter #10 - Monitoring and Logging','','inherit','open','closed','','chapter-10-monitoring-and-logging-2','','','2019-05-03 10:18:02','2019-05-03 10:18:02','',39,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-10-Monitoring-and-Logging-1.pdf',0,'attachment','application/pdf',0),(43,1,'2019-05-03 10:18:18','2019-05-03 10:18:18','','How to install NRPE Nagios Client on Linux','','inherit','open','closed','','how-to-install-nrpe-nagios-client-on-linux-2','','','2019-05-03 10:18:18','2019-05-03 10:18:18','',39,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/How-to-install-NRPE-Nagios-Client-on-Linux-1.pdf',0,'attachment','application/pdf',0),(44,1,'2019-05-03 10:18:28','2019-05-03 10:18:28','','Nagios Installation on Linux - Step by Step Nagios Tutorial','','inherit','open','closed','','nagios-installation-on-linux-step-by-step-nagios-tutorial-2','','','2019-05-03 10:18:28','2019-05-03 10:18:28','',39,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nagios-Installation-on-Linux-Step-by-Step-Nagios-Tutorial-1.pdf',0,'attachment','application/pdf',0),(45,1,'2019-05-03 10:18:37','2019-05-03 10:18:37','<!-- wp:file {\"id\":40,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.-Nagios-Setup-and-Configuration-1.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.-Nagios-Setup-and-Configuration-1.pdf\">2. Nagios Setup and Configuration</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.-Nagios-Setup-and-Configuration-1.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":41,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.-Nagios-Setup-and-Configuration-2.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.-Nagios-Setup-and-Configuration-2.pdf\">2. Nagios Setup and Configuration</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.-Nagios-Setup-and-Configuration-2.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":42,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-10-Monitoring-and-Logging-1.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-10-Monitoring-and-Logging-1.pdf\">Chapter #10 - Monitoring and Logging</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-10-Monitoring-and-Logging-1.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":43,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/How-to-install-NRPE-Nagios-Client-on-Linux-1.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/How-to-install-NRPE-Nagios-Client-on-Linux-1.pdf\">How to install NRPE Nagios Client on Linux</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/How-to-install-NRPE-Nagios-Client-on-Linux-1.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":44,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nagios-Installation-on-Linux-Step-by-Step-Nagios-Tutorial-1.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nagios-Installation-on-Linux-Step-by-Step-Nagios-Tutorial-1.pdf\">Nagios Installation on Linux - Step by Step Nagios Tutorial</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nagios-Installation-on-Linux-Step-by-Step-Nagios-Tutorial-1.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->','Nagios Pdf','','inherit','closed','closed','','39-revision-v1','','','2019-05-03 10:18:37','2019-05-03 10:18:37','',39,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/39-revision-v1/',0,'revision','',0),(46,1,'2019-05-03 10:25:39','2019-05-03 10:25:39','','Nagios-tutorial','','inherit','open','closed','','nagios-tutorial','','','2019-05-03 10:25:39','2019-05-03 10:25:39','',39,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nagios-tutorial.docx',0,'attachment','application/vnd.openxmlformats-officedocument.wordprocessingml.document',0),(47,1,'2019-05-03 10:25:43','2019-05-03 10:25:43','<!-- wp:file {\"id\":40,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.-Nagios-Setup-and-Configuration-1.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.-Nagios-Setup-and-Configuration-1.pdf\">2. Nagios Setup and Configuration</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.-Nagios-Setup-and-Configuration-1.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":41,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.-Nagios-Setup-and-Configuration-2.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.-Nagios-Setup-and-Configuration-2.pdf\">2. Nagios Setup and Configuration</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.-Nagios-Setup-and-Configuration-2.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":42,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-10-Monitoring-and-Logging-1.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-10-Monitoring-and-Logging-1.pdf\">Chapter #10 - Monitoring and Logging</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-10-Monitoring-and-Logging-1.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":43,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/How-to-install-NRPE-Nagios-Client-on-Linux-1.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/How-to-install-NRPE-Nagios-Client-on-Linux-1.pdf\">How to install NRPE Nagios Client on Linux</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/How-to-install-NRPE-Nagios-Client-on-Linux-1.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":44,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nagios-Installation-on-Linux-Step-by-Step-Nagios-Tutorial-1.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nagios-Installation-on-Linux-Step-by-Step-Nagios-Tutorial-1.pdf\">Nagios Installation on Linux - Step by Step Nagios Tutorial</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nagios-Installation-on-Linux-Step-by-Step-Nagios-Tutorial-1.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":46,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nagios-tutorial.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nagios-tutorial.docx\">Nagios-tutorial</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nagios-tutorial.docx\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->','Nagios Pdf','','inherit','closed','closed','','39-revision-v1','','','2019-05-03 10:25:43','2019-05-03 10:25:43','',39,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/39-revision-v1/',0,'revision','',0),(49,1,'2019-05-03 10:30:54','2019-05-03 10:30:54','<!-- wp:file {\"id\":50,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/5thingsyoudidntknownginxcoulddo-140527135212-phpapp02.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/5thingsyoudidntknownginxcoulddo-140527135212-phpapp02.pdf\">5thingsyoudidntknownginxcoulddo-140527135212-phpapp02</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/5thingsyoudidntknownginxcoulddo-140527135212-phpapp02.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":51,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-5-Understand-Web-Servers.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-5-Understand-Web-Servers.pdf\">Chapter #5 - Understand Web Servers</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-5-Understand-Web-Servers.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":52,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-6-HA-Proxy.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-6-HA-Proxy.pdf\">Chapter #6 - HA Proxy</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-6-HA-Proxy.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":53,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/devinsampa-nginx-scripting-120915181542-phpapp01.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/devinsampa-nginx-scripting-120915181542-phpapp01.pdf\">devinsampa-nginx-scripting-120915181542-phpapp01</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/devinsampa-nginx-scripting-120915181542-phpapp01.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":57,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Apache-compilation-with-Ansible.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Apache-compilation-with-Ansible.docx\">Apache compilation with Ansible</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Apache-compilation-with-Ansible.docx\" class=\"wp-block-file__button\" download></a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":54,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nginx-190214143939.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nginx-190214143939.pdf\">nginx-190214143939</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nginx-190214143939.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":55,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nginx-reverse-proxy-cache-apache-wordpress.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nginx-reverse-proxy-cache-apache-wordpress.pdf\">nginx-reverse-proxy-cache-apache-wordpress</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nginx-reverse-proxy-cache-apache-wordpress.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":58,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/APACHE-With-PHP-Compilation.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/APACHE-With-PHP-Compilation.docx\">APACHE With PHP Compilation</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/APACHE-With-PHP-Compilation.docx\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":59,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/apache-nginx-notes.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/apache-nginx-notes.docx\">apache-nginx-notes</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/apache-nginx-notes.docx\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":60,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nginx-Apache-question-answer.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nginx-Apache-question-answer.docx\">Nginx-Apache question answer</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nginx-Apache-question-answer.docx\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->','Nginx-apache Notes','','publish','open','open','','nginx-apache-notes','','','2019-05-03 10:33:32','2019-05-03 10:33:32','',0,'http://192.168.1.181:8080/wordpress/?p=49',0,'post','',0),(50,1,'2019-05-03 10:29:28','2019-05-03 10:29:28','','5thingsyoudidntknownginxcoulddo-140527135212-phpapp02','','inherit','open','closed','','5thingsyoudidntknownginxcoulddo-140527135212-phpapp02','','','2019-05-03 10:29:28','2019-05-03 10:29:28','',49,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/5thingsyoudidntknownginxcoulddo-140527135212-phpapp02.pdf',0,'attachment','application/pdf',0),(51,1,'2019-05-03 10:29:40','2019-05-03 10:29:40','','Chapter #5 - Understand Web Servers','','inherit','open','closed','','chapter-5-understand-web-servers','','','2019-05-03 10:29:40','2019-05-03 10:29:40','',49,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-5-Understand-Web-Servers.pdf',0,'attachment','application/pdf',0),(52,1,'2019-05-03 10:29:54','2019-05-03 10:29:54','','Chapter #6 - HA Proxy','','inherit','open','closed','','chapter-6-ha-proxy','','','2019-05-03 10:29:54','2019-05-03 10:29:54','',49,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-6-HA-Proxy.pdf',0,'attachment','application/pdf',0),(53,1,'2019-05-03 10:30:07','2019-05-03 10:30:07','','devinsampa-nginx-scripting-120915181542-phpapp01','','inherit','open','closed','','devinsampa-nginx-scripting-120915181542-phpapp01','','','2019-05-03 10:30:07','2019-05-03 10:30:07','',49,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/devinsampa-nginx-scripting-120915181542-phpapp01.pdf',0,'attachment','application/pdf',0),(54,1,'2019-05-03 10:30:39','2019-05-03 10:30:39','','nginx-190214143939','','inherit','open','closed','','nginx-190214143939','','','2019-05-03 10:30:39','2019-05-03 10:30:39','',49,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nginx-190214143939.pdf',0,'attachment','application/pdf',0),(55,1,'2019-05-03 10:30:48','2019-05-03 10:30:48','','nginx-reverse-proxy-cache-apache-wordpress','','inherit','open','closed','','nginx-reverse-proxy-cache-apache-wordpress','','','2019-05-03 10:30:48','2019-05-03 10:30:48','',49,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nginx-reverse-proxy-cache-apache-wordpress.pdf',0,'attachment','application/pdf',0),(56,1,'2019-05-03 10:30:54','2019-05-03 10:30:54','<!-- wp:file {\"id\":50,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/5thingsyoudidntknownginxcoulddo-140527135212-phpapp02.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/5thingsyoudidntknownginxcoulddo-140527135212-phpapp02.pdf\">5thingsyoudidntknownginxcoulddo-140527135212-phpapp02</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/5thingsyoudidntknownginxcoulddo-140527135212-phpapp02.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":51,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-5-Understand-Web-Servers.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-5-Understand-Web-Servers.pdf\">Chapter #5 - Understand Web Servers</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-5-Understand-Web-Servers.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":52,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-6-HA-Proxy.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-6-HA-Proxy.pdf\">Chapter #6 - HA Proxy</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-6-HA-Proxy.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":53,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/devinsampa-nginx-scripting-120915181542-phpapp01.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/devinsampa-nginx-scripting-120915181542-phpapp01.pdf\">devinsampa-nginx-scripting-120915181542-phpapp01</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/devinsampa-nginx-scripting-120915181542-phpapp01.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file /-->\n\n<!-- wp:file {\"id\":54,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nginx-190214143939.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nginx-190214143939.pdf\">nginx-190214143939</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nginx-190214143939.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":55,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nginx-reverse-proxy-cache-apache-wordpress.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nginx-reverse-proxy-cache-apache-wordpress.pdf\">nginx-reverse-proxy-cache-apache-wordpress</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nginx-reverse-proxy-cache-apache-wordpress.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->','Nginx-apache Notes','','inherit','closed','closed','','49-revision-v1','','','2019-05-03 10:30:54','2019-05-03 10:30:54','',49,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/49-revision-v1/',0,'revision','',0),(57,1,'2019-05-03 10:32:55','2019-05-03 10:32:55','','Apache compilation with Ansible','','inherit','open','closed','','apache-compilation-with-ansible','','','2019-05-03 10:32:55','2019-05-03 10:32:55','',49,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Apache-compilation-with-Ansible.docx',0,'attachment','application/vnd.openxmlformats-officedocument.wordprocessingml.document',0),(58,1,'2019-05-03 10:33:07','2019-05-03 10:33:07','','APACHE With PHP Compilation','','inherit','open','closed','','apache-with-php-compilation','','','2019-05-03 10:33:07','2019-05-03 10:33:07','',49,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/APACHE-With-PHP-Compilation.docx',0,'attachment','application/vnd.openxmlformats-officedocument.wordprocessingml.document',0),(59,1,'2019-05-03 10:33:17','2019-05-03 10:33:17','','apache-nginx-notes','','inherit','open','closed','','apache-nginx-notes','','','2019-05-03 10:33:17','2019-05-03 10:33:17','',49,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/apache-nginx-notes.docx',0,'attachment','application/vnd.openxmlformats-officedocument.wordprocessingml.document',0),(60,1,'2019-05-03 10:33:30','2019-05-03 10:33:30','','Nginx-Apache question answer','','inherit','open','closed','','nginx-apache-question-answer','','','2019-05-03 10:33:30','2019-05-03 10:33:30','',49,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nginx-Apache-question-answer.docx',0,'attachment','application/vnd.openxmlformats-officedocument.wordprocessingml.document',0),(61,1,'2019-05-03 10:33:32','2019-05-03 10:33:32','<!-- wp:file {\"id\":50,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/5thingsyoudidntknownginxcoulddo-140527135212-phpapp02.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/5thingsyoudidntknownginxcoulddo-140527135212-phpapp02.pdf\">5thingsyoudidntknownginxcoulddo-140527135212-phpapp02</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/5thingsyoudidntknownginxcoulddo-140527135212-phpapp02.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":51,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-5-Understand-Web-Servers.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-5-Understand-Web-Servers.pdf\">Chapter #5 - Understand Web Servers</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-5-Understand-Web-Servers.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":52,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-6-HA-Proxy.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-6-HA-Proxy.pdf\">Chapter #6 - HA Proxy</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Chapter-6-HA-Proxy.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":53,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/devinsampa-nginx-scripting-120915181542-phpapp01.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/devinsampa-nginx-scripting-120915181542-phpapp01.pdf\">devinsampa-nginx-scripting-120915181542-phpapp01</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/devinsampa-nginx-scripting-120915181542-phpapp01.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":57,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Apache-compilation-with-Ansible.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Apache-compilation-with-Ansible.docx\">Apache compilation with Ansible</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Apache-compilation-with-Ansible.docx\" class=\"wp-block-file__button\" download></a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":54,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nginx-190214143939.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nginx-190214143939.pdf\">nginx-190214143939</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nginx-190214143939.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":55,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nginx-reverse-proxy-cache-apache-wordpress.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nginx-reverse-proxy-cache-apache-wordpress.pdf\">nginx-reverse-proxy-cache-apache-wordpress</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/nginx-reverse-proxy-cache-apache-wordpress.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":58,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/APACHE-With-PHP-Compilation.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/APACHE-With-PHP-Compilation.docx\">APACHE With PHP Compilation</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/APACHE-With-PHP-Compilation.docx\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":59,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/apache-nginx-notes.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/apache-nginx-notes.docx\">apache-nginx-notes</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/apache-nginx-notes.docx\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":60,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nginx-Apache-question-answer.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nginx-Apache-question-answer.docx\">Nginx-Apache question answer</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Nginx-Apache-question-answer.docx\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->','Nginx-apache Notes','','inherit','closed','closed','','49-revision-v1','','','2019-05-03 10:33:32','2019-05-03 10:33:32','',49,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/49-revision-v1/',0,'revision','',0),(62,1,'2019-05-03 10:54:03','2019-05-03 10:54:03','<!-- wp:paragraph -->\n<p>apt-get install gcc make libpcre3-dev libpcre3 libexpat1 libexpat1-dev<br>\n wget -c http://archive.apache.org/dist/httpd/httpd-2.4.29.tar.gz<br>\nwget -c http://mirrors.fibergrid.in/apache//apr/apr-1.6.5.tar.gz<br>\nwget -c http://mirrors.fibergrid.in/apache//apr/apr-util-1.6.1.tar.gz<br>\ntar xzvf httpd-2.4.29.tar.gz<br>\ntar xzvf apr-1.6.5.tar.gz<br>\ntar xzvf apr-util-1.6.1.tar.gz<br>\nmv apr-1.6.5 httpd-2.4.29/srclib/apr<br>\nmv apr-util-1.6.1 httpd-2.4.29/srclib/apr-util<br>\ncd httpd-2.4.29<br>\n./configure --prefix=/opt/apache2_4 --with-included-apr --with-pcre<br>\nmake<br>\nmake install<br>\nvi /opt/apache2_4/conf/httpd.conf<br>\n /opt/apache2_4/bin/apachectl -k start</p>\n<!-- /wp:paragraph -->','compile apache2 on ubuntu16.04 32 bit steps','','publish','open','open','','compile-apache2-on-ubuntu16-04-32-bit-steps','','','2019-05-03 10:54:03','2019-05-03 10:54:03','',0,'http://192.168.1.181:8080/wordpress/?p=62',0,'post','',0),(63,1,'2019-05-03 10:54:03','2019-05-03 10:54:03','<!-- wp:paragraph -->\n<p>apt-get install gcc make libpcre3-dev libpcre3 libexpat1 libexpat1-dev<br>\n wget -c http://archive.apache.org/dist/httpd/httpd-2.4.29.tar.gz<br>\nwget -c http://mirrors.fibergrid.in/apache//apr/apr-1.6.5.tar.gz<br>\nwget -c http://mirrors.fibergrid.in/apache//apr/apr-util-1.6.1.tar.gz<br>\ntar xzvf httpd-2.4.29.tar.gz<br>\ntar xzvf apr-1.6.5.tar.gz<br>\ntar xzvf apr-util-1.6.1.tar.gz<br>\nmv apr-1.6.5 httpd-2.4.29/srclib/apr<br>\nmv apr-util-1.6.1 httpd-2.4.29/srclib/apr-util<br>\ncd httpd-2.4.29<br>\n./configure --prefix=/opt/apache2_4 --with-included-apr --with-pcre<br>\nmake<br>\nmake install<br>\nvi /opt/apache2_4/conf/httpd.conf<br>\n /opt/apache2_4/bin/apachectl -k start</p>\n<!-- /wp:paragraph -->','compile apache2 on ubuntu16.04 32 bit steps','','inherit','closed','closed','','62-revision-v1','','','2019-05-03 10:54:03','2019-05-03 10:54:03','',62,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/62-revision-v1/',0,'revision','',0),(64,1,'2019-05-03 10:55:20','2019-05-03 10:55:20','<!-- wp:paragraph -->\n<p>apt-get install mysql-client mysql-server<br>\nmysql_secure_installation</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Install PHP and Modules<br>\napt-get install php7.0 php7.0-mysql libapache2-mod-php7.0 php7.0-cli php7.0-cgi php7.0-gd  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 4: Install WordPress CMS<br>\nwget -c http://wordpress.org/latest.tar.gz<br>\ntar -xzvf latest.tar.gz<br>\nrsync -av wordpress/* /var/www/html/public_html/<br>\nchown -R www-data:www-data /var/www/html/public_html/<br>\nchmod -R 755 /var/www/html/public_html/<br>\n mysql -u root -p<br>\ncreate database wordpress;<br>\nGRANT ALL PRIVILEGES ON wordpress.* TO \'root\'@\'localhost\' IDENTIFIED BY \'123456\';<br>\nFLUSH PRIVILEGES;<br>\nmv wp-config-sample.php wp-config.php<br>\n sudo systemctl restart apache2.service <br>\nsudo systemctl restart mysql.service </p>\n<!-- /wp:paragraph -->','Install wordpress MySQL Database Server ubuntu 16.04','','publish','open','open','','install-wordpress-mysql-database-server-ubuntu-16-04','','','2019-05-03 10:55:20','2019-05-03 10:55:20','',0,'http://192.168.1.181:8080/wordpress/?p=64',0,'post','',0),(65,1,'2019-05-03 10:55:20','2019-05-03 10:55:20','<!-- wp:paragraph -->\n<p>apt-get install mysql-client mysql-server<br>\nmysql_secure_installation</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Install PHP and Modules<br>\napt-get install php7.0 php7.0-mysql libapache2-mod-php7.0 php7.0-cli php7.0-cgi php7.0-gd  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 4: Install WordPress CMS<br>\nwget -c http://wordpress.org/latest.tar.gz<br>\ntar -xzvf latest.tar.gz<br>\nrsync -av wordpress/* /var/www/html/public_html/<br>\nchown -R www-data:www-data /var/www/html/public_html/<br>\nchmod -R 755 /var/www/html/public_html/<br>\n mysql -u root -p<br>\ncreate database wordpress;<br>\nGRANT ALL PRIVILEGES ON wordpress.* TO \'root\'@\'localhost\' IDENTIFIED BY \'123456\';<br>\nFLUSH PRIVILEGES;<br>\nmv wp-config-sample.php wp-config.php<br>\n sudo systemctl restart apache2.service <br>\nsudo systemctl restart mysql.service </p>\n<!-- /wp:paragraph -->','Install wordpress MySQL Database Server ubuntu 16.04','','inherit','closed','closed','','64-revision-v1','','','2019-05-03 10:55:20','2019-05-03 10:55:20','',64,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/64-revision-v1/',0,'revision','',0),(67,1,'2019-05-03 10:57:01','2019-05-03 10:57:01','<!-- wp:paragraph -->\n<p>wget https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.31/bin/apache-tomcat-8.5.31.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>tar zxvf apache-tomcat-8.5.31.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>mv apache-tomcat-8.5.31 tomcat\n\nvi tomcat/conf/tomcat-users.xml</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>netstat -lntp | grep 80<br>\n    vi /etc/apache2/ports.conf<br>\n    /etc/init.d/apache2 restart<br>\n    netstat -lntp | grep 80<br>\n    sh startup.sh</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>cd /opt/\nls\nwget http://mirrors.jenkins.io/war-stable/latest/jenkins.war\ncp -rv jenkins.war /opt/tomcat/webapps/\nls /opt/tomcat/webapps/\ncat /root/.jenkins/secrets/initialAdminPassword</code></pre>\n<!-- /wp:code -->','install jenkins on tomcat on ubuntu','','publish','open','open','','install-jenkins-on-tomcat-on-ubuntu','','','2019-05-03 10:57:01','2019-05-03 10:57:01','',0,'http://192.168.1.181:8080/wordpress/?p=67',0,'post','',0),(68,1,'2019-05-03 10:57:01','2019-05-03 10:57:01','<!-- wp:paragraph -->\n<p>wget https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.31/bin/apache-tomcat-8.5.31.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>tar zxvf apache-tomcat-8.5.31.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>mv apache-tomcat-8.5.31 tomcat\n\nvi tomcat/conf/tomcat-users.xml</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>netstat -lntp | grep 80<br>\n    vi /etc/apache2/ports.conf<br>\n    /etc/init.d/apache2 restart<br>\n    netstat -lntp | grep 80<br>\n    sh startup.sh</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>cd /opt/\nls\nwget http://mirrors.jenkins.io/war-stable/latest/jenkins.war\ncp -rv jenkins.war /opt/tomcat/webapps/\nls /opt/tomcat/webapps/\ncat /root/.jenkins/secrets/initialAdminPassword</code></pre>\n<!-- /wp:code -->','install jenkins on tomcat on ubuntu','','inherit','closed','closed','','67-revision-v1','','','2019-05-03 10:57:01','2019-05-03 10:57:01','',67,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/67-revision-v1/',0,'revision','',0),(69,1,'2019-05-03 10:59:07','2019-05-03 10:59:07','<!-- wp:paragraph -->\n<p>yum install gcc make pcre-devel pcre expat1 expat-devel<br>\nwget -c http://mirrors.fibergrid.in/apache//httpd/httpd-2.4.35.tar.gz<br>\nwget -c http://mirrors.estointernet.in/apache//apr/apr-1.6.5.tar.gz<br>\nwget -c http://mirrors.estointernet.in/apache//apr/apr-util-1.6.1.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>tar zxvf httpd-2.4.35.tar.gz<br>\ntar zxvf apr-1.6.5.tar.gz<br>\ntar zxvf apr-util-1.6.1.tar.gz<br>\n mv apr-1.6.5 httpd-2.4.35/srclib/apr<br>\n mv apr-util-1.6.1 httpd-2.4.35/srclib/apr/apr-util<br>\ncd httpd-2.4.35<br>\n./configure --prefix=/opt/apache2 --with-included-apr --with-pcre<br>\nmake<br>\nmake install<br>\nvi /opt/apache2/conf/httpd.conf----to change port<br>\n /opt/apache2/bin/apachectl -k start---to start service</p>\n<!-- /wp:paragraph -->','compile apache2 on redhat 7 64 bit steps','','publish','open','open','','compile-apache2-on-redhat-7-64-bit-steps','','','2019-05-03 10:59:07','2019-05-03 10:59:07','',0,'http://192.168.1.181:8080/wordpress/?p=69',0,'post','',0),(70,1,'2019-05-03 10:59:07','2019-05-03 10:59:07','<!-- wp:paragraph -->\n<p>yum install gcc make pcre-devel pcre expat1 expat-devel<br>\nwget -c http://mirrors.fibergrid.in/apache//httpd/httpd-2.4.35.tar.gz<br>\nwget -c http://mirrors.estointernet.in/apache//apr/apr-1.6.5.tar.gz<br>\nwget -c http://mirrors.estointernet.in/apache//apr/apr-util-1.6.1.tar.gz</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>tar zxvf httpd-2.4.35.tar.gz<br>\ntar zxvf apr-1.6.5.tar.gz<br>\ntar zxvf apr-util-1.6.1.tar.gz<br>\n mv apr-1.6.5 httpd-2.4.35/srclib/apr<br>\n mv apr-util-1.6.1 httpd-2.4.35/srclib/apr/apr-util<br>\ncd httpd-2.4.35<br>\n./configure --prefix=/opt/apache2 --with-included-apr --with-pcre<br>\nmake<br>\nmake install<br>\nvi /opt/apache2/conf/httpd.conf----to change port<br>\n /opt/apache2/bin/apachectl -k start---to start service</p>\n<!-- /wp:paragraph -->','compile apache2 on redhat 7 64 bit steps','','inherit','closed','closed','','69-revision-v1','','','2019-05-03 10:59:07','2019-05-03 10:59:07','',69,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/69-revision-v1/',0,'revision','',0),(71,1,'2019-05-03 11:07:19','2019-05-03 11:07:19','<!-- wp:image {\"id\":72} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/e.png\" alt=\"\" class=\"wp-image-72\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>config for http reverse proxy</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>server {</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>server_name 127.0.0.1 manojdevops ;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>listen 80;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>location /var/www/html/wordpress/wp-includes/ {</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>root /var/www/html/wordpress;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>location / {</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>}</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>proxy_pass http://127.0.0.1:8080;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>proxy_set_header Host $host;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>proxy_set_header X-Real-IP $remote_addr;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>proxy_set_header X-Forwarded-Proto $scheme;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>}</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>}</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>--------------------config for https reverse proxy</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>server {<br>\n    listen 80;<br>\n    listen [::]:80;<br>\n    listen 443 ssl http2;<br>\n    listen [::]:443 ssl http2;<br>\n    server_name 127.0.0.1 manojdevops;<br>\n    include /etc/nginx/snippets/self-signed.conf;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>#location /static/{</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>}</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>root /usr/share/nginx/devops.ap2v.com/;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>location /var/www/html/wordpress/wp-includes/ {<br>\nroot /var/www/html/wordpress/;<br>\n}<br>\nlocation / {</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>     proxy_pass http://127.0.0.1:8080;\n     proxy_set_header Host $host;\n     proxy_set_header X-Real-IP $remote_addr;\n     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n     proxy_set_header X-Forwarded-Proto $scheme;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>}<br>\n  }</p>\n<!-- /wp:paragraph -->','Nginx Reverse Proxy+apache+wordpress','','publish','open','open','','nginx-reverse-proxyapachewordpress','','','2019-05-03 11:07:19','2019-05-03 11:07:19','',0,'http://192.168.1.181:8080/wordpress/?p=71',0,'post','',0),(72,1,'2019-05-03 11:02:22','2019-05-03 11:02:22','','e','','inherit','open','closed','','e','','','2019-05-03 11:02:22','2019-05-03 11:02:22','',71,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/e.png',0,'attachment','image/png',0),(73,1,'2019-05-03 11:07:19','2019-05-03 11:07:19','<!-- wp:image {\"id\":72} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/e.png\" alt=\"\" class=\"wp-image-72\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>config for http reverse proxy</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>server {</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>server_name 127.0.0.1 manojdevops ;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>listen 80;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>location /var/www/html/wordpress/wp-includes/ {</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>root /var/www/html/wordpress;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>location / {</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>}</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>proxy_pass http://127.0.0.1:8080;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>proxy_set_header Host $host;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>proxy_set_header X-Real-IP $remote_addr;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>proxy_set_header X-Forwarded-Proto $scheme;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>}</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>}</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>--------------------config for https reverse proxy</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>server {<br>\n    listen 80;<br>\n    listen [::]:80;<br>\n    listen 443 ssl http2;<br>\n    listen [::]:443 ssl http2;<br>\n    server_name 127.0.0.1 manojdevops;<br>\n    include /etc/nginx/snippets/self-signed.conf;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>#location /static/{</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>}</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>root /usr/share/nginx/devops.ap2v.com/;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>location /var/www/html/wordpress/wp-includes/ {<br>\nroot /var/www/html/wordpress/;<br>\n}<br>\nlocation / {</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>     proxy_pass http://127.0.0.1:8080;\n     proxy_set_header Host $host;\n     proxy_set_header X-Real-IP $remote_addr;\n     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n     proxy_set_header X-Forwarded-Proto $scheme;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>}<br>\n  }</p>\n<!-- /wp:paragraph -->','Nginx Reverse Proxy+apache+wordpress','','inherit','closed','closed','','71-revision-v1','','','2019-05-03 11:07:19','2019-05-03 11:07:19','',71,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/71-revision-v1/',0,'revision','',0),(75,1,'2019-05-03 11:14:47','2019-05-03 11:14:47','','4','','inherit','open','closed','','4','','','2019-05-03 11:14:47','2019-05-03 11:14:47','',0,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/4.png',0,'attachment','image/png',0),(76,1,'2019-05-03 11:14:54','2019-05-03 11:14:54','{\n    \"twentysixteen::background_image\": {\n        \"value\": \"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/4.png\",\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2019-05-03 11:14:54\"\n    }\n}','','','trash','closed','closed','','743c4a48-cb8e-4362-9d42-d33c0581ea4b','','','2019-05-03 11:14:54','2019-05-03 11:14:54','',0,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/743c4a48-cb8e-4362-9d42-d33c0581ea4b/',0,'customize_changeset','',0),(77,1,'2019-05-03 11:17:30','2019-05-03 11:17:30','{\n    \"twentysixteen::background_image\": {\n        \"value\": \"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/download.jpg\",\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2019-05-03 11:17:30\"\n    }\n}','','','trash','closed','closed','','67b4e373-dedc-4d6c-a95d-248a279a90fb','','','2019-05-03 11:17:30','2019-05-03 11:17:30','',0,'http://192.168.1.181:8080/wordpress/?p=77',0,'customize_changeset','',0),(78,1,'2019-05-03 11:17:20','2019-05-03 11:17:20','','download','','inherit','open','closed','','download','','','2019-05-03 11:17:20','2019-05-03 11:17:20','',0,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/download.jpg',0,'attachment','image/jpeg',0),(79,1,'2019-05-03 11:20:08','2019-05-03 11:20:08','{\n    \"old_sidebars_widgets_data\": {\n        \"value\": {\n            \"wp_inactive_widgets\": [],\n            \"sidebar-1\": [\n                \"search-2\",\n                \"recent-posts-2\",\n                \"recent-comments-2\",\n                \"archives-2\",\n                \"categories-2\",\n                \"meta-2\"\n            ]\n        },\n        \"type\": \"global_variable\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2019-05-03 11:20:07\"\n    },\n    \"shogunlite::nav_menu_locations[primary]\": {\n        \"value\": 2,\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2019-05-03 11:20:07\"\n    }\n}','','','trash','closed','closed','','3539a84f-1dfe-4ae3-b031-0bfafc23d942','','','2019-05-03 11:20:08','2019-05-03 11:20:08','',0,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/3539a84f-1dfe-4ae3-b031-0bfafc23d942/',0,'customize_changeset','',0),(80,1,'2019-05-03 11:21:41','2019-05-03 11:21:41','{\n    \"old_sidebars_widgets_data\": {\n        \"value\": {\n            \"wp_inactive_widgets\": [],\n            \"sidebar-1\": [\n                \"search-2\",\n                \"recent-posts-2\",\n                \"recent-comments-2\",\n                \"archives-2\",\n                \"categories-2\",\n                \"meta-2\"\n            ]\n        },\n        \"type\": \"global_variable\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2019-05-03 11:21:41\"\n    },\n    \"twentysixteen::nav_menu_locations[primary]\": {\n        \"value\": 2,\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2019-05-03 11:21:41\"\n    }\n}','','','trash','closed','closed','','cbf4237b-3206-4820-887d-f1fecb9fc4c5','','','2019-05-03 11:21:41','2019-05-03 11:21:41','',0,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/cbf4237b-3206-4820-887d-f1fecb9fc4c5/',0,'customize_changeset','',0),(81,1,'2019-05-03 11:22:22','2019-05-03 11:22:22','{\n    \"twentysixteen::nav_menu_locations[primary]\": {\n        \"value\": -3313454441598757000,\n        \"type\": \"theme_mod\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2019-05-03 11:22:22\"\n    },\n    \"nav_menu[-3313454441598757000]\": {\n        \"value\": {\n            \"name\": \"Jenkins\",\n            \"description\": \"\",\n            \"parent\": 0,\n            \"auto_add\": false\n        },\n        \"type\": \"nav_menu\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2019-05-03 11:22:22\"\n    }\n}','','','trash','closed','closed','','00354afd-273f-4085-9283-2c76c589d800','','','2019-05-03 11:22:22','2019-05-03 11:22:22','',0,'http://192.168.1.181:8080/wordpress/index.php/2019/05/03/00354afd-273f-4085-9283-2c76c589d800/',0,'customize_changeset','',0),(82,1,'2019-05-03 11:24:54','2019-05-03 11:24:54',' ','','','publish','closed','closed','','82','','','2019-05-03 11:24:54','2019-05-03 11:24:54','',0,'http://192.168.1.181:8080/wordpress/?p=82',1,'nav_menu_item','',0),(83,1,'2019-05-03 11:24:54','2019-05-03 11:24:54',' ','','','publish','closed','closed','','83','','','2019-05-03 11:24:54','2019-05-03 11:24:54','',0,'http://192.168.1.181:8080/wordpress/?p=83',2,'nav_menu_item','',0),(84,1,'2019-05-03 11:24:54','2019-05-03 11:24:54',' ','','','publish','closed','closed','','84','','','2019-05-03 11:24:54','2019-05-03 11:24:54','',0,'http://192.168.1.181:8080/wordpress/?p=84',3,'nav_menu_item','',0),(85,1,'2019-05-03 11:24:54','2019-05-03 11:24:54',' ','','','publish','closed','closed','','85','','','2019-05-03 11:24:54','2019-05-03 11:24:54','',0,'http://192.168.1.181:8080/wordpress/?p=85',4,'nav_menu_item','',0),(86,1,'2019-05-03 11:24:54','2019-05-03 11:24:54',' ','','','publish','closed','closed','','86','','','2019-05-03 11:24:54','2019-05-03 11:24:54','',0,'http://192.168.1.181:8080/wordpress/?p=86',5,'nav_menu_item','',0),(88,1,'2019-05-06 06:50:15','2019-05-06 06:50:15','<!-- wp:paragraph -->\n<p> Continuous Integration (CI) is rapidly becoming an integral part of software development process as it makes our monotonous and repetitive tasks a little less grindy. CI is a project development practice where developers integrate code into a shared repository frequently. Each Integration is then verified by an automated build that allows the team to detect problems in an early stage.  <br>Here we will install Jenkins, create Jenkins task and then configure it with GitHub. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Jenkins is an open-source tool that tests and compiles the code. If everything is fine then it deploys the code for production else you will get a notification that builds has failed and you need to fix the bug/error. Similarly, Selenium - an automation testing tool - minimizes the testing time and eliminates repetitive human tasks. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Jenkins has an array of advantages, such as:<br> Easily configurable<br> Platform independent<br> Rich plugin support<br> Easy to create new Jenkins plugin if one is not available<br> Now you know why Jenkins is so popular, go ahead and install it. <br> Step-by-step guide to Install Jenkins<br> Follow the below steps:<br> Step 1: First install Java, using the following command. <br> $ sudo apt-get install openjdk-8-jre-headless -y<br> Step 2: Add the key and source list to apt for Jenkins.<br> $ wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -<br> Step 3: Now create source list for Jenkins, using the below commands<br> $ sudo sh -c \'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list\'<br> Step 4: Update the packages<br> $ sudo apt-get update<br> Step 5: Now install Jenkins.<br> $ sudo apt-get install jenkins<br> Step 6: After installing Jenkins. Go to: http://your_ip_address:8080 and run the following commands to get admin password.<br> $ sudo nano /var/lib/jenkins/secrets/initialAdminPassword<br> Step 7: Now copy the password and paste into browser.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Integrating GitHub with Jenkins<br>\nThe integration of GitHub with Jenkins automates deployment, testing and improves products quality while saving a significant amount of time of developers. Follow the below steps to integrate GitHub with Jenkins:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Prerequisite: Install GitHub Jenkins plugin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 1 Go to Manage Jenkins -&gt; Manage Plugin.<br>\nStep 2 Search Github Plugin in the Available tab then click on Download now and install after the restart.<br>\nCreating a Jenkins job<br>\nStep 1 To Create a new task for Jenkins, click on “New Item” then enter an item name that is suitable for your project and select Freestyle project. Now click Ok. <br>\nStep 2 Select the GitHub project checkbox and set the Project URL to point to your GitHub Repository.<br>\nStep 3 Under Source Code Management tab, select Git and then set the Repository URL to point to your GitHub Repository.<br>\nStep 4 Now Under Build Triggers tab, select the “Build when a change is pushed to GitHub” checkbox.<br>\nStep 5 At the end, execute Shell script to take a clone from dev. When the configuration is done, click on save button.<br>\nConfiguring GitHub for Jenkins<br>\nStep 1 Install the Jenkins (GitHub plugin) on a git repository.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2 Now set the Jenkins hook URL as the URL for your machine. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note: Github will not accept Local URL, hence, we need to install ngrok software to create live URL for port 8080. Here you can find complete guide for configuration: https://ngrok.com/download<br>\nEvery time you publish changes to GitHub, it will trigger new Jenkins job. Now you know an entire process of continuous integration with Jenkins and GitHub. Similarly, you can integrate Jenkins with selenium to automate testing. Go ahead and try it on your own software development. Note that computers don\'t get bored so while they handle deployment and testing, you\'re free to do other important works.</p>\n<!-- /wp:paragraph -->','Continuous integration using Jenkins and GitHub to automate deployment','','publish','open','open','','continuous-integration-using-jenkins-and-github-to-automate-deployment','','','2019-05-06 06:50:15','2019-05-06 06:50:15','',0,'http://192.168.1.181:8080/wordpress/?p=88',0,'post','',0),(89,1,'2019-05-06 06:50:15','2019-05-06 06:50:15','<!-- wp:paragraph -->\n<p> Continuous Integration (CI) is rapidly becoming an integral part of software development process as it makes our monotonous and repetitive tasks a little less grindy. CI is a project development practice where developers integrate code into a shared repository frequently. Each Integration is then verified by an automated build that allows the team to detect problems in an early stage.  <br>Here we will install Jenkins, create Jenkins task and then configure it with GitHub. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Jenkins is an open-source tool that tests and compiles the code. If everything is fine then it deploys the code for production else you will get a notification that builds has failed and you need to fix the bug/error. Similarly, Selenium - an automation testing tool - minimizes the testing time and eliminates repetitive human tasks. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Jenkins has an array of advantages, such as:<br> Easily configurable<br> Platform independent<br> Rich plugin support<br> Easy to create new Jenkins plugin if one is not available<br> Now you know why Jenkins is so popular, go ahead and install it. <br> Step-by-step guide to Install Jenkins<br> Follow the below steps:<br> Step 1: First install Java, using the following command. <br> $ sudo apt-get install openjdk-8-jre-headless -y<br> Step 2: Add the key and source list to apt for Jenkins.<br> $ wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -<br> Step 3: Now create source list for Jenkins, using the below commands<br> $ sudo sh -c \'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list\'<br> Step 4: Update the packages<br> $ sudo apt-get update<br> Step 5: Now install Jenkins.<br> $ sudo apt-get install jenkins<br> Step 6: After installing Jenkins. Go to: http://your_ip_address:8080 and run the following commands to get admin password.<br> $ sudo nano /var/lib/jenkins/secrets/initialAdminPassword<br> Step 7: Now copy the password and paste into browser.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Integrating GitHub with Jenkins<br>\nThe integration of GitHub with Jenkins automates deployment, testing and improves products quality while saving a significant amount of time of developers. Follow the below steps to integrate GitHub with Jenkins:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Prerequisite: Install GitHub Jenkins plugin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 1 Go to Manage Jenkins -&gt; Manage Plugin.<br>\nStep 2 Search Github Plugin in the Available tab then click on Download now and install after the restart.<br>\nCreating a Jenkins job<br>\nStep 1 To Create a new task for Jenkins, click on “New Item” then enter an item name that is suitable for your project and select Freestyle project. Now click Ok. <br>\nStep 2 Select the GitHub project checkbox and set the Project URL to point to your GitHub Repository.<br>\nStep 3 Under Source Code Management tab, select Git and then set the Repository URL to point to your GitHub Repository.<br>\nStep 4 Now Under Build Triggers tab, select the “Build when a change is pushed to GitHub” checkbox.<br>\nStep 5 At the end, execute Shell script to take a clone from dev. When the configuration is done, click on save button.<br>\nConfiguring GitHub for Jenkins<br>\nStep 1 Install the Jenkins (GitHub plugin) on a git repository.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2 Now set the Jenkins hook URL as the URL for your machine. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note: Github will not accept Local URL, hence, we need to install ngrok software to create live URL for port 8080. Here you can find complete guide for configuration: https://ngrok.com/download<br>\nEvery time you publish changes to GitHub, it will trigger new Jenkins job. Now you know an entire process of continuous integration with Jenkins and GitHub. Similarly, you can integrate Jenkins with selenium to automate testing. Go ahead and try it on your own software development. Note that computers don\'t get bored so while they handle deployment and testing, you\'re free to do other important works.</p>\n<!-- /wp:paragraph -->','Continuous integration using Jenkins and GitHub to automate deployment','','inherit','closed','closed','','88-revision-v1','','','2019-05-06 06:50:15','2019-05-06 06:50:15','',88,'http://192.168.1.181:8080/wordpress/index.php/2019/05/06/88-revision-v1/',0,'revision','',0),(91,1,'2019-05-06 07:57:43','2019-05-06 07:57:43','<!-- wp:paragraph -->\n<p>What is Jenkins?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Jenkins is an open source automation tool which helps us to automate the regular jobs for continuous integration (CI) and continuous delivery (CD).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Before installing Jenkins, make sure java is installed. If it is not installed, install Java using yum repository.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>yum -y install java<br>\nEnable the repo file for installing jenkins packages directly from the jenkins repository<br>\n wget -O /etc/yum.repos.d/jenkins.repo \\<br>\nhttps://pkg.jenkins.io/redhat/jenkins.repo<br>\n rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key<br>\n yum -y install jenkins<br>\nor<br>\nUsing RPM Download the latest jenkins version from jenkins.io official website and copy it to the server directory to install using rpm command.<br>\nrpm -ivh jenkins-2.89.4-1.1.noarch.rpm<br>\nLets configure Jenkins Integration tool.<br>\nBydefault, user \"jenkins\" is created during the installation at the OS level, but it is a non-root user.<br>\nWhatever Users created in jenkins portal are only for creating different jobs. Bydefault, user<br>\n\"jenkins\" only runs everything in background even if you have loggedin using any users on portal.<br>\nSo when user \"jenkins\" doesnt have sufficient previleges at the OS level, this user cannot<br>\nperform any administrative level tasks. So we must configure sudo to gain the administrative level access.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Edit /etc/sudoers file and add below entry to allow user \"jenkins\" to use sudo with nopasswd prompt and also disable requiretty option..<br>\n yum -y install java<br>\n wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo<br>\n rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key<br>\n yum -y install jenkins<br>\nUsing RPM: https://pkg.jenkins.io/redhatstable/<br>\n rpm -ivh jenkins-2.89.4-1.1.noarch.rpm</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>How to configure Jenkins user with Sudo access<br>\nroot@jenkins-server ~]# visudo<br>\nEdit /etc/sudoers file and add below entry to allow user \"jenkins\" to use sudo with nopasswd prompt and also disable requiretty option..<br>\njenkins ALL=(ALL) NOPASSWD: ALL<br>\nDefaults !requiretty</li><li>How to change jenkins user shell for interactive session<br>\nChange user \"jenkins\" shell to /bin/bash from /sbin/nologin for interactive session. Also you can use this user \"jenkins\" to login into all build server and slave servers for advanced tasks. It must be looks like below output after the change.<br>\n</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:shortcode -->\n[root@jenkins-server ~]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p># cat /etc/passwd | grep -i jenkins<br>\njenkins:x:995:992:Jenkins Automation Server:/var/lib/jenkins:/bin/bash\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>How to enable and start Jenkins Service<br>\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n[root@jenkins-server ~]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p>#systemctl enable jenkins<br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n[root@jenkins-server ~]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p>#systemctl start jenkins\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>How to allow Jenkins port in firewall<br>\nLets allow default jenkins port 8080 in firewalld to accept the connections.<br>\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n[root@jenkins-server ~]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p># firewall-cmd --permanent --add-port=8080/tcp<br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n[root@jenkins-server ~]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p># firewall-cmd --reload\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>How to Setup Jenkins portal ready for first job<br>\nOnce the installation and configuration of jenkins is completed, we will be able to access the jenkin dashboard<br>\nOpen your browser and enter the url \"http://192.168.2.1:8080\". Replace \"192.168.2.1\" with your server ipaddress.<br>\nOnce you have hit enter, you would get an welcome screen as below to unlock jenkins<br>\nInitial Admin Password is available in a file \"/var/lib/jenkins/secrets/initialAdminPassword\" to<br>\nunlock jenkins tool.<br>\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n[root@jenkins-server ~]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p># cat /var/lib/jenkins/secrets/initialAdminPassword<br>\n661efd2f988541bda823dd7391f462af<br>\nCopy that password, enter in the password box and click continue. Next screen would be for plugins installation.<br>\nGetting started with Unlock Jenkins<br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n[root@jenkins-server ~]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p># cat /var/lib/jenkins/secrets/initialAdminPassword<br>\n661efd2f988541bda823dd7391f462af<br>\nGetting started with Customize Jenkins<br>\nPlugins are required for integrations to support many different needs for additional features.<br>\nThere are two options given in the jenkins dashboard to install plugins as shown in the above image.\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Install suggested plugins</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Select plugins to install<br>\nWe can install plugins even later, so just close this window for right now<br>\nClick Start using jenkins.<br>\nLets reset the admin password, so we dont need to use this file for encrypted admin password<br>\nfrom /var/lib/jenkins/secrets/initialAdminPassword<br>\nGo to the menu \"people\" available at the left side and select the user \"admin\"<br>\nThats it. Logout and login again with new admin password.</p>\n<!-- /wp:paragraph -->','How to Install & Configure Jenkins Integration tool on Linux','','publish','open','open','','how-to-install-configure-jenkins-integration-tool-on-linux','','','2019-05-06 07:57:43','2019-05-06 07:57:43','',0,'http://192.168.1.181:8080/wordpress/?p=91',0,'post','',0),(92,1,'2019-05-06 07:57:43','2019-05-06 07:57:43','<!-- wp:paragraph -->\n<p>What is Jenkins?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Jenkins is an open source automation tool which helps us to automate the regular jobs for continuous integration (CI) and continuous delivery (CD).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Before installing Jenkins, make sure java is installed. If it is not installed, install Java using yum repository.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>yum -y install java<br>\nEnable the repo file for installing jenkins packages directly from the jenkins repository<br>\n wget -O /etc/yum.repos.d/jenkins.repo \\<br>\nhttps://pkg.jenkins.io/redhat/jenkins.repo<br>\n rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key<br>\n yum -y install jenkins<br>\nor<br>\nUsing RPM Download the latest jenkins version from jenkins.io official website and copy it to the server directory to install using rpm command.<br>\nrpm -ivh jenkins-2.89.4-1.1.noarch.rpm<br>\nLets configure Jenkins Integration tool.<br>\nBydefault, user \"jenkins\" is created during the installation at the OS level, but it is a non-root user.<br>\nWhatever Users created in jenkins portal are only for creating different jobs. Bydefault, user<br>\n\"jenkins\" only runs everything in background even if you have loggedin using any users on portal.<br>\nSo when user \"jenkins\" doesnt have sufficient previleges at the OS level, this user cannot<br>\nperform any administrative level tasks. So we must configure sudo to gain the administrative level access.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Edit /etc/sudoers file and add below entry to allow user \"jenkins\" to use sudo with nopasswd prompt and also disable requiretty option..<br>\n yum -y install java<br>\n wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo<br>\n rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key<br>\n yum -y install jenkins<br>\nUsing RPM: https://pkg.jenkins.io/redhatstable/<br>\n rpm -ivh jenkins-2.89.4-1.1.noarch.rpm</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>How to configure Jenkins user with Sudo access<br>\nroot@jenkins-server ~]# visudo<br>\nEdit /etc/sudoers file and add below entry to allow user \"jenkins\" to use sudo with nopasswd prompt and also disable requiretty option..<br>\njenkins ALL=(ALL) NOPASSWD: ALL<br>\nDefaults !requiretty</li><li>How to change jenkins user shell for interactive session<br>\nChange user \"jenkins\" shell to /bin/bash from /sbin/nologin for interactive session. Also you can use this user \"jenkins\" to login into all build server and slave servers for advanced tasks. It must be looks like below output after the change.<br>\n</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:shortcode -->\n[root@jenkins-server ~]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p># cat /etc/passwd | grep -i jenkins<br>\njenkins:x:995:992:Jenkins Automation Server:/var/lib/jenkins:/bin/bash\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>How to enable and start Jenkins Service<br>\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n[root@jenkins-server ~]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p>#systemctl enable jenkins<br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n[root@jenkins-server ~]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p>#systemctl start jenkins\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>How to allow Jenkins port in firewall<br>\nLets allow default jenkins port 8080 in firewalld to accept the connections.<br>\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n[root@jenkins-server ~]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p># firewall-cmd --permanent --add-port=8080/tcp<br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n[root@jenkins-server ~]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p># firewall-cmd --reload\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>How to Setup Jenkins portal ready for first job<br>\nOnce the installation and configuration of jenkins is completed, we will be able to access the jenkin dashboard<br>\nOpen your browser and enter the url \"http://192.168.2.1:8080\". Replace \"192.168.2.1\" with your server ipaddress.<br>\nOnce you have hit enter, you would get an welcome screen as below to unlock jenkins<br>\nInitial Admin Password is available in a file \"/var/lib/jenkins/secrets/initialAdminPassword\" to<br>\nunlock jenkins tool.<br>\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n[root@jenkins-server ~]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p># cat /var/lib/jenkins/secrets/initialAdminPassword<br>\n661efd2f988541bda823dd7391f462af<br>\nCopy that password, enter in the password box and click continue. Next screen would be for plugins installation.<br>\nGetting started with Unlock Jenkins<br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n[root@jenkins-server ~]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p># cat /var/lib/jenkins/secrets/initialAdminPassword<br>\n661efd2f988541bda823dd7391f462af<br>\nGetting started with Customize Jenkins<br>\nPlugins are required for integrations to support many different needs for additional features.<br>\nThere are two options given in the jenkins dashboard to install plugins as shown in the above image.\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Install suggested plugins</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Select plugins to install<br>\nWe can install plugins even later, so just close this window for right now<br>\nClick Start using jenkins.<br>\nLets reset the admin password, so we dont need to use this file for encrypted admin password<br>\nfrom /var/lib/jenkins/secrets/initialAdminPassword<br>\nGo to the menu \"people\" available at the left side and select the user \"admin\"<br>\nThats it. Logout and login again with new admin password.</p>\n<!-- /wp:paragraph -->','How to Install & Configure Jenkins Integration tool on Linux','','inherit','closed','closed','','91-revision-v1','','','2019-05-06 07:57:43','2019-05-06 07:57:43','',91,'http://192.168.1.181:8080/wordpress/index.php/2019/05/06/91-revision-v1/',0,'revision','',0),(93,1,'2019-05-06 08:04:44','2019-05-06 08:04:44','<!-- wp:file {\"id\":94,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Jenkins-Tutorial.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Jenkins-Tutorial.docx\">Jenkins Tutorial</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Jenkins-Tutorial.docx\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":95,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Workshop-CI-CD-GIT-Jenkins-Python-Application.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Workshop-CI-CD-GIT-Jenkins-Python-Application.pdf\">Workshop - CI, CD, GIT, Jenkins, Python Application</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Workshop-CI-CD-GIT-Jenkins-Python-Application.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":98,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/CI-CD-Pipeline.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/CI-CD-Pipeline.docx\">CI CD Pipeline</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/CI-CD-Pipeline.docx\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:paragraph -->\n<p>Auto Shell Deploy script</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#!/bin/bash\n#\njobName=\"$1\"\n#servers=\"127.0.0.1 192.168.1.122 192.168.1.181\"\nservers=\"192.168.1.122 192.168.1.181-/opt/apache2_2 192.168.1.181-/opt/apache2_4\"\nfor server in $servers\ndo\nserver_ip=`echo $server | awk -F\'-\' \'{ print $1}\'`\ndocument_root=`echo $server | awk -F\'-\' \'{ print $2}\'`\n\n        rsync -avz  /var/lib/jenkins/workspace/$jobName/ root@$server_ip:$document_root/htdocs/\n        ssh -l root -p 22 $server \"/etc/init.d/httpd restart\"\n        ssh -l root $server_ip \"$document_root/bin/apachectl restart\"\n\necho $document_root;\ndone\n-------------------------------------------------------------------------\n#!/bin/bash\n#\njobName=\"$1\"\nservers=\"127.0.0.1 192.168.1.122 192.168.1.181\"\nfor server in $servers\ndo\n        rsync -avz -e \'ssh -p 22\' /var/lib/jenkins/workspace/$jobName/ root@$server:/var/www/html/\n        rsync -avz  /var/lib/jenkins/workspace/$jobName/ root@$server:/opt/apache2_2/htdocs\n        rsync -avz  /var/lib/jenkins/workspace/$jobName/ root@$server:/opt/apache2_4/htdocs\n        ssh -l root -p 22 $server \"/etc/init.d/httpd restart\"\n        ssh -l root -p 22 $server \"/etc/init.d/apache2 restart\"\n        ssh -l root $server \"/opt/apache2_2/bin/apachectl restart\"\n        ssh -l root $server \"/opt/apache2_4/bin/apachectl restart\"\ndone\n------------------------------------------------------------------\nAuto hook trigger\n#!/bin/sh\n#\ncurl --user manoj:1123f10a6af4c10dfb207f6b455ecfc609 http://192.168.1.181:9090/job/Sample-Auto-hookstrigeer/build?token=1123f10a6af4c10dfb207f6b455ecfc609\necho \"jenkins build from external script\"\n\n</code></pre>\n<!-- /wp:code -->','Jenkins-Notes','','publish','open','open','','jenkins-notes','','','2019-05-06 10:08:08','2019-05-06 10:08:08','',0,'http://192.168.1.181:8080/wordpress/?p=93',0,'post','',0),(94,1,'2019-05-06 08:04:04','2019-05-06 08:04:04','','Jenkins Tutorial','','inherit','open','closed','','jenkins-tutorial','','','2019-05-06 08:04:04','2019-05-06 08:04:04','',93,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Jenkins-Tutorial.docx',0,'attachment','application/vnd.openxmlformats-officedocument.wordprocessingml.document',0),(95,1,'2019-05-06 08:04:15','2019-05-06 08:04:15','','Workshop - CI, CD, GIT, Jenkins, Python Application','','inherit','open','closed','','workshop-ci-cd-git-jenkins-python-application','','','2019-05-06 08:04:15','2019-05-06 08:04:15','',93,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Workshop-CI-CD-GIT-Jenkins-Python-Application.pdf',0,'attachment','application/pdf',0),(96,1,'2019-05-06 08:04:44','2019-05-06 08:04:44','<!-- wp:file {\"id\":94,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Jenkins-Tutorial.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Jenkins-Tutorial.docx\">Jenkins Tutorial</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Jenkins-Tutorial.docx\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":95,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Workshop-CI-CD-GIT-Jenkins-Python-Application.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Workshop-CI-CD-GIT-Jenkins-Python-Application.pdf\">Workshop - CI, CD, GIT, Jenkins, Python Application</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Workshop-CI-CD-GIT-Jenkins-Python-Application.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->','Jenkins-Notes','','inherit','closed','closed','','93-revision-v1','','','2019-05-06 08:04:44','2019-05-06 08:04:44','',93,'http://192.168.1.181:8080/wordpress/index.php/2019/05/06/93-revision-v1/',0,'revision','',0),(98,1,'2019-05-06 09:57:46','2019-05-06 09:57:46','','CI CD Pipeline','','inherit','open','closed','','ci-cd-pipeline','','','2019-05-06 09:57:46','2019-05-06 09:57:46','',93,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/CI-CD-Pipeline.docx',0,'attachment','application/vnd.openxmlformats-officedocument.wordprocessingml.document',0),(99,1,'2019-05-06 10:07:06','2019-05-06 10:07:06','<!-- wp:file {\"id\":94,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Jenkins-Tutorial.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Jenkins-Tutorial.docx\">Jenkins Tutorial</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Jenkins-Tutorial.docx\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":95,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Workshop-CI-CD-GIT-Jenkins-Python-Application.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Workshop-CI-CD-GIT-Jenkins-Python-Application.pdf\">Workshop - CI, CD, GIT, Jenkins, Python Application</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Workshop-CI-CD-GIT-Jenkins-Python-Application.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":98,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/CI-CD-Pipeline.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/CI-CD-Pipeline.docx\">CI CD Pipeline</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/CI-CD-Pipeline.docx\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:paragraph -->\n<p>Auto Shell Deploy script</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#!/bin/bash\n#\njobName=\"$1\"\n#servers=\"127.0.0.1 192.168.1.122 192.168.1.181\"\nservers=\"192.168.1.122 192.168.1.181-/opt/apache2_2 192.168.1.181-/opt/apache2_4\"\nfor server in $servers\ndo\nserver_ip=`echo $server | awk -F\'-\' \'{ print $1}\'`\ndocument_root=`echo $server | awk -F\'-\' \'{ print $2}\'`\n\n        rsync -avz  /var/lib/jenkins/workspace/$jobName/ root@$server_ip:$document_root/htdocs/\n        ssh -l root -p 22 $server \"/etc/init.d/httpd restart\"\n        ssh -l root $server_ip \"$document_root/bin/apachectl restart\"\n\necho $document_root;\ndone\n-------------------------------------------------------------------------\n#!/bin/bash\n#\njobName=\"$1\"\nservers=\"127.0.0.1 192.168.1.122 192.168.1.181\"\nfor server in $servers\ndo\n        rsync -avz -e \'ssh -p 22\' /var/lib/jenkins/workspace/$jobName/ root@$server:/var/www/html/\n        rsync -avz  /var/lib/jenkins/workspace/$jobName/ root@$server:/opt/apache2_2/htdocs\n        rsync -avz  /var/lib/jenkins/workspace/$jobName/ root@$server:/opt/apache2_4/htdocs\n        ssh -l root -p 22 $server \"/etc/init.d/httpd restart\"\n        ssh -l root -p 22 $server \"/etc/init.d/apache2 restart\"\n        ssh -l root $server \"/opt/apache2_2/bin/apachectl restart\"\n        ssh -l root $server \"/opt/apache2_4/bin/apachectl restart\"\ndone\n------------------------------------------------------------------\n\n</code></pre>\n<!-- /wp:code -->','Jenkins-Notes','','inherit','closed','closed','','93-autosave-v1','','','2019-05-06 10:07:06','2019-05-06 10:07:06','',93,'http://192.168.1.181:8080/wordpress/index.php/2019/05/06/93-autosave-v1/',0,'revision','',0),(100,1,'2019-05-06 10:08:08','2019-05-06 10:08:08','<!-- wp:file {\"id\":94,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Jenkins-Tutorial.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Jenkins-Tutorial.docx\">Jenkins Tutorial</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Jenkins-Tutorial.docx\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":95,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Workshop-CI-CD-GIT-Jenkins-Python-Application.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Workshop-CI-CD-GIT-Jenkins-Python-Application.pdf\">Workshop - CI, CD, GIT, Jenkins, Python Application</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Workshop-CI-CD-GIT-Jenkins-Python-Application.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":98,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/CI-CD-Pipeline.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/CI-CD-Pipeline.docx\">CI CD Pipeline</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/CI-CD-Pipeline.docx\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:paragraph -->\n<p>Auto Shell Deploy script</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#!/bin/bash\n#\njobName=\"$1\"\n#servers=\"127.0.0.1 192.168.1.122 192.168.1.181\"\nservers=\"192.168.1.122 192.168.1.181-/opt/apache2_2 192.168.1.181-/opt/apache2_4\"\nfor server in $servers\ndo\nserver_ip=`echo $server | awk -F\'-\' \'{ print $1}\'`\ndocument_root=`echo $server | awk -F\'-\' \'{ print $2}\'`\n\n        rsync -avz  /var/lib/jenkins/workspace/$jobName/ root@$server_ip:$document_root/htdocs/\n        ssh -l root -p 22 $server \"/etc/init.d/httpd restart\"\n        ssh -l root $server_ip \"$document_root/bin/apachectl restart\"\n\necho $document_root;\ndone\n-------------------------------------------------------------------------\n#!/bin/bash\n#\njobName=\"$1\"\nservers=\"127.0.0.1 192.168.1.122 192.168.1.181\"\nfor server in $servers\ndo\n        rsync -avz -e \'ssh -p 22\' /var/lib/jenkins/workspace/$jobName/ root@$server:/var/www/html/\n        rsync -avz  /var/lib/jenkins/workspace/$jobName/ root@$server:/opt/apache2_2/htdocs\n        rsync -avz  /var/lib/jenkins/workspace/$jobName/ root@$server:/opt/apache2_4/htdocs\n        ssh -l root -p 22 $server \"/etc/init.d/httpd restart\"\n        ssh -l root -p 22 $server \"/etc/init.d/apache2 restart\"\n        ssh -l root $server \"/opt/apache2_2/bin/apachectl restart\"\n        ssh -l root $server \"/opt/apache2_4/bin/apachectl restart\"\ndone\n------------------------------------------------------------------\nAuto hook trigger\n#!/bin/sh\n#\ncurl --user manoj:1123f10a6af4c10dfb207f6b455ecfc609 http://192.168.1.181:9090/job/Sample-Auto-hookstrigeer/build?token=1123f10a6af4c10dfb207f6b455ecfc609\necho \"jenkins build from external script\"\n\n</code></pre>\n<!-- /wp:code -->','Jenkins-Notes','','inherit','closed','closed','','93-revision-v1','','','2019-05-06 10:08:08','2019-05-06 10:08:08','',93,'http://192.168.1.181:8080/wordpress/index.php/2019/05/06/93-revision-v1/',0,'revision','',0),(101,1,'2019-05-07 10:19:47','2019-05-07 10:19:47','<!-- wp:file {\"id\":102,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Git-jagdeshblogspot.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Git-jagdeshblogspot.docx\">Git-jagdeshblogspot</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Git-jagdeshblogspot.docx\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":104,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/GIT-notes.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/GIT-notes.docx\">GIT-notes</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/GIT-notes.docx\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":105,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/git.ppt.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/git.ppt.pdf\">git.ppt</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/git.ppt.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":106,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Git_Notes.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Git_Notes.pdf\">Git_Notes</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Git_Notes.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file /-->','Git-notes','','publish','open','open','','git-notes','','','2019-05-07 10:51:14','2019-05-07 10:51:14','',0,'http://192.168.1.181:8080/wordpress/?p=101',0,'post','',0),(102,1,'2019-05-07 10:19:45','2019-05-07 10:19:45','','Git-jagdeshblogspot','','inherit','open','closed','','git-jagdeshblogspot','','','2019-05-07 10:19:45','2019-05-07 10:19:45','',101,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Git-jagdeshblogspot.docx',0,'attachment','application/vnd.openxmlformats-officedocument.wordprocessingml.document',0),(103,1,'2019-05-07 10:19:47','2019-05-07 10:19:47','<!-- wp:file {\"id\":102,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Git-jagdeshblogspot.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Git-jagdeshblogspot.docx\">Git-jagdeshblogspot</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Git-jagdeshblogspot.docx\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->','Git-notes','','inherit','closed','closed','','101-revision-v1','','','2019-05-07 10:19:47','2019-05-07 10:19:47','',101,'http://192.168.1.181:8080/wordpress/index.php/2019/05/07/101-revision-v1/',0,'revision','',0),(104,1,'2019-05-07 10:49:49','2019-05-07 10:49:49','','GIT-notes','','inherit','open','closed','','git-notes-2','','','2019-05-07 10:49:49','2019-05-07 10:49:49','',101,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/GIT-notes.docx',0,'attachment','application/vnd.openxmlformats-officedocument.wordprocessingml.document',0),(105,1,'2019-05-07 10:50:20','2019-05-07 10:50:20','','git.ppt','','inherit','open','closed','','git-ppt','','','2019-05-07 10:50:20','2019-05-07 10:50:20','',101,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/git.ppt.pdf',0,'attachment','application/pdf',0),(106,1,'2019-05-07 10:50:30','2019-05-07 10:50:30','','Git_Notes','','inherit','open','closed','','git_notes','','','2019-05-07 10:50:30','2019-05-07 10:50:30','',101,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Git_Notes.pdf',0,'attachment','application/pdf',0),(107,1,'2019-05-07 10:51:14','2019-05-07 10:51:14','<!-- wp:file {\"id\":102,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Git-jagdeshblogspot.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Git-jagdeshblogspot.docx\">Git-jagdeshblogspot</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Git-jagdeshblogspot.docx\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":104,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/GIT-notes.docx\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/GIT-notes.docx\">GIT-notes</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/GIT-notes.docx\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":105,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/git.ppt.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/git.ppt.pdf\">git.ppt</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/git.ppt.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file {\"id\":106,\"href\":\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Git_Notes.pdf\"} -->\n<div class=\"wp-block-file\"><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Git_Notes.pdf\">Git_Notes</a><a href=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Git_Notes.pdf\" class=\"wp-block-file__button\" download>Download</a></div>\n<!-- /wp:file -->\n\n<!-- wp:file /-->','Git-notes','','inherit','closed','closed','','101-revision-v1','','','2019-05-07 10:51:14','2019-05-07 10:51:14','',101,'http://192.168.1.181:8080/wordpress/index.php/2019/05/07/101-revision-v1/',0,'revision','',0),(108,1,'2019-05-07 11:05:28','2019-05-07 11:05:28','<!-- wp:paragraph -->\n<p> Git is distributed version control system. It is primarily used by software developers for their source code management. Git is free and open source software and many large organizations use it to manage their huge code base. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In this tutorial we’ll get familiar with Git. This will be hands on guide. This tutorial assumes that Git is installed on your system.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Git user initial configuration</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>First we have to configure settings for Git user. We can make these settings for all repositories present on current system or for a particular repository. Let us understand this with example:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>User identity</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In Git we can specify user identity by providing its name and e-mail address. This information will be used during each commit operation. Execute below command in terminal to assign identity:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git config --global user.name \"Linuxtechi User\"\n$ git config --global user.email \"linuxtechiuser@linuxtechi.com\"</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Editor</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This setting configures editor, which will be used while providing commit message:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git config --global core.editor vim</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Compression</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This setting configures compression level to be used. Valid range for compression is -1 to 9. -1 value indicates zlib compression and is default compression level. 0 value means no compression, and 1 to 9 are various speed/size tradeoffs, 9 being slowest.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git config --global core.compression 2</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Diff tool</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This setting configures diff viewer tool. For example, below command configures vimdiff as a diff tool:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git config --global diff.tool vimdiff</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above commands we have used&nbsp;<strong>–global</strong>&nbsp;option everywhere, which will make this configuration global. It means that same configuration will be applied to all repositories present on current system. To make configuration repository specific just remove –global option.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>List configuration</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To list Git configuration execute below command in terminal:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git config -l</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>This command will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">core.repositoryformatversion=0\ncore.filemode=true\ncore.bare=false\ncore.logallrefupdates=true\ncore.editor=vim\ncore.compression=2\nuser.name=Linuxtechi User\nuser.email=linuxtechiuser@linuxtechi.com\ndiff.tool=vimdiff</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Git repositories</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Repository is a location where source code is stored. We can either create new repository or use existing repository. To create new empty repository execute below command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ mkdir my-repo.git\n$ cd my-repo.git\n$ git init --bare\nInitialized empty Git repository in my-repo.git</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>This method will be useful when you are starting with new project. Another method is to use existing repository. Such a repository is hosted on remote server like GitHub. To download remote repository use clone command as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git clone https://github.com/linuxtechiuser/my-repo.git</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above command last argument is path of remote repository.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Git workflow</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In this section we’ll discuss git workflow.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Introduce new changes</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First step is to introduce new changes. It can be addition of new file or updating existing files. Let us create a new file and modify existing file</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ touch AUTHORS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Create new file\n$ echo \"New Contents\" &gt;&gt; README&nbsp;&nbsp;              &nbsp; # Update existing file</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Check repository status</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Git is content tracking system, it will identify above two changes. Let us check repository status:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git status -s\n&nbsp;M README\n?? AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above output letter M appears before README which indicates that existing file is modified. Whereas ?? appears before AUTHORS which indicates that this is new file and Git is not aware about it hence such a file is called untracked file.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Add file to changeset</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let us instruct Git to track this new file. We can achieve this using add command. This operation will start tracking changes made to this file.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git add AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Let us check repository status now:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git status -s\nA &nbsp;AUTHORS\nM README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Above output shows A before AUTHORS which indicates that this file is newly added under Git. We can add any number of files using this command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Remove file from changeset</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let us instruct Git to untrack this newly added file. We can achieve this using reset command. This operation will remove file from changeset</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git reset AUTHORS\n$ git status -s\n&nbsp;M README\n?? AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Above output shows that AUTHORS file is not tracked by Git.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Commit changes</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In Git, files which are part of changeset will form a commit. Each commit will get unique ID. Let us create changeset first</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git add AUTHORS\n$ git add README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Now let us commit changes to local repository with commit message. In below command -m argument indicates commit message.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git commit -m \"Updated README and added AUTHORS\"</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>When you execute above command it will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">[master 0b124eb] Updated README and added AUTHORS\n&nbsp;2 files changed, 1 insertion(+)\n&nbsp;create mode 100644 AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Review changes</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In this section we’ll discuss commands which will allow us to review repository changes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>View commit log</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Repository can contain multiple commits by multiple authors. We can use log command to view all available commits:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git log</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>When you execute above command it will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">commit 0b124eb6d0109d837f6f9396c9937406abd3f456 (HEAD -&gt; master)\nAuthor: Linuxtechi User &lt;linuxtechiuser@linuxtechi.com&gt;\nDate:&nbsp;&nbsp; Fri Jul 27 21:06:55 2018 +0530\n\n&nbsp;&nbsp;&nbsp; Updated README and added AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>This is commit we had created earlier. In above command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Hexadecimal ID represents a commit ID</li><li>Author section of commit shows details about who made these changes</li><li>Date section shows date and timestamp of commit</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>View short commit log</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Above command will show detailed information about each commit. To view short description about each commit use –oneline option as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git log --oneline</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>When you execute above command, it will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">0b124eb (HEAD -&gt; master) Updated README and added AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>View commit</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Commit ID is associated with each changeset. We can use this ID with show command to view commit contents.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git show 0b124eb6d0109d837f6f9396c9937406abd3f456</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>When you execute above command it will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">commit 0b124eb6d0109d837f6f9396c9937406abd3f456 (HEAD -&gt; master)\nAuthor: Linuxtechi User &lt;linuxtechiuser@linuxtechi.com&gt;\nDate:&nbsp;&nbsp; Fri Jul 27 21:06:55 2018 +0530\n&nbsp;&nbsp;&nbsp; Updated README and added AUTHORS\ndiff --git a/AUTHORS b/AUTHORS\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/README b/README\nindex 980a0d5..5680123 100644\n--- a/README\n+++ b/README\n@@ -1 +1,2 @@\n&nbsp;Hello World!\n+New Contents</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>View diff</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Diff command allows us to review changes before creating changeset. Diff command shows the differences between repository and local workspace. Let us modify README file and view differences</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ echo \"Generating diff\" &gt;&gt; README\n$ git diff\ndiff --git a/README b/README\nindex 5680123..3158230 100644\n--- a/README\n+++ b/README\n@@ -1,2 +1,3 @@\n&nbsp;Hello World!\n&nbsp;New Contents\n+Generating diff</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>+ sign indicates changes which are added to file</li><li>– sign indicates changes which are removed from file</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Working with remote repositories</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>So far we were working with local repository only. Other developers cannot use changes which are made by us as they are local. Hence code collaboration is not possible. This section will describe commands which will allow us to interact with remote repositories</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Publish changes to remote repository</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We can publish local changes to remote repository so that other developers can use it. Before publishing changes we have to create changeset and local commit. We can publish changes using push command as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git push</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>This command copies changes from local workspace to remote repository. In Git, this operation is referred as push operation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Sync workspace with remote repository</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Many developers can publish their workspace changes to remote repository. Git allows us to download those changes and sync workspace with repository. We can achieve this using pull command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git pull</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In Git, this operation is referred as pull operation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Miscellaneous Git commands</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This section discusses miscellaneous Git commands which will be useful to perform day-to-day tasks:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Modify latest commit</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Git allows us to modify latest commit. We can use this method to avoid creation of new commit. It is mostly used to modify previous commit message. To modify latest commit use&nbsp;<strong>–amend</strong>&nbsp;option as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ echo \"Yet another new change\" &gt;&gt; README\n$ git add README\n$ git commit --amend -m \"This is amended commit</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Now let us check the commit log:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git log\ncommit 8bf67aec1d1de87f03ab6aae93940b17826fde1c (HEAD -&gt; master)\nAuthor: Linuxtechi User &lt;linuxtechiuser@linuxtechi.com&gt;\nDate:&nbsp;&nbsp; Fri Jul 27 21:54:55 2018 +0530\n\n&nbsp;&nbsp;&nbsp; This is amended commit</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>If you observe above output carefully then we can see new commit message, its ID and new timestamp.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Remove untracked files</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Untracked files are those which are unknown to Git. We can remove all untracked files using clean command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let us create few untracked files:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ touch delete-me-1 delete-me-2 delete-me-3</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>To remove all above untracked file use clean command with&nbsp;<strong>-f</strong>&nbsp;option as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git clean -f\nRemoving delete-me-1\nRemoving delete-me-2\nRemoving delete-me-3</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Please note that this command will remove files permanently hence use it with caution.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>View commits of particular author</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If we use log command then it shows commits of all authors. To view commits of particular author use –author flag as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git log --author=Linuxtechi</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>When you execute above command it will list all the commits of Linuxtechi authors as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">commit 8bf67aec1d1de87f03ab6aae93940b17826fde1c (HEAD -&gt; master)\nAuthor: Linuxtechi User &lt;linuxtechiuser@linuxtechi.com&gt;\nDate:&nbsp;&nbsp; Fri Jul 27 21:54:55 2018 +0530\n\n&nbsp;&nbsp;&nbsp; This is amended commit</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>View history of each file line by line</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To view line by line history we can use blame command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git blame README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>When you execute above command it will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">76294131 (Linuxtechi User&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2018-07-27 21:12:11 -0700 1) Hello World!\n8bf67aec (Linuxtechi User&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2018-07-27 21:54:55 +0530 2) New changes\n8bf67aec (Linuxtechi User&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2018-07-27 21:54:55 +0530 3) Yet another changes</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>First column indicates commit ID</li><li>Second column indicates author</li><li>Third column indicates timestamps</li><li>Last column indicates line number and file content</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>View diff from staging area</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When you create changeset using add command then file is logically moved to staging area. Let us see with this example:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ echo \"Let us demonstrate staging area\" &gt;&gt; README\n$ git add README\n$ git diff</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Above command will not show any difference as file is move to staging area. Let us use –staged operation to view differences:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git diff --staged\ndiff --git a/README b/README\nindex 74729a2..8bc5ffd 100644\n--- a/README\n+++ b/README\n@@ -1,3 +1,4 @@\n&nbsp;Hello World!\n&nbsp;New changes\n&nbsp;Yet another changes\n+Let us demonstrate staging area</pre>\n<!-- /wp:preformatted -->','Learn Git Command with Practical Examples on Linux – Part 1','','publish','open','open','','learn-git-command-with-practical-examples-on-linux-part-1','','','2019-05-07 11:14:30','2019-05-07 11:14:30','',0,'http://192.168.1.181:8080/wordpress/?p=108',0,'post','',0),(109,1,'2019-05-07 11:05:28','2019-05-07 11:05:28','<!-- wp:paragraph -->\n<p> Git is distributed version control system. It is primarily used by software developers for their source code management. Git is free and open source software and many large organizations use it to manage their huge code base. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In this tutorial we’ll get familiar with Git. This will be hands on guide. This tutorial assumes that Git is installed on your system.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Git user initial configuration<br>\nFirst we have to configure settings for Git user. We can make these settings for all repositories present on current system or for a particular repository. Let us understand this with example:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>User identity<br>\nIn Git we can specify user identity by providing its name and e-mail address. This information will be used during each commit operation. Execute below command in terminal to assign identity:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git config --global user.name \"Linuxtechi User\"<br>\n$ git config --global user.email \"linuxtechiuser@linuxtechi.com\"<br>\nEditor<br>\nThis setting configures editor, which will be used while providing commit message:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git config --global core.editor vim<br>\nCompression<br>\nThis setting configures compression level to be used. Valid range for compression is -1 to 9. -1 value indicates zlib compression and is default compression level. 0 value means no compression, and 1 to 9 are various speed/size tradeoffs, 9 being slowest.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git config --global core.compression 2<br>\nDiff tool<br>\nThis setting configures diff viewer tool. For example, below command configures vimdiff as a diff tool:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git config --global diff.tool vimdiff<br>\nIn above commands we have used –global option everywhere, which will make this configuration global. It means that same configuration will be applied to all repositories present on current system. To make configuration repository specific just remove –global option.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>List configuration<br>\nTo list Git configuration execute below command in terminal:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git config -l<br>\nThis command will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>core.repositoryformatversion=0<br>\ncore.filemode=true<br>\ncore.bare=false<br>\ncore.logallrefupdates=true<br>\ncore.editor=vim<br>\ncore.compression=2<br>\nuser.name=Linuxtechi User<br>\nuser.email=linuxtechiuser@linuxtechi.com<br>\ndiff.tool=vimdiff<br>\nGit repositories<br>\nRepository is a location where source code is stored. We can either create new repository or use existing repository. To create new empty repository execute below command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ mkdir my-repo.git<br>\n$ cd my-repo.git<br>\n$ git init --bare<br>\nInitialized empty Git repository in my-repo.git<br>\nThis method will be useful when you are starting with new project. Another method is to use existing repository. Such a repository is hosted on remote server like GitHub. To download remote repository use clone command as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git clone https://github.com/linuxtechiuser/my-repo.git<br>\nIn above command last argument is path of remote repository.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Git workflow<br>\nIn this section we’ll discuss git workflow.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Introduce new changes</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First step is to introduce new changes. It can be addition of new file or updating existing files. Let us create a new file and modify existing file</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ touch AUTHORS                                  # Create new file<br>\n$ echo \"New Contents\" &gt;&gt; README                  # Update existing file<br>\nCheck repository status<br>\nGit is content tracking system, it will identify above two changes. Let us check repository status:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git status -s<br>\n M README<br>\n?? AUTHORS<br>\nIn above output letter M appears before README which indicates that existing file is modified. Whereas ?? appears before AUTHORS which indicates that this is new file and Git is not aware about it hence such a file is called untracked file.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Add file to changeset</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let us instruct Git to track this new file. We can achieve this using add command. This operation will start tracking changes made to this file.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git add AUTHORS<br>\nLet us check repository status now:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git status -s<br>\nA  AUTHORS<br>\nM README<br>\nAbove output shows A before AUTHORS which indicates that this file is newly added under Git. We can add any number of files using this command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Remove file from changeset<br>\nLet us instruct Git to untrack this newly added file. We can achieve this using reset command. This operation will remove file from changeset</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git reset AUTHORS<br>\n$ git status -s<br>\n M README<br>\n?? AUTHORS<br>\nAbove output shows that AUTHORS file is not tracked by Git.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Commit changes<br>\nIn Git, files which are part of changeset will form a commit. Each commit will get unique ID. Let us create changeset first</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git add AUTHORS<br>\n$ git add README<br>\nNow let us commit changes to local repository with commit message. In below command -m argument indicates commit message.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git commit -m \"Updated README and added AUTHORS\"<br>\nWhen you execute above command it will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n[master 0b124eb]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p> Updated README and added AUTHORS<br>\n 2 files changed, 1 insertion(+)<br>\n create mode 100644 AUTHORS<br>\nReview changes<br>\nIn this section we’ll discuss commands which will allow us to review repository changes.\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>View commit log</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Repository can contain multiple commits by multiple authors. We can use log command to view all available commits:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git log<br>\nWhen you execute above command it will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>commit 0b124eb6d0109d837f6f9396c9937406abd3f456 (HEAD -&gt; master)<br>\nAuthor: Linuxtechi User <a href=\"mailto:linuxtechiuser@linuxtechi.com\">linuxtechiuser@linuxtechi.com</a><br>\nDate:   Fri Jul 27 21:06:55 2018 +0530</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Updated README and added AUTHORS</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This is commit we had created earlier. In above command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Hexadecimal ID represents a commit ID<br>\nAuthor section of commit shows details about who made these changes<br>\nDate section shows date and timestamp of commit<br>\nView short commit log</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Above command will show detailed information about each commit. To view short description about each commit use –oneline option as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git log --oneline<br>\nWhen you execute above command, it will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>0b124eb (HEAD -&gt; master) Updated README and added AUTHORS<br>\nView commit</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Commit ID is associated with each changeset. We can use this ID with show command to view commit contents.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git show 0b124eb6d0109d837f6f9396c9937406abd3f456<br>\nWhen you execute above command it will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>commit 0b124eb6d0109d837f6f9396c9937406abd3f456 (HEAD -&gt; master)<br>\nAuthor: Linuxtechi User <a href=\"mailto:linuxtechiuser@linuxtechi.com\">linuxtechiuser@linuxtechi.com</a><br>\nDate:   Fri Jul 27 21:06:55 2018 +0530<br>\n    Updated README and added AUTHORS<br>\ndiff --git a/AUTHORS b/AUTHORS<br>\nnew file mode 100644<br>\nindex 0000000..e69de29<br>\ndiff --git a/README b/README<br>\nindex 980a0d5..5680123 100644<br>\n--- a/README<br>\n+++ b/README<br>\n@@ -1 +1,2 @@<br>\n Hello World!<br>\n+New Contents<br>\nView diff<br>\nDiff command allows us to review changes before creating changeset. Diff command shows the differences between repository and local workspace. Let us modify README file and view differences</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ echo \"Generating diff\" &gt;&gt; README<br>\n$ git diff<br>\ndiff --git a/README b/README<br>\nindex 5680123..3158230 100644<br>\n--- a/README<br>\n+++ b/README<br>\n@@ -1,2 +1,3 @@<br>\n Hello World!<br>\n New Contents<br>\n+Generating diff<br>\nIn above command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>sign indicates changes which are added to file<br>\n– sign indicates changes which are removed from file<br>\nWorking with remote repositories<br>\nSo far we were working with local repository only. Other developers cannot use changes which are made by us as they are local. Hence code collaboration is not possible. This section will describe commands which will allow us to interact with remote repositories</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Publish changes to remote repository</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We can publish local changes to remote repository so that other developers can use it. Before publishing changes we have to create changeset and local commit. We can publish changes using push command as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git push<br>\nThis command copies changes from local workspace to remote repository. In Git, this operation is referred as push operation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Sync workspace with remote repository</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Many developers can publish their workspace changes to remote repository. Git allows us to download those changes and sync workspace with repository. We can achieve this using pull command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git pull<br>\nIn Git, this operation is referred as pull operation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Miscellaneous Git commands<br>\nThis section discusses miscellaneous Git commands which will be useful to perform day-to-day tasks:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Modify latest commit</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Git allows us to modify latest commit. We can use this method to avoid creation of new commit. It is mostly used to modify previous commit message. To modify latest commit use –amend option as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ echo \"Yet another new change\" &gt;&gt; README<br>\n$ git add README<br>\n$ git commit --amend -m \"This is amended commit<br>\nNow let us check the commit log:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git log<br>\ncommit 8bf67aec1d1de87f03ab6aae93940b17826fde1c (HEAD -&gt; master)<br>\nAuthor: Linuxtechi User <a href=\"mailto:linuxtechiuser@linuxtechi.com\">linuxtechiuser@linuxtechi.com</a><br>\nDate:   Fri Jul 27 21:54:55 2018 +0530</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>This is amended commit</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>If you observe above output carefully then we can see new commit message, its ID and new timestamp.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Remove untracked files<br>\nUntracked files are those which are unknown to Git. We can remove all untracked files using clean command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let us create few untracked files:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ touch delete-me-1 delete-me-2 delete-me-3<br>\nTo remove all above untracked file use clean command with -f option as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git clean -f<br>\nRemoving delete-me-1<br>\nRemoving delete-me-2<br>\nRemoving delete-me-3<br>\nPlease note that this command will remove files permanently hence use it with caution.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>View commits of particular author</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If we use log command then it shows commits of all authors. To view commits of particular author use –author flag as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git log --author=Linuxtechi<br>\nWhen you execute above command it will list all the commits of Linuxtechi authors as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>commit 8bf67aec1d1de87f03ab6aae93940b17826fde1c (HEAD -&gt; master)<br>\nAuthor: Linuxtechi User <a href=\"mailto:linuxtechiuser@linuxtechi.com\">linuxtechiuser@linuxtechi.com</a><br>\nDate:   Fri Jul 27 21:54:55 2018 +0530</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>This is amended commit</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>View history of each file line by line</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To view line by line history we can use blame command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git blame README<br>\nWhen you execute above command it will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>76294131 (Linuxtechi User         2018-07-27 21:12:11 -0700 1) Hello World!<br>\n8bf67aec (Linuxtechi User         2018-07-27 21:54:55 +0530 2) New changes<br>\n8bf67aec (Linuxtechi User         2018-07-27 21:54:55 +0530 3) Yet another changes<br>\nIn above command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First column indicates commit ID<br>\nSecond column indicates author<br>\nThird column indicates timestamps<br>\nLast column indicates line number and file content<br>\nView diff from staging area<br>\nWhen you create changeset using add command then file is logically moved to staging area. Let us see with this example:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ echo \"Let us demonstrate staging area\" &gt;&gt; README<br>\n$ git add README<br>\n$ git diff<br>\nAbove command will not show any difference as file is move to staging area. Let us use –staged operation to view differences:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$ git diff --staged<br>\ndiff --git a/README b/README<br>\nindex 74729a2..8bc5ffd 100644<br>\n--- a/README<br>\n+++ b/README<br>\n@@ -1,3 +1,4 @@<br>\n Hello World!<br>\n New changes<br>\n Yet another changes<br>\n+Let us demonstrate staging area</p>\n<!-- /wp:paragraph -->','Learn Git Command with Practical Examples on Linux – Part 1','','inherit','closed','closed','','108-revision-v1','','','2019-05-07 11:05:28','2019-05-07 11:05:28','',108,'http://192.168.1.181:8080/wordpress/index.php/2019/05/07/108-revision-v1/',0,'revision','',0),(110,1,'2019-05-07 11:09:38','2019-05-07 11:09:38','<!-- wp:paragraph -->\n<p> In this article we’ll be focusing on some advanced features like miscellaneous repository actions, branching and tagging. Like previous article this is also hands-on guide to Git. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Miscellaneous repository actions</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Rename</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As name suggests rename operation instructs Git that traced file has been modified. To rename file execute following command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git mv README NEW-README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Now let us check the repository status:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git status -s\nR&nbsp; README -&gt; NEW-README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above output letter&nbsp;<strong>R</strong>&nbsp;appears before README, which indicates file has been renamed. Next column shows the old and new file name.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>NOTE:</strong>&nbsp;To make these changes in remote repository execute git push command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Move</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Move operation is used to move file from one directory location to another. To move file execute following command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ mkdir new-dir\n$ git mv README new-dir/</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In this example, we have created new directory and move file to that directory. Now let us check the repository status:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git status -s\nR&nbsp; README -&gt; new-dir/README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Above output shows that file has been moved to new directory.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>NOTE:</strong>&nbsp;To make these changes in remote repository execute git push command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Delete</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As name suggests, delete operation removes file/directory from Git. To remove file execute following command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git rm README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Now let us check the repository status:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git status -s\n&nbsp;D README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above output letter D appears before the README which indicates that file has been removed from repository.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>NOTE:</strong>&nbsp;To make these changes in remote repository execute git push command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>RESET</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This operation reset current HEAD to the specified state. In Git, HEAD is the reference pointer which points to the latest commit.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let us understand this with example:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ touch AUTHORS\n$ git add AUTHORS\n$ git status -s\nA&nbsp; AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above example, we have created AUTHORS file and added it to changeset. Now this file will be part of next commit. Git reset command will adjust HEAD reference and remove file from changeset</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git reset HEAD AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Now, let us check the repository status:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git status -s\n?? AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>As expected, above output shows that file has been removed from changeset hence&nbsp;<strong>??</strong>&nbsp;symbol appears before filename.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Working with branches</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Branch in version control system is a independent line of development. Unlike other version control system branching is really lightweight in Git. In this section we’ll discuss various branch related features.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Create branch</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To create new branch execute following command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git branch my-feature-branch</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above command my-feature-branch is branch name. This command will create local branch.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To create remote branch execute git push command as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git push origin my-feature-branch</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>List branch</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To list branch execute branch command without any argument.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git branch\n* master\n&nbsp; my-feature-branch</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>For instance, above output lists local branches. Asterisk symbol represents current branch. In our case it is master branch.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To list local as well as remote branches execute following command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git branch -a\n* master\n&nbsp; my-feature-branch\n&nbsp; remotes/origin/HEAD -&gt; origin/master\n&nbsp; remotes/origin/master</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above output, branches highlighted in red colour are remote branches.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Delete branch</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To delete local branch use -d option as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git branch -d my-feature-branch</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Deleted branch my-feature-branch (was 220bf4d).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To delete remote branch execute following command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git push origin :my-feature-branch</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Note that we have use colon(:) with branch name which instructs git to delete remote branch</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Switch branch</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To switch in between branches execute checkout command as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git checkout my-feature-branch</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Switched to branch ‘my-feature-branch’</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now let us check the current branch:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git branch\n&nbsp; master\n* my-feature-branch</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>Checkout branch</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So far we have used separate command to create and switch to branch. However, we can achieve this is single command as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git checkout -b my-feature-branch</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Switched to a new branch ‘my-feature-branch’</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now let us check the current branch:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git branch\n&nbsp; master\n* my-feature-branch</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Restore working tree</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Git allows us to discard uncommitted changes. We can achieve this using checkout command.&nbsp; Let us understand this with example.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First modify existing file and check repository status:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ echo \"Update README\" &gt;&gt; README\n$ git status -s\n&nbsp;M README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Now to discard changes of README file, execute following command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git checkout -- README\n$ git status -s</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>As expected our working tree is clean hence last command is not showing any output.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Merge branch</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As name suggests merge operation applies changes from one branch to another. Let us understand this step by step.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First create a new branch and commit changes in this branch:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git checkout -b my-feature-branch</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Switched to a new branch ‘my-feature-branch’</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ echo \"Update README\" &gt;&gt; README.md\n$ git add README.md\n$ git commit -m \"Updated README\"\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:shortcode -->\n[my-feature-branch 42e28aa]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p> Updated README\n&nbsp;1 file changed, 1 insertion(+)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let us switch to master branch and apply changes to master branch</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git checkout master</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Switched to branch ‘master’</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Your branch is up to date with ‘origin/master’.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git merge my-feature-branch\nUpdating 220bf4d..42e28aa\nFast-forward\n&nbsp;README.md | 1 +\n&nbsp;1 file changed, 1 insertion(+)</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Now let us verify that changes are applied to master branch:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git log -1 --oneline\n42e28aa (HEAD -&gt; master, my-feature-branch) Updated README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Working with tags</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Tag is a reference pointer to a particular commit in Git history. Often tag is used to mark release version of product. In this section we’ll discuss basic tag operations like create, list and delete</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Create tag</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Creating tag is really simple. To create tag execute following command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git tag my-tag</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Above command will create tag with name&nbsp; my-tag. To create tag in remote repository execute push command as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git push origin my-tag</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>List tag</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To list tag execute Git tag command without any argument as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git tag\nmy-tag</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>Delete tag</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To delete tag execute Git tag command with -d argument as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git tag -d my-tag\nDeleted tag \'my-tag\' (was 220bf4d)</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>To delete tag from remote repository execute following command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git push origin :my-tag</pre>\n<!-- /wp:preformatted -->','Learn Git Command with Practical Examples on Linux – Part 2','','publish','open','open','','learn-git-command-with-practical-examples-on-linux-part-2','','','2019-05-07 11:09:38','2019-05-07 11:09:38','',0,'http://192.168.1.181:8080/wordpress/?p=110',0,'post','',0),(111,1,'2019-05-07 11:09:38','2019-05-07 11:09:38','<!-- wp:paragraph -->\n<p> In this article we’ll be focusing on some advanced features like miscellaneous repository actions, branching and tagging. Like previous article this is also hands-on guide to Git. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Miscellaneous repository actions</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Rename</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As name suggests rename operation instructs Git that traced file has been modified. To rename file execute following command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git mv README NEW-README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Now let us check the repository status:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git status -s\nR&nbsp; README -&gt; NEW-README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above output letter&nbsp;<strong>R</strong>&nbsp;appears before README, which indicates file has been renamed. Next column shows the old and new file name.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>NOTE:</strong>&nbsp;To make these changes in remote repository execute git push command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Move</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Move operation is used to move file from one directory location to another. To move file execute following command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ mkdir new-dir\n$ git mv README new-dir/</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In this example, we have created new directory and move file to that directory. Now let us check the repository status:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git status -s\nR&nbsp; README -&gt; new-dir/README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Above output shows that file has been moved to new directory.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>NOTE:</strong>&nbsp;To make these changes in remote repository execute git push command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Delete</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As name suggests, delete operation removes file/directory from Git. To remove file execute following command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git rm README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Now let us check the repository status:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git status -s\n&nbsp;D README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above output letter D appears before the README which indicates that file has been removed from repository.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>NOTE:</strong>&nbsp;To make these changes in remote repository execute git push command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>RESET</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This operation reset current HEAD to the specified state. In Git, HEAD is the reference pointer which points to the latest commit.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let us understand this with example:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ touch AUTHORS\n$ git add AUTHORS\n$ git status -s\nA&nbsp; AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above example, we have created AUTHORS file and added it to changeset. Now this file will be part of next commit. Git reset command will adjust HEAD reference and remove file from changeset</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git reset HEAD AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Now, let us check the repository status:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git status -s\n?? AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>As expected, above output shows that file has been removed from changeset hence&nbsp;<strong>??</strong>&nbsp;symbol appears before filename.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Working with branches</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Branch in version control system is a independent line of development. Unlike other version control system branching is really lightweight in Git. In this section we’ll discuss various branch related features.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Create branch</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To create new branch execute following command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git branch my-feature-branch</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above command my-feature-branch is branch name. This command will create local branch.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To create remote branch execute git push command as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git push origin my-feature-branch</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>List branch</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To list branch execute branch command without any argument.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git branch\n* master\n&nbsp; my-feature-branch</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>For instance, above output lists local branches. Asterisk symbol represents current branch. In our case it is master branch.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To list local as well as remote branches execute following command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git branch -a\n* master\n&nbsp; my-feature-branch\n&nbsp; remotes/origin/HEAD -&gt; origin/master\n&nbsp; remotes/origin/master</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above output, branches highlighted in red colour are remote branches.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Delete branch</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To delete local branch use -d option as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git branch -d my-feature-branch</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Deleted branch my-feature-branch (was 220bf4d).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To delete remote branch execute following command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git push origin :my-feature-branch</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Note that we have use colon(:) with branch name which instructs git to delete remote branch</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Switch branch</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To switch in between branches execute checkout command as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git checkout my-feature-branch</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Switched to branch ‘my-feature-branch’</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now let us check the current branch:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git branch\n&nbsp; master\n* my-feature-branch</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>Checkout branch</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So far we have used separate command to create and switch to branch. However, we can achieve this is single command as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git checkout -b my-feature-branch</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Switched to a new branch ‘my-feature-branch’</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now let us check the current branch:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git branch\n&nbsp; master\n* my-feature-branch</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Restore working tree</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Git allows us to discard uncommitted changes. We can achieve this using checkout command.&nbsp; Let us understand this with example.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First modify existing file and check repository status:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ echo \"Update README\" &gt;&gt; README\n$ git status -s\n&nbsp;M README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Now to discard changes of README file, execute following command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git checkout -- README\n$ git status -s</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>As expected our working tree is clean hence last command is not showing any output.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Merge branch</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As name suggests merge operation applies changes from one branch to another. Let us understand this step by step.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First create a new branch and commit changes in this branch:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git checkout -b my-feature-branch</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Switched to a new branch ‘my-feature-branch’</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ echo \"Update README\" &gt;&gt; README.md\n$ git add README.md\n$ git commit -m \"Updated README\"\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:shortcode -->\n[my-feature-branch 42e28aa]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p> Updated README\n&nbsp;1 file changed, 1 insertion(+)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let us switch to master branch and apply changes to master branch</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git checkout master</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Switched to branch ‘master’</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Your branch is up to date with ‘origin/master’.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git merge my-feature-branch\nUpdating 220bf4d..42e28aa\nFast-forward\n&nbsp;README.md | 1 +\n&nbsp;1 file changed, 1 insertion(+)</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Now let us verify that changes are applied to master branch:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git log -1 --oneline\n42e28aa (HEAD -&gt; master, my-feature-branch) Updated README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Working with tags</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Tag is a reference pointer to a particular commit in Git history. Often tag is used to mark release version of product. In this section we’ll discuss basic tag operations like create, list and delete</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Create tag</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Creating tag is really simple. To create tag execute following command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git tag my-tag</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Above command will create tag with name&nbsp; my-tag. To create tag in remote repository execute push command as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git push origin my-tag</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>List tag</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To list tag execute Git tag command without any argument as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git tag\nmy-tag</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>Delete tag</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To delete tag execute Git tag command with -d argument as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git tag -d my-tag\nDeleted tag \'my-tag\' (was 220bf4d)</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>To delete tag from remote repository execute following command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git push origin :my-tag</pre>\n<!-- /wp:preformatted -->','Learn Git Command with Practical Examples on Linux – Part 2','','inherit','closed','closed','','110-revision-v1','','','2019-05-07 11:09:38','2019-05-07 11:09:38','',110,'http://192.168.1.181:8080/wordpress/index.php/2019/05/07/110-revision-v1/',0,'revision','',0),(112,1,'2019-05-07 11:13:12','2019-05-07 11:13:12','<!-- wp:paragraph -->\n<p> Git is distributed version control system. It is primarily used by software developers for their source code management. Git is free and open source software and many large organizations use it to manage their huge code base. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In this tutorial we’ll get familiar with Git. This will be hands on guide. This tutorial assumes that Git is installed on your system.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<figure><iframe width=\"803\" height=\"200\" allowfullscreen=\"true\"></iframe></figure>\n<!-- /wp:html -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Git user initial configuration</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>First we have to configure settings for Git user. We can make these settings for all repositories present on current system or for a particular repository. Let us understand this with example:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>User identity</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In Git we can specify user identity by providing its name and e-mail address. This information will be used during each commit operation. Execute below command in terminal to assign identity:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git config --global user.name \"Linuxtechi User\"\n$ git config --global user.email \"linuxtechiuser@linuxtechi.com\"</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Editor</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This setting configures editor, which will be used while providing commit message:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git config --global core.editor vim</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Compression</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This setting configures compression level to be used. Valid range for compression is -1 to 9. -1 value indicates zlib compression and is default compression level. 0 value means no compression, and 1 to 9 are various speed/size tradeoffs, 9 being slowest.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git config --global core.compression 2</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Diff tool</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This setting configures diff viewer tool. For example, below command configures vimdiff as a diff tool:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git config --global diff.tool vimdiff</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above commands we have used&nbsp;<strong>–global</strong>&nbsp;option everywhere, which will make this configuration global. It means that same configuration will be applied to all repositories present on current system. To make configuration repository specific just remove –global option.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>List configuration</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To list Git configuration execute below command in terminal:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git config -l</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>This command will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">core.repositoryformatversion=0\ncore.filemode=true\ncore.bare=false\ncore.logallrefupdates=true\ncore.editor=vim\ncore.compression=2\nuser.name=Linuxtechi User\nuser.email=linuxtechiuser@linuxtechi.com\ndiff.tool=vimdiff</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Git repositories</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Repository is a location where source code is stored. We can either create new repository or use existing repository. To create new empty repository execute below command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ mkdir my-repo.git\n$ cd my-repo.git\n$ git init --bare\nInitialized empty Git repository in my-repo.git</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>This method will be useful when you are starting with new project. Another method is to use existing repository. Such a repository is hosted on remote server like GitHub. To download remote repository use clone command as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git clone https://github.com/linuxtechiuser/my-repo.git</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above command last argument is path of remote repository.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Git workflow</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In this section we’ll discuss git workflow.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Introduce new changes</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First step is to introduce new changes. It can be addition of new file or updating existing files. Let us create a new file and modify existing file</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ touch AUTHORS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Create new file\n$ echo \"New Contents\" &gt;&gt; README&nbsp;&nbsp;              &nbsp; # Update existing file</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Check repository status</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Git is content tracking system, it will identify above two changes. Let us check repository status:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git status -s\n&nbsp;M README\n?? AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above output letter M appears before README which indicates that existing file is modified. Whereas ?? appears before AUTHORS which indicates that this is new file and Git is not aware about it hence such a file is called untracked file.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Add file to changeset</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let us instruct Git to track this new file. We can achieve this using add command. This operation will start tracking changes made to this file.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git add AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Let us check repository status now:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git status -s\nA &nbsp;AUTHORS\nM README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Above output shows A before AUTHORS which indicates that this file is newly added under Git. We can add any number of files using this command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Remove file from changeset</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let us instruct Git to untrack this newly added file. We can achieve this using reset command. This operation will remove file from changeset</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git reset AUTHORS\n$ git status -s\n&nbsp;M README\n?? AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Above output shows that AUTHORS file is not tracked by Git.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Commit changes</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In Git, files which are part of changeset will form a commit. Each commit will get unique ID. Let us create changeset first</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git add AUTHORS\n$ git add README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Now let us commit changes to local repository with commit message. In below command -m argument indicates commit message.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git commit -m \"Updated README and added AUTHORS\"</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>When you execute above command it will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">[master 0b124eb] Updated README and added AUTHORS\n&nbsp;2 files changed, 1 insertion(+)\n&nbsp;create mode 100644 AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Review changes</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In this section we’ll discuss commands which will allow us to review repository changes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>View commit log</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Repository can contain multiple commits by multiple authors. We can use log command to view all available commits:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git log</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>When you execute above command it will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">commit 0b124eb6d0109d837f6f9396c9937406abd3f456 (HEAD -&gt; master)\nAuthor: Linuxtechi User &lt;linuxtechiuser@linuxtechi.com&gt;\nDate:&nbsp;&nbsp; Fri Jul 27 21:06:55 2018 +0530\n\n&nbsp;&nbsp;&nbsp; Updated README and added AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>This is commit we had created earlier. In above command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Hexadecimal ID represents a commit ID</li><li>Author section of commit shows details about who made these changes</li><li>Date section shows date and timestamp of commit</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>View short commit log</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Above command will show detailed information about each commit. To view short description about each commit use –oneline option as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git log --oneline</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>When you execute above command, it will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">0b124eb (HEAD -&gt; master) Updated README and added AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>View commit</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Commit ID is associated with each changeset. We can use this ID with show command to view commit contents.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git show 0b124eb6d0109d837f6f9396c9937406abd3f456</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>When you execute above command it will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">commit 0b124eb6d0109d837f6f9396c9937406abd3f456 (HEAD -&gt; master)\nAuthor: Linuxtechi User &lt;linuxtechiuser@linuxtechi.com&gt;\nDate:&nbsp;&nbsp; Fri Jul 27 21:06:55 2018 +0530\n&nbsp;&nbsp;&nbsp; Updated README and added AUTHORS\ndiff --git a/AUTHORS b/AUTHORS\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/README b/README\nindex 980a0d5..5680123 100644\n--- a/README\n+++ b/README\n@@ -1 +1,2 @@\n&nbsp;Hello World!\n+New Contents</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>View diff</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Diff command allows us to review changes before creating changeset. Diff command shows the differences between repository and local workspace. Let us modify README file and view differences</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ echo \"Generating diff\" &gt;&gt; README\n$ git diff\ndiff --git a/README b/README\nindex 5680123..3158230 100644\n--- a/README\n+++ b/README\n@@ -1,2 +1,3 @@\n&nbsp;Hello World!\n&nbsp;New Contents\n+Generating diff</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>+ sign indicates changes which are added to file</li><li>– sign indicates changes which are removed from file</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Working with remote repositories</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>So far we were working with local repository only. Other developers cannot use changes which are made by us as they are local. Hence code collaboration is not possible. This section will describe commands which will allow us to interact with remote repositories</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Publish changes to remote repository</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We can publish local changes to remote repository so that other developers can use it. Before publishing changes we have to create changeset and local commit. We can publish changes using push command as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git push</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>This command copies changes from local workspace to remote repository. In Git, this operation is referred as push operation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Sync workspace with remote repository</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Many developers can publish their workspace changes to remote repository. Git allows us to download those changes and sync workspace with repository. We can achieve this using pull command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git pull</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In Git, this operation is referred as pull operation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Miscellaneous Git commands</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This section discusses miscellaneous Git commands which will be useful to perform day-to-day tasks:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Modify latest commit</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Git allows us to modify latest commit. We can use this method to avoid creation of new commit. It is mostly used to modify previous commit message. To modify latest commit use&nbsp;<strong>–amend</strong>&nbsp;option as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ echo \"Yet another new change\" &gt;&gt; README\n$ git add README\n$ git commit --amend -m \"This is amended commit</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Now let us check the commit log:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git log\ncommit 8bf67aec1d1de87f03ab6aae93940b17826fde1c (HEAD -&gt; master)\nAuthor: Linuxtechi User &lt;linuxtechiuser@linuxtechi.com&gt;\nDate:&nbsp;&nbsp; Fri Jul 27 21:54:55 2018 +0530\n\n&nbsp;&nbsp;&nbsp; This is amended commit</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>If you observe above output carefully then we can see new commit message, its ID and new timestamp.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Remove untracked files</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Untracked files are those which are unknown to Git. We can remove all untracked files using clean command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let us create few untracked files:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ touch delete-me-1 delete-me-2 delete-me-3</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>To remove all above untracked file use clean command with&nbsp;<strong>-f</strong>&nbsp;option as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git clean -f\nRemoving delete-me-1\nRemoving delete-me-2\nRemoving delete-me-3</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Please note that this command will remove files permanently hence use it with caution.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>View commits of particular author</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If we use log command then it shows commits of all authors. To view commits of particular author use –author flag as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git log --author=Linuxtechi</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>When you execute above command it will list all the commits of Linuxtechi authors as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">commit 8bf67aec1d1de87f03ab6aae93940b17826fde1c (HEAD -&gt; master)\nAuthor: Linuxtechi User &lt;linuxtechiuser@linuxtechi.com&gt;\nDate:&nbsp;&nbsp; Fri Jul 27 21:54:55 2018 +0530\n\n&nbsp;&nbsp;&nbsp; This is amended commit</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>View history of each file line by line</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To view line by line history we can use blame command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git blame README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>When you execute above command it will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">76294131 (Linuxtechi User&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2018-07-27 21:12:11 -0700 1) Hello World!\n8bf67aec (Linuxtechi User&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2018-07-27 21:54:55 +0530 2) New changes\n8bf67aec (Linuxtechi User&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2018-07-27 21:54:55 +0530 3) Yet another changes</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>First column indicates commit ID</li><li>Second column indicates author</li><li>Third column indicates timestamps</li><li>Last column indicates line number and file content</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>View diff from staging area</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When you create changeset using add command then file is logically moved to staging area. Let us see with this example:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ echo \"Let us demonstrate staging area\" &gt;&gt; README\n$ git add README\n$ git diff</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Above command will not show any difference as file is move to staging area. Let us use –staged operation to view differences:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git diff --staged\ndiff --git a/README b/README\nindex 74729a2..8bc5ffd 100644\n--- a/README\n+++ b/README\n@@ -1,3 +1,4 @@\n&nbsp;Hello World!\n&nbsp;New changes\n&nbsp;Yet another changes\n+Let us demonstrate staging area</pre>\n<!-- /wp:preformatted -->','Learn Git Command with Practical Examples on Linux – Part 1','','inherit','closed','closed','','108-revision-v1','','','2019-05-07 11:13:12','2019-05-07 11:13:12','',108,'http://192.168.1.181:8080/wordpress/index.php/2019/05/07/108-revision-v1/',0,'revision','',0),(113,1,'2019-05-07 11:14:30','2019-05-07 11:14:30','<!-- wp:paragraph -->\n<p> Git is distributed version control system. It is primarily used by software developers for their source code management. Git is free and open source software and many large organizations use it to manage their huge code base. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In this tutorial we’ll get familiar with Git. This will be hands on guide. This tutorial assumes that Git is installed on your system.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Git user initial configuration</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>First we have to configure settings for Git user. We can make these settings for all repositories present on current system or for a particular repository. Let us understand this with example:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>User identity</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In Git we can specify user identity by providing its name and e-mail address. This information will be used during each commit operation. Execute below command in terminal to assign identity:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git config --global user.name \"Linuxtechi User\"\n$ git config --global user.email \"linuxtechiuser@linuxtechi.com\"</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Editor</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This setting configures editor, which will be used while providing commit message:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git config --global core.editor vim</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Compression</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This setting configures compression level to be used. Valid range for compression is -1 to 9. -1 value indicates zlib compression and is default compression level. 0 value means no compression, and 1 to 9 are various speed/size tradeoffs, 9 being slowest.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git config --global core.compression 2</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Diff tool</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This setting configures diff viewer tool. For example, below command configures vimdiff as a diff tool:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git config --global diff.tool vimdiff</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above commands we have used&nbsp;<strong>–global</strong>&nbsp;option everywhere, which will make this configuration global. It means that same configuration will be applied to all repositories present on current system. To make configuration repository specific just remove –global option.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>List configuration</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To list Git configuration execute below command in terminal:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git config -l</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>This command will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">core.repositoryformatversion=0\ncore.filemode=true\ncore.bare=false\ncore.logallrefupdates=true\ncore.editor=vim\ncore.compression=2\nuser.name=Linuxtechi User\nuser.email=linuxtechiuser@linuxtechi.com\ndiff.tool=vimdiff</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Git repositories</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Repository is a location where source code is stored. We can either create new repository or use existing repository. To create new empty repository execute below command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ mkdir my-repo.git\n$ cd my-repo.git\n$ git init --bare\nInitialized empty Git repository in my-repo.git</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>This method will be useful when you are starting with new project. Another method is to use existing repository. Such a repository is hosted on remote server like GitHub. To download remote repository use clone command as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git clone https://github.com/linuxtechiuser/my-repo.git</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above command last argument is path of remote repository.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Git workflow</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In this section we’ll discuss git workflow.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Introduce new changes</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First step is to introduce new changes. It can be addition of new file or updating existing files. Let us create a new file and modify existing file</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ touch AUTHORS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Create new file\n$ echo \"New Contents\" &gt;&gt; README&nbsp;&nbsp;              &nbsp; # Update existing file</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Check repository status</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Git is content tracking system, it will identify above two changes. Let us check repository status:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git status -s\n&nbsp;M README\n?? AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above output letter M appears before README which indicates that existing file is modified. Whereas ?? appears before AUTHORS which indicates that this is new file and Git is not aware about it hence such a file is called untracked file.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Add file to changeset</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let us instruct Git to track this new file. We can achieve this using add command. This operation will start tracking changes made to this file.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git add AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Let us check repository status now:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git status -s\nA &nbsp;AUTHORS\nM README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Above output shows A before AUTHORS which indicates that this file is newly added under Git. We can add any number of files using this command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Remove file from changeset</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let us instruct Git to untrack this newly added file. We can achieve this using reset command. This operation will remove file from changeset</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git reset AUTHORS\n$ git status -s\n&nbsp;M README\n?? AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Above output shows that AUTHORS file is not tracked by Git.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Commit changes</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In Git, files which are part of changeset will form a commit. Each commit will get unique ID. Let us create changeset first</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git add AUTHORS\n$ git add README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Now let us commit changes to local repository with commit message. In below command -m argument indicates commit message.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git commit -m \"Updated README and added AUTHORS\"</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>When you execute above command it will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">[master 0b124eb] Updated README and added AUTHORS\n&nbsp;2 files changed, 1 insertion(+)\n&nbsp;create mode 100644 AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Review changes</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In this section we’ll discuss commands which will allow us to review repository changes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>View commit log</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Repository can contain multiple commits by multiple authors. We can use log command to view all available commits:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git log</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>When you execute above command it will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">commit 0b124eb6d0109d837f6f9396c9937406abd3f456 (HEAD -&gt; master)\nAuthor: Linuxtechi User &lt;linuxtechiuser@linuxtechi.com&gt;\nDate:&nbsp;&nbsp; Fri Jul 27 21:06:55 2018 +0530\n\n&nbsp;&nbsp;&nbsp; Updated README and added AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>This is commit we had created earlier. In above command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Hexadecimal ID represents a commit ID</li><li>Author section of commit shows details about who made these changes</li><li>Date section shows date and timestamp of commit</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>View short commit log</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Above command will show detailed information about each commit. To view short description about each commit use –oneline option as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git log --oneline</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>When you execute above command, it will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">0b124eb (HEAD -&gt; master) Updated README and added AUTHORS</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>View commit</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Commit ID is associated with each changeset. We can use this ID with show command to view commit contents.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git show 0b124eb6d0109d837f6f9396c9937406abd3f456</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>When you execute above command it will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">commit 0b124eb6d0109d837f6f9396c9937406abd3f456 (HEAD -&gt; master)\nAuthor: Linuxtechi User &lt;linuxtechiuser@linuxtechi.com&gt;\nDate:&nbsp;&nbsp; Fri Jul 27 21:06:55 2018 +0530\n&nbsp;&nbsp;&nbsp; Updated README and added AUTHORS\ndiff --git a/AUTHORS b/AUTHORS\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/README b/README\nindex 980a0d5..5680123 100644\n--- a/README\n+++ b/README\n@@ -1 +1,2 @@\n&nbsp;Hello World!\n+New Contents</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>View diff</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Diff command allows us to review changes before creating changeset. Diff command shows the differences between repository and local workspace. Let us modify README file and view differences</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ echo \"Generating diff\" &gt;&gt; README\n$ git diff\ndiff --git a/README b/README\nindex 5680123..3158230 100644\n--- a/README\n+++ b/README\n@@ -1,2 +1,3 @@\n&nbsp;Hello World!\n&nbsp;New Contents\n+Generating diff</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>+ sign indicates changes which are added to file</li><li>– sign indicates changes which are removed from file</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Working with remote repositories</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>So far we were working with local repository only. Other developers cannot use changes which are made by us as they are local. Hence code collaboration is not possible. This section will describe commands which will allow us to interact with remote repositories</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Publish changes to remote repository</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We can publish local changes to remote repository so that other developers can use it. Before publishing changes we have to create changeset and local commit. We can publish changes using push command as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git push</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>This command copies changes from local workspace to remote repository. In Git, this operation is referred as push operation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Sync workspace with remote repository</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Many developers can publish their workspace changes to remote repository. Git allows us to download those changes and sync workspace with repository. We can achieve this using pull command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git pull</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In Git, this operation is referred as pull operation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Miscellaneous Git commands</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This section discusses miscellaneous Git commands which will be useful to perform day-to-day tasks:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Modify latest commit</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Git allows us to modify latest commit. We can use this method to avoid creation of new commit. It is mostly used to modify previous commit message. To modify latest commit use&nbsp;<strong>–amend</strong>&nbsp;option as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ echo \"Yet another new change\" &gt;&gt; README\n$ git add README\n$ git commit --amend -m \"This is amended commit</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Now let us check the commit log:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git log\ncommit 8bf67aec1d1de87f03ab6aae93940b17826fde1c (HEAD -&gt; master)\nAuthor: Linuxtechi User &lt;linuxtechiuser@linuxtechi.com&gt;\nDate:&nbsp;&nbsp; Fri Jul 27 21:54:55 2018 +0530\n\n&nbsp;&nbsp;&nbsp; This is amended commit</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>If you observe above output carefully then we can see new commit message, its ID and new timestamp.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Remove untracked files</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Untracked files are those which are unknown to Git. We can remove all untracked files using clean command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let us create few untracked files:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ touch delete-me-1 delete-me-2 delete-me-3</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>To remove all above untracked file use clean command with&nbsp;<strong>-f</strong>&nbsp;option as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git clean -f\nRemoving delete-me-1\nRemoving delete-me-2\nRemoving delete-me-3</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Please note that this command will remove files permanently hence use it with caution.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>View commits of particular author</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If we use log command then it shows commits of all authors. To view commits of particular author use –author flag as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git log --author=Linuxtechi</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>When you execute above command it will list all the commits of Linuxtechi authors as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">commit 8bf67aec1d1de87f03ab6aae93940b17826fde1c (HEAD -&gt; master)\nAuthor: Linuxtechi User &lt;linuxtechiuser@linuxtechi.com&gt;\nDate:&nbsp;&nbsp; Fri Jul 27 21:54:55 2018 +0530\n\n&nbsp;&nbsp;&nbsp; This is amended commit</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>View history of each file line by line</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To view line by line history we can use blame command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git blame README</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>When you execute above command it will generate following output:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">76294131 (Linuxtechi User&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2018-07-27 21:12:11 -0700 1) Hello World!\n8bf67aec (Linuxtechi User&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2018-07-27 21:54:55 +0530 2) New changes\n8bf67aec (Linuxtechi User&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2018-07-27 21:54:55 +0530 3) Yet another changes</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In above command:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>First column indicates commit ID</li><li>Second column indicates author</li><li>Third column indicates timestamps</li><li>Last column indicates line number and file content</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>View diff from staging area</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When you create changeset using add command then file is logically moved to staging area. Let us see with this example:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ echo \"Let us demonstrate staging area\" &gt;&gt; README\n$ git add README\n$ git diff</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Above command will not show any difference as file is move to staging area. Let us use –staged operation to view differences:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ git diff --staged\ndiff --git a/README b/README\nindex 74729a2..8bc5ffd 100644\n--- a/README\n+++ b/README\n@@ -1,3 +1,4 @@\n&nbsp;Hello World!\n&nbsp;New changes\n&nbsp;Yet another changes\n+Let us demonstrate staging area</pre>\n<!-- /wp:preformatted -->','Learn Git Command with Practical Examples on Linux – Part 1','','inherit','closed','closed','','108-revision-v1','','','2019-05-07 11:14:30','2019-05-07 11:14:30','',108,'http://192.168.1.181:8080/wordpress/index.php/2019/05/07/108-revision-v1/',0,'revision','',0),(116,1,'2019-05-08 06:10:00','2019-05-08 06:10:00','<!-- wp:paragraph -->\n<p>As&nbsp;<strong>Docker</strong>&nbsp;usage and adoption is growing faster and faster, monitoring&nbsp;<strong>Docker container</strong>&nbsp;images is becoming more challenging. As multiple Docker container images are getting created day-by-day, monitoring them is very important. There are already some in built tools and technologies, but configuring them is little complex. As micro-services based architecture is becoming the de-facto standard in coming days, learning such tool adds one more arsenal to your tool-set.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Based on the above scenarios, there was in need of one light weight and robust tool requirement was growing. So Portainer.io addressed this. “<strong>Portainer.io</strong>“,(Latest version is 1.20.2) the tool is very light weight(with 2-3 commands only one can configure it) and has become popular among Docker users.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Light weight (requires only 2-3 commands to be required to run to install this tool) {Also installation image is only around 26-30MB of size)</li><li>Robust and easy to use</li><li>Can be used for Docker monitor and Build</li><li>This tool provides us a detailed overview of your Docker environments</li><li>This tool allows us to manage your containers, images, networks and volumes.</li><li>Portainer is simple to deploy – this requires just one Docker command (can be run from anywhere.)</li><li>Complete Docker-container environment can be monitored easily</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Portainer is also equipped with</strong>,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Community support</li><li>Enterprise support</li><li>Has professional services available(along with partner OEM services)</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Functionality and features of Portainer tool are,</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>It comes-up with nice Dashboard, easy to use and monitor.</li><li>Many in-built templates for ease of operation and creation</li><li>Support of services (OEM, Enterprise level)</li><li>Monitoring of Containers, Images, Networks, Volume and configuration at almost real-time.</li><li>Also includes Docker-Swarm monitoring</li><li>User management with many fancy capabilities</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Read Also :&nbsp;<a href=\"https://www.linuxtechi.com/how-to-setup-docker-on-ubuntu-server-16-04/\" target=\"_blank\" rel=\"noreferrer noopener\">How to Install Docker CE on Ubuntu 16.04 / 18.04 LTS System</a></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>How to install and configure Portainer.io on Ubuntu Linux / RHEL / CentOS&nbsp;</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:&nbsp;</strong>This installation is done on Ubuntu 18.04 but the installation on RHEL &amp; CentOS would be same. We are assuming Docker CE is already installed on your system.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">shashi@linuxtechi:~$ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:&nbsp;&nbsp;&nbsp; Ubuntu 18.04 LTS\nRelease:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 18.04\nCodename:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bionic\nshashi@linuxtechi:~$</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Create the Volume for portainer</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">shashi@linuxtechi:~$ sudo docker volume create portainer_data\nportainer_data\nshashi@linuxtechi:~$</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Launch and start Portainer Container using the beneath docker command,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">shashi@linuxtechi:~$ sudo docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer\nUnable to find image \'portainer/portainer:latest\' locally\nlatest: Pulling from portainer/portainer\nd1e017099d17: Pull complete\n0b1e707a06d2: Pull complete\nDigest: sha256:d6cc2c20c0af38d8d557ab994c419c799a10fe825e4aa57fea2e2e507a13747d\nStatus: Downloaded newer image for portainer/portainer:latest\n35286de9f2e21d197309575bb52b5599fec24d4f373cc27210d98abc60244107\nshashi@linuxtechi:~$</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Once the complete installation is done, use the ip of host or Docker using port 9000 of the Docker engine where portainer is running using your browser.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:</strong>&nbsp;If OS firewall is enabled on your Docker host then make sure 9000 port is allowed else its GUI will not come up.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In my case, IP address of my Docker Host / Engine is “192.168.1.16” so URL will be,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:embed {\"url\":\"http://192.168.1.16:9000\"} -->\n<figure class=\"wp-block-embed\"><div class=\"wp-block-embed__wrapper\">\nhttp://192.168.1.16:9000\n</div></figure>\n<!-- /wp:embed -->','Monitor and Manage Docker Containers with Portainer.io (GUI tool) – Part-1','','publish','open','open','','monitor-and-manage-docker-containers-with-portainer-io-gui-tool-part-1','','','2019-05-08 06:10:00','2019-05-08 06:10:00','',0,'http://192.168.1.181:8080/wordpress/?p=116',0,'post','',0),(117,1,'2019-05-08 06:10:00','2019-05-08 06:10:00','<!-- wp:paragraph -->\n<p>As&nbsp;<strong>Docker</strong>&nbsp;usage and adoption is growing faster and faster, monitoring&nbsp;<strong>Docker container</strong>&nbsp;images is becoming more challenging. As multiple Docker container images are getting created day-by-day, monitoring them is very important. There are already some in built tools and technologies, but configuring them is little complex. As micro-services based architecture is becoming the de-facto standard in coming days, learning such tool adds one more arsenal to your tool-set.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Based on the above scenarios, there was in need of one light weight and robust tool requirement was growing. So Portainer.io addressed this. “<strong>Portainer.io</strong>“,(Latest version is 1.20.2) the tool is very light weight(with 2-3 commands only one can configure it) and has become popular among Docker users.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Light weight (requires only 2-3 commands to be required to run to install this tool) {Also installation image is only around 26-30MB of size)</li><li>Robust and easy to use</li><li>Can be used for Docker monitor and Build</li><li>This tool provides us a detailed overview of your Docker environments</li><li>This tool allows us to manage your containers, images, networks and volumes.</li><li>Portainer is simple to deploy – this requires just one Docker command (can be run from anywhere.)</li><li>Complete Docker-container environment can be monitored easily</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Portainer is also equipped with</strong>,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Community support</li><li>Enterprise support</li><li>Has professional services available(along with partner OEM services)</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Functionality and features of Portainer tool are,</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>It comes-up with nice Dashboard, easy to use and monitor.</li><li>Many in-built templates for ease of operation and creation</li><li>Support of services (OEM, Enterprise level)</li><li>Monitoring of Containers, Images, Networks, Volume and configuration at almost real-time.</li><li>Also includes Docker-Swarm monitoring</li><li>User management with many fancy capabilities</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Read Also :&nbsp;<a href=\"https://www.linuxtechi.com/how-to-setup-docker-on-ubuntu-server-16-04/\" target=\"_blank\" rel=\"noreferrer noopener\">How to Install Docker CE on Ubuntu 16.04 / 18.04 LTS System</a></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>How to install and configure Portainer.io on Ubuntu Linux / RHEL / CentOS&nbsp;</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:&nbsp;</strong>This installation is done on Ubuntu 18.04 but the installation on RHEL &amp; CentOS would be same. We are assuming Docker CE is already installed on your system.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">shashi@linuxtechi:~$ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:&nbsp;&nbsp;&nbsp; Ubuntu 18.04 LTS\nRelease:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 18.04\nCodename:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bionic\nshashi@linuxtechi:~$</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Create the Volume for portainer</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">shashi@linuxtechi:~$ sudo docker volume create portainer_data\nportainer_data\nshashi@linuxtechi:~$</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Launch and start Portainer Container using the beneath docker command,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">shashi@linuxtechi:~$ sudo docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer\nUnable to find image \'portainer/portainer:latest\' locally\nlatest: Pulling from portainer/portainer\nd1e017099d17: Pull complete\n0b1e707a06d2: Pull complete\nDigest: sha256:d6cc2c20c0af38d8d557ab994c419c799a10fe825e4aa57fea2e2e507a13747d\nStatus: Downloaded newer image for portainer/portainer:latest\n35286de9f2e21d197309575bb52b5599fec24d4f373cc27210d98abc60244107\nshashi@linuxtechi:~$</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Once the complete installation is done, use the ip of host or Docker using port 9000 of the Docker engine where portainer is running using your browser.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:</strong>&nbsp;If OS firewall is enabled on your Docker host then make sure 9000 port is allowed else its GUI will not come up.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In my case, IP address of my Docker Host / Engine is “192.168.1.16” so URL will be,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:embed {\"url\":\"http://192.168.1.16:9000\"} -->\n<figure class=\"wp-block-embed\"><div class=\"wp-block-embed__wrapper\">\nhttp://192.168.1.16:9000\n</div></figure>\n<!-- /wp:embed -->','Monitor and Manage Docker Containers with Portainer.io (GUI tool) – Part-1','','inherit','closed','closed','','116-revision-v1','','','2019-05-08 06:10:00','2019-05-08 06:10:00','',116,'http://192.168.1.181:8080/wordpress/index.php/2019/05/08/116-revision-v1/',0,'revision','',0),(118,1,'2019-05-20 06:21:49','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2019-05-20 06:21:49','0000-00-00 00:00:00','',0,'http://192.168.1.181:8080/wordpress/?p=118',0,'post','',0),(119,1,'2019-05-20 06:37:24','2019-05-20 06:37:24','<!-- wp:paragraph -->\n<p>CI or Continuous integration is being adopted at a very high pace to streamline the build time &amp; testing. <br>\nTo implement the CI, there are many tools available but the Jenkins lead the pack.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Pre-requisites</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>1- We need to have Java installed on our machine. install java on CentOS/RHEL &amp; on Ubuntu.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>2- We will also to have Apache Tomcat installed on our system. Install Tomcat.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Install Jenkins on Tomcat</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now that we have all completed the above-mentioned steps, we will now download the \'jenkins.war\' file from the official Jenkins Web page. Execute the following command from a terminal to download the \'jenkins.war\'</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1>wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we need to copy this file to webapps directory located in Tomcat home. So if you have tomcat installed in opt directory, then run the following command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1>cp -rv jenkins.war /opt/tomcat/webapps</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>With this step, a process to install Jenkins on tomcat is now complete. All we have to do is to start the tomcat server. Start the tomcat server.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1>sh /opt/tomcat/bin/startup.sh</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>After the server has been started, check if the Jenkins is working by visiting the following URL from the browser.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We will have to configure the Jenkins server now. As mentioned on the webpage, we can find the admin password from location /root/.jenkins/secrets/initialAdminPassword. Get the password with the following command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1>cat /root/.jenkins/secrets/initialAdminPassword</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Copy it to the webpage and press Continue.</p>\n<!-- /wp:paragraph -->','Install Jenkins on Tomcat in Windows or Linux','','publish','open','open','','install-jenkins-on-tomcat-in-windows-or-linux','','','2019-05-20 06:37:24','2019-05-20 06:37:24','',0,'http://192.168.1.181:8080/wordpress/?p=119',0,'post','',0),(120,1,'2019-05-20 06:37:24','2019-05-20 06:37:24','<!-- wp:paragraph -->\n<p>CI or Continuous integration is being adopted at a very high pace to streamline the build time &amp; testing. <br>\nTo implement the CI, there are many tools available but the Jenkins lead the pack.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Pre-requisites</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>1- We need to have Java installed on our machine. install java on CentOS/RHEL &amp; on Ubuntu.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>2- We will also to have Apache Tomcat installed on our system. Install Tomcat.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Install Jenkins on Tomcat</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now that we have all completed the above-mentioned steps, we will now download the \'jenkins.war\' file from the official Jenkins Web page. Execute the following command from a terminal to download the \'jenkins.war\'</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1>wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we need to copy this file to webapps directory located in Tomcat home. So if you have tomcat installed in opt directory, then run the following command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1>cp -rv jenkins.war /opt/tomcat/webapps</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>With this step, a process to install Jenkins on tomcat is now complete. All we have to do is to start the tomcat server. Start the tomcat server.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1>sh /opt/tomcat/bin/startup.sh</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>After the server has been started, check if the Jenkins is working by visiting the following URL from the browser.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We will have to configure the Jenkins server now. As mentioned on the webpage, we can find the admin password from location /root/.jenkins/secrets/initialAdminPassword. Get the password with the following command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1>cat /root/.jenkins/secrets/initialAdminPassword</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Copy it to the webpage and press Continue.</p>\n<!-- /wp:paragraph -->','Install Jenkins on Tomcat in Windows or Linux','','inherit','closed','closed','','119-revision-v1','','','2019-05-20 06:37:24','2019-05-20 06:37:24','',119,'http://192.168.1.181:8080/wordpress/index.php/2019/05/20/119-revision-v1/',0,'revision','',0),(121,1,'2019-05-20 06:41:10','2019-05-20 06:41:10','<!-- wp:paragraph -->\n<p>Firstly locate the current directory for the Jenkins server. You can find the location of the current Jenkins home directory by logging into the Jenkins page. <br>\nOnce logged in, go to \'Manage Jenkins\' &amp; select the options Configure System. Here first thing you will see will be the path to your Jenkins Home Directory.<br>\nso as per above image current Jenkins home directory is: /var/lib/jenkins</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now we will create a new folder for the keeping the Jenkins. For this tutorial, we will create a new folder in our home directory.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1>sudo mkdir /root/jenkins</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now copy all the content from original Jenkins home to this directory,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1>cp -rvf /var/lib/jenkins/* /root/jenkins</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Once the copy operation has been completed, we will update the environment variable for the Jenkins home directory. Environment Variable for Jenkins is \'JENKINS_HOME\' we can update the env variable with the following command,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1>export JENKINS_HOME=~/jenkins</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The home directory for the Jenkins has been changed but the updated values for env variable will only hold for the current session. To permanently update the variable, we need to make a change in \'.bash_profile\' file located in our home directory &amp; make the following entry,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1>sudo vim /root/.bash_profile</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Enter this entry here<br>\nexport JENKINS_HOME=/root/jenkins<br>\nNow Restart the Jenkins to implement the changes.<br>\nNow you can see the new Jenkins home directory is: /root/jenkins</p>\n<!-- /wp:paragraph -->','Change home directory of Jenkins','','publish','open','open','','change-home-directory-of-jenkins','','','2019-05-20 06:43:09','2019-05-20 06:43:09','',0,'http://192.168.1.181:8080/wordpress/?p=121',0,'post','',0),(122,1,'2019-05-20 06:41:10','2019-05-20 06:41:10','<!-- wp:paragraph -->\n<p>Firstly locate the current directory for the Jenkins server. You can find the location of the current Jenkins home directory by logging into the Jenkins page. <br>\nOnce logged in, go to \'Manage Jenkins\' &amp; select the options Configure System. Here first thing you will see will be the path to your Jenkins Home Directory.<br>\nso as per above image current Jenkins home directory is: /var/lib/jenkins</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now we will create a new folder for the keeping the Jenkins. For this tutorial, we will create a new folder in our home directory.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1>sudo mkdir /root/jenkins</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now copy all the content from original Jenkins home to this directory,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1>cp -rvf /var/lib/jenkins/* /root/jenkins</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Once the copy operation has been completed, we will update the environment variable for the Jenkins home directory. Environment Variable for Jenkins is \'JENKINS_HOME\' we can update the env variable with the following command,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1>export JENKINS_HOME=~/jenkins</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The home directory for the Jenkins has been changed but the updated values for env variable will only hold for the current session. To permanently update the variable, we need to make a change in \'.bash_profile\' file located in our home directory &amp; make the following entry,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1>sudo vim /root/.bash_profile</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Enter this entry here<br>\nexport JENKINS_HOME=/root/jenkins<br>\nNow Restart the Jenkins to implement the changes.<br>\nNow you can see the new Jenkins home directory is: /root/jenkins</p>\n<!-- /wp:paragraph -->','Change home directory of Jenkins','','inherit','closed','closed','','121-revision-v1','','','2019-05-20 06:41:10','2019-05-20 06:41:10','',121,'http://192.168.1.181:8080/wordpress/index.php/2019/05/20/121-revision-v1/',0,'revision','',0),(123,1,'2019-05-20 07:52:19','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2019-05-20 07:52:19','0000-00-00 00:00:00','',0,'http://192.168.1.181:8080/wordpress/?p=123',0,'post','',0),(124,1,'2019-05-20 07:52:19','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2019-05-20 07:52:19','0000-00-00 00:00:00','',0,'http://192.168.1.181:8080/wordpress/?p=124',0,'post','',0),(125,1,'2019-05-20 07:54:49','2019-05-20 07:54:49','<!-- wp:image {\"id\":127} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/using-VBA-IF-statement-code-in-excel-1.png\" alt=\"\" class=\"wp-image-127\"/><figcaption><br><br></figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>\n\nIf you look forward to Jenkins for most of your development operations then, at some point in time you might have felt the need of something which allows you to condition your steps. Of course, it is not such a good idea to create individual jobs each time you want to run and test specific build step/s. The solution is to use a&nbsp;<strong>Conditional BuildStep plugin</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This plugin gives you additional control over your build steps by simply allowing you to add various conditional checks. There are several conditions that you may choose from, and these are all defined.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Scenario:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Suppose we want to start or stop apache service via reading user parameter.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Install <strong>Conditional BuildStep plugin</strong>. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":129} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/4-1-1024x246.png\" alt=\"\" class=\"wp-image-129\"/><figcaption> <br><strong>Configure Job</strong><br><br>1. Go to Jenkins Job and <strong>tick This project is parameterized</strong>. </figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:image {\"id\":130} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/3-1.png\" alt=\"\" class=\"wp-image-130\"/><figcaption> <br>2. Click on <strong>Add Parameter</strong> and select <strong>Choice Parameter</strong> <br></figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:image {\"id\":131} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/1-1.png\" alt=\"\" class=\"wp-image-131\"/><figcaption> <br>3. Here give a name of the parameter and also define Choices of a parameter.<br>    <strong>Remember name is act as a Variable name</strong><br> </figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:image {\"id\":132} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/8-1.png\" alt=\"\" class=\"wp-image-132\"/><figcaption> <br>4. Scroll down to the <strong>Build</strong> option and <strong>Add build step</strong>.<br>    Select <strong>Conditional steps(multiple)</strong> <br></figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:image {\"id\":134} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/6-1.png\" alt=\"\" class=\"wp-image-134\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:image {\"id\":135} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/11-1.png\" alt=\"\" class=\"wp-image-135\"/></figure>\n<!-- /wp:image -->','Build Jenkins Job with Condition and Parameter','','publish','open','open','','build-jenkins-job-with-condition-and-parameter','','','2019-05-20 08:02:42','2019-05-20 08:02:42','',0,'http://192.168.1.181:8080/wordpress/?p=125',0,'post','',0),(126,1,'2019-05-20 07:53:32','2019-05-20 07:53:32','','using-VBA-IF-statement-code-in-excel','','inherit','open','closed','','using-vba-if-statement-code-in-excel','','','2019-05-20 07:53:32','2019-05-20 07:53:32','',125,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/using-VBA-IF-statement-code-in-excel.png',0,'attachment','image/png',0),(127,1,'2019-05-20 07:54:05','2019-05-20 07:54:05','','using-VBA-IF-statement-code-in-excel','','inherit','open','closed','','using-vba-if-statement-code-in-excel-2','','','2019-05-20 07:54:05','2019-05-20 07:54:05','',125,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/using-VBA-IF-statement-code-in-excel-1.png',0,'attachment','image/png',0),(128,1,'2019-05-20 07:54:49','2019-05-20 07:54:49','<!-- wp:image {\"id\":127} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/using-VBA-IF-statement-code-in-excel-1.png\" alt=\"\" class=\"wp-image-127\"/><figcaption><br><br></figcaption></figure>\n<!-- /wp:image -->','Build Jenkins Job with Condition and Parameter','','inherit','closed','closed','','125-revision-v1','','','2019-05-20 07:54:49','2019-05-20 07:54:49','',125,'http://192.168.1.181:8080/wordpress/index.php/2019/05/20/125-revision-v1/',0,'revision','',0),(129,1,'2019-05-20 07:56:17','2019-05-20 07:56:17','','4 (1)','','inherit','open','closed','','4-1','','','2019-05-20 07:56:17','2019-05-20 07:56:17','',125,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/4-1.png',0,'attachment','image/png',0),(130,1,'2019-05-20 07:57:19','2019-05-20 07:57:19','','3 (1)','','inherit','open','closed','','3-1','','','2019-05-20 07:57:19','2019-05-20 07:57:19','',125,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/3-1.png',0,'attachment','image/png',0),(131,1,'2019-05-20 07:57:58','2019-05-20 07:57:58','','1 (1)','','inherit','open','closed','','1-1','','','2019-05-20 07:57:58','2019-05-20 07:57:58','',125,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/1-1.png',0,'attachment','image/png',0),(132,1,'2019-05-20 07:59:45','2019-05-20 07:59:45','','8 (1)','','inherit','open','closed','','8-1','','','2019-05-20 07:59:45','2019-05-20 07:59:45','',125,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/8-1.png',0,'attachment','image/png',0),(134,1,'2019-05-20 08:01:58','2019-05-20 08:01:58','','6 (1)','','inherit','open','closed','','6-1','','','2019-05-20 08:01:58','2019-05-20 08:01:58','',125,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/6-1.png',0,'attachment','image/png',0),(135,1,'2019-05-20 08:02:34','2019-05-20 08:02:34','','11 (1)','','inherit','open','closed','','11-1','','','2019-05-20 08:02:34','2019-05-20 08:02:34','',125,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/11-1.png',0,'attachment','image/png',0),(136,1,'2019-05-20 08:02:42','2019-05-20 08:02:42','<!-- wp:image {\"id\":127} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/using-VBA-IF-statement-code-in-excel-1.png\" alt=\"\" class=\"wp-image-127\"/><figcaption><br><br></figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>\n\nIf you look forward to Jenkins for most of your development operations then, at some point in time you might have felt the need of something which allows you to condition your steps. Of course, it is not such a good idea to create individual jobs each time you want to run and test specific build step/s. The solution is to use a&nbsp;<strong>Conditional BuildStep plugin</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This plugin gives you additional control over your build steps by simply allowing you to add various conditional checks. There are several conditions that you may choose from, and these are all defined.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Scenario:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Suppose we want to start or stop apache service via reading user parameter.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Install <strong>Conditional BuildStep plugin</strong>. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":129} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/4-1-1024x246.png\" alt=\"\" class=\"wp-image-129\"/><figcaption> <br><strong>Configure Job</strong><br><br>1. Go to Jenkins Job and <strong>tick This project is parameterized</strong>. </figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:image {\"id\":130} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/3-1.png\" alt=\"\" class=\"wp-image-130\"/><figcaption> <br>2. Click on <strong>Add Parameter</strong> and select <strong>Choice Parameter</strong> <br></figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:image {\"id\":131} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/1-1.png\" alt=\"\" class=\"wp-image-131\"/><figcaption> <br>3. Here give a name of the parameter and also define Choices of a parameter.<br>    <strong>Remember name is act as a Variable name</strong><br> </figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:image {\"id\":132} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/8-1.png\" alt=\"\" class=\"wp-image-132\"/><figcaption> <br>4. Scroll down to the <strong>Build</strong> option and <strong>Add build step</strong>.<br>    Select <strong>Conditional steps(multiple)</strong> <br></figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:image {\"id\":134} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/6-1.png\" alt=\"\" class=\"wp-image-134\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:image {\"id\":135} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/11-1.png\" alt=\"\" class=\"wp-image-135\"/></figure>\n<!-- /wp:image -->','Build Jenkins Job with Condition and Parameter','','inherit','closed','closed','','125-revision-v1','','','2019-05-20 08:02:42','2019-05-20 08:02:42','',125,'http://192.168.1.181:8080/wordpress/index.php/2019/05/20/125-revision-v1/',0,'revision','',0),(137,1,'2019-05-20 09:42:32','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2019-05-20 09:42:32','0000-00-00 00:00:00','',0,'http://192.168.1.181:8080/wordpress/?p=137',0,'post','',0),(138,1,'2019-05-20 09:46:48','2019-05-20 09:46:48','<!-- wp:paragraph -->\n<p>Install \'Publish Over SSH Plugin\' at Plug-in page.<br>\nConfigure</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>Click Manage Jenkins in the sidebar then Configure System</li><li>Go to Publish over SSH section Click Add at SSH Servers</li><li>Enter any logical name to Name<br>\nEnter IP Address or Hostname of the server to Hostname<br>\nEnter the username to login to Username<br>\nEnter any directory to Remote Directory where all the files are stored</li><li>Click Save at bottom of the page<br>\nConfiguration in Job<br>\nIn Jenkins Job Scroll down to the Build option and Add build step.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Select Send files or execute commands over SSH<br>\nEnter Source files path if you are writing*/ then Jenkins consider current job workspace </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Enter Exec command which you want to run on a remote server.</p>\n<!-- /wp:paragraph -->','Send build artifacts over SSH in Jenkins','','publish','open','open','','send-build-artifacts-over-ssh-in-jenkins','','','2019-05-20 09:47:37','2019-05-20 09:47:37','',0,'http://192.168.1.181:8080/wordpress/?p=138',0,'post','',0),(139,1,'2019-05-20 09:42:32','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2019-05-20 09:42:32','0000-00-00 00:00:00','',0,'http://192.168.1.181:8080/wordpress/?p=139',0,'post','',0),(140,1,'2019-05-20 09:46:48','2019-05-20 09:46:48','<!-- wp:paragraph -->\n<p>Install \'Publish Over SSH Plugin\' at Plug-in page.<br>\nConfigure</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>Click Manage Jenkins in the sidebar then Configure System</li><li>Go to Publish over SSH section Click Add at SSH Servers</li><li>Enter any logical name to Name<br>\nEnter IP Address or Hostname of the server to Hostname<br>\nEnter the username to login to Username<br>\nEnter any directory to Remote Directory where all the files are stored</li><li>Click Save at bottom of the page<br>\nConfiguration in Job<br>\nIn Jenkins Job Scroll down to the Build option and Add build step.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Select Send files or execute commands over SSH<br>\nEnter Source files path if you are writing*/ then Jenkins consider current job workspace </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Enter Exec command which you want to run on a remote server.</p>\n<!-- /wp:paragraph -->','Send build artifacts over SSH in Jenkins','','inherit','closed','closed','','138-revision-v1','','','2019-05-20 09:46:48','2019-05-20 09:46:48','',138,'http://192.168.1.181:8080/wordpress/index.php/2019/05/20/138-revision-v1/',0,'revision','',0),(141,1,'2019-05-20 10:03:47','2019-05-20 10:03:47','<!-- wp:image {\"id\":142} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/bitbucket_jenkins.png\" alt=\"\" class=\"wp-image-142\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>\n\nIf you are using Jenkins as your build server, you can easily and automatically upload your builds from Jenkins to AWS S3.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After doing a one-time configuration on your Jenkins server, syncing your builds to S3 is as easy as running a build.<br>There is no need to run anything in addition to running a build.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>1. Create a new bucket for Jenkins in AWS S3</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":143} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/7.png\" alt=\"\" class=\"wp-image-143\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>2. Install S3 Plugin in Jenkins</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>    Now go to <strong>Dashboard</strong> -> <strong>Manage Jenkins</strong> -> <strong>Manage Plugins</strong> and select        <br><strong>Available</strong> tab. Find <strong>\"S3 plugin\"</strong> and install it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":144} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/1-1024x227.png\" alt=\"\" class=\"wp-image-144\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>3.</strong> Go to <strong>Manage Jenkins</strong> and select <strong>Configure System</strong>. look for <strong>Amazon S3 Profiles</strong>. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":145} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2-1024x104.png\" alt=\"\" class=\"wp-image-145\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>\n\nClick on&nbsp;<strong>Add&nbsp;</strong>button for add S3 profile.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>4.</strong> Please provide a<strong> profile name, access key</strong> and <strong>secret access </strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>key</strong>for your AWS account. also, Create an <strong>IAM user</strong> with the relevant <strong>S3 Permissions</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":146} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/3-1024x394.png\" alt=\"\" class=\"wp-image-146\"/><figcaption><br><br><br></figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>\n\nClick on&nbsp;<strong>Save</strong>&nbsp;button.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>5. Configure in Jenkins Job</strong><br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>    Go to Jenkins job and find <strong>Post Build Actions</strong> and add a new <strong>Post Build Action</strong> and select <strong>Publish Artifacts to S3 Bucket.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>    Go to Jenkins job and find <strong>Post Build Actions</strong> and add a new <strong>Post Build Action</strong> and select <strong>Publish Artifacts to S3 Bucket.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":147} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/4-2.png\" alt=\"\" class=\"wp-image-147\"/><figcaption><br><br><br><br><br><br><br></figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>6.&nbsp;Configure your S3 Profile and define the files to upload.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":148} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/5-1024x695.png\" alt=\"\" class=\"wp-image-148\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>\n\nClick on&nbsp;<strong>Save</strong>&nbsp;button.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now each time you run a (successful) build, your artifacts will automatically upload to your S3 bucket.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>7.</strong> Click <strong>Build Now</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":149} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/7-1.png\" alt=\"\" class=\"wp-image-149\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>8.</strong>&nbsp;Go to&nbsp;<strong>AWS S3</strong>&nbsp;and verify it\'s upload or not.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":150} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/6-1024x332.png\" alt=\"\" class=\"wp-image-150\"/><figcaption> <br>Here you can see all the files are uploaded in Jenkins Build number\'s folder. </figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><br></p>\n<!-- /wp:paragraph -->','Upload Build to AWS S3 from Jenkins','','publish','open','open','','upload-build-to-aws-s3-from-jenkins','','','2019-05-20 11:11:53','2019-05-20 11:11:53','',0,'http://192.168.1.181:8080/wordpress/?p=141',0,'post','',0),(142,1,'2019-05-20 09:53:51','2019-05-20 09:53:51','','bitbucket_jenkins','','inherit','open','closed','','bitbucket_jenkins','','','2019-05-20 09:53:51','2019-05-20 09:53:51','',141,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/bitbucket_jenkins.png',0,'attachment','image/png',0),(143,1,'2019-05-20 09:54:58','2019-05-20 09:54:58','','7','','inherit','open','closed','','7','','','2019-05-20 09:54:58','2019-05-20 09:54:58','',141,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/7.png',0,'attachment','image/png',0),(144,1,'2019-05-20 09:56:20','2019-05-20 09:56:20','','1','','inherit','open','closed','','1','','','2019-05-20 09:56:20','2019-05-20 09:56:20','',141,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/1.png',0,'attachment','image/png',0),(145,1,'2019-05-20 09:57:26','2019-05-20 09:57:26','','2','','inherit','open','closed','','2','','','2019-05-20 09:57:26','2019-05-20 09:57:26','',141,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2.png',0,'attachment','image/png',0),(146,1,'2019-05-20 09:58:24','2019-05-20 09:58:24','','3','','inherit','open','closed','','3','','','2019-05-20 09:58:24','2019-05-20 09:58:24','',141,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/3.png',0,'attachment','image/png',0),(147,1,'2019-05-20 09:59:55','2019-05-20 09:59:55','','4','','inherit','open','closed','','4-2','','','2019-05-20 09:59:55','2019-05-20 09:59:55','',141,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/4-2.png',0,'attachment','image/png',0),(148,1,'2019-05-20 10:01:35','2019-05-20 10:01:35','','5','','inherit','open','closed','','5','','','2019-05-20 10:01:35','2019-05-20 10:01:35','',141,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/5.png',0,'attachment','image/png',0),(149,1,'2019-05-20 10:02:39','2019-05-20 10:02:39','','7 (1)','','inherit','open','closed','','7-1','','','2019-05-20 10:02:39','2019-05-20 10:02:39','',141,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/7-1.png',0,'attachment','image/png',0),(150,1,'2019-05-20 10:03:22','2019-05-20 10:03:22','','6','','inherit','open','closed','','6','','','2019-05-20 10:03:22','2019-05-20 10:03:22','',141,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/6.png',0,'attachment','image/png',0),(151,1,'2019-05-20 10:03:47','2019-05-20 10:03:47','<!-- wp:image {\"id\":142} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/bitbucket_jenkins.png\" alt=\"\" class=\"wp-image-142\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>\n\nIf you are using Jenkins as your build server, you can easily and automatically upload your builds from Jenkins to AWS S3.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After doing a one-time configuration on your Jenkins server, syncing your builds to S3 is as easy as running a build.<br>There is no need to run anything in addition to running a build.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>1. Create a new bucket for Jenkins in AWS S3</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":143} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/7.png\" alt=\"\" class=\"wp-image-143\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>2. Install S3 Plugin in Jenkins</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>    Now go to <strong>Dashboard</strong> -> <strong>Manage Jenkins</strong> -> <strong>Manage Plugins</strong> and select        <br><strong>Available</strong> tab. Find <strong>\"S3 plugin\"</strong> and install it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":144} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/1-1024x227.png\" alt=\"\" class=\"wp-image-144\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>3.</strong> Go to <strong>Manage Jenkins</strong> and select <strong>Configure System</strong>. look for <strong>Amazon S3 Profiles</strong>. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":145} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2-1024x104.png\" alt=\"\" class=\"wp-image-145\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>\n\nClick on&nbsp;<strong>Add&nbsp;</strong>button for add S3 profile.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>4.</strong> Please provide a<strong> profile name, access key</strong> and <strong>secret access </strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>key</strong>for your AWS account. also, Create an <strong>IAM user</strong> with the relevant <strong>S3 Permissions</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":146} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/3-1024x394.png\" alt=\"\" class=\"wp-image-146\"/><figcaption><br><br><br></figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>\n\nClick on&nbsp;<strong>Save</strong>&nbsp;button.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>5. Configure in Jenkins Job</strong><br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>    Go to Jenkins job and find <strong>Post Build Actions</strong> and add a new <strong>Post Build Action</strong> and select <strong>Publish Artifacts to S3 Bucket.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>    Go to Jenkins job and find <strong>Post Build Actions</strong> and add a new <strong>Post Build Action</strong> and select <strong>Publish Artifacts to S3 Bucket.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":147} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/4-2.png\" alt=\"\" class=\"wp-image-147\"/><figcaption><br><br><br><br><br><br><br></figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>6.&nbsp;Configure your S3 Profile and define the files to upload.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":148} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/5-1024x695.png\" alt=\"\" class=\"wp-image-148\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>\n\nClick on&nbsp;<strong>Save</strong>&nbsp;button.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now each time you run a (successful) build, your artifacts will automatically upload to your S3 bucket.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>7.</strong> Click <strong>Build Now</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":149} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/7-1.png\" alt=\"\" class=\"wp-image-149\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>8.</strong>&nbsp;Go to&nbsp;<strong>AWS S3</strong>&nbsp;and verify it\'s upload or not.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":150} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/6-1024x332.png\" alt=\"\" class=\"wp-image-150\"/><figcaption> <br>Here you can see all the files are uploaded in Jenkins Build number\'s folder. </figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><br></p>\n<!-- /wp:paragraph -->','Upload Build to AWS S3 from Jenkins','','inherit','closed','closed','','141-revision-v1','','','2019-05-20 10:03:47','2019-05-20 10:03:47','',141,'http://192.168.1.181:8080/wordpress/index.php/2019/05/20/141-revision-v1/',0,'revision','',0),(152,1,'2019-05-20 10:45:39','2019-05-20 10:45:39','<!-- wp:paragraph -->\n<p> Jenkins uses a Master-Slave architecture to manage distributed builds. In this architecture, Master and Slave communicate through TCP/IP protocol. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":153} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/jenkins-master-slave-configuration.jpg\" alt=\"\" class=\"wp-image-153\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>In this tutorial, we learn how to add Jenkins slave node in Linux machine.<br> Step 1: Enable agent on TCP port<br> Go to Manage Jenkins > Configure Global Security</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":154} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/3-2.png\" alt=\"\" class=\"wp-image-154\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> Scroll down and find <strong>Agents</strong> Section and click on <strong>Fixed port or random port</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":155} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/4-3.png\" alt=\"\" class=\"wp-image-155\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 2: Add node<br> Go to Manage Jenkins > Manage Nodes</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":156} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/1-2.png\" alt=\"\" class=\"wp-image-156\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>\n\nClick on&nbsp;<strong>New Node</strong>&nbsp;and give&nbsp;<strong>Node name</strong>.\n\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":157} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/3-1-1-1024x193.png\" alt=\"\" class=\"wp-image-157\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> Configure the Node parameter according to your requirements and Save. <strong>(Choose Launch method \'Launch slave agent via SSH\') </strong>and other details like below screenshot.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":158} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/4-1-1-1024x530.png\" alt=\"\" class=\"wp-image-158\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 3: Activate Node</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now you can see Slave node is added successfully. But it is offline. To activate the slave node <strong>Click on Launch agent</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":159} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/6-2-1024x256.png\" alt=\"\" class=\"wp-image-159\"/><figcaption> <br>.<br></figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> Go to Jenkins Master and Check, Now Jenkins Successfully connected with the slave node. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":160} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/7-2-1024x289.png\" alt=\"\" class=\"wp-image-160\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><br></p>\n<!-- /wp:paragraph -->','Add Jenkins Slave node in Linux system','','publish','open','open','','add-jenkins-slave-node-in-linux-system','','','2019-05-20 10:45:39','2019-05-20 10:45:39','',0,'http://192.168.1.181:8080/wordpress/?p=152',0,'post','',0),(153,1,'2019-05-20 10:36:45','2019-05-20 10:36:45','','jenkins-master-slave-configuration','','inherit','open','closed','','jenkins-master-slave-configuration','','','2019-05-20 10:36:45','2019-05-20 10:36:45','',152,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/jenkins-master-slave-configuration.jpg',0,'attachment','image/jpeg',0),(154,1,'2019-05-20 10:38:34','2019-05-20 10:38:34','','3','','inherit','open','closed','','3-2','','','2019-05-20 10:38:34','2019-05-20 10:38:34','',152,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/3-2.png',0,'attachment','image/png',0),(155,1,'2019-05-20 10:39:27','2019-05-20 10:39:27','','4','','inherit','open','closed','','4-3','','','2019-05-20 10:39:27','2019-05-20 10:39:27','',152,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/4-3.png',0,'attachment','image/png',0),(156,1,'2019-05-20 10:40:32','2019-05-20 10:40:32','','1','','inherit','open','closed','','1-2','','','2019-05-20 10:40:32','2019-05-20 10:40:32','',152,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/1-2.png',0,'attachment','image/png',0),(157,1,'2019-05-20 10:41:29','2019-05-20 10:41:29','','3 (1)','','inherit','open','closed','','3-1-2','','','2019-05-20 10:41:29','2019-05-20 10:41:29','',152,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/3-1-1.png',0,'attachment','image/png',0),(158,1,'2019-05-20 10:43:07','2019-05-20 10:43:07','','4 (1)','','inherit','open','closed','','4-1-2','','','2019-05-20 10:43:07','2019-05-20 10:43:07','',152,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/4-1-1.png',0,'attachment','image/png',0),(159,1,'2019-05-20 10:44:12','2019-05-20 10:44:12','','6','','inherit','open','closed','','6-2','','','2019-05-20 10:44:12','2019-05-20 10:44:12','',152,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/6-2.png',0,'attachment','image/png',0),(160,1,'2019-05-20 10:45:28','2019-05-20 10:45:28','','7','','inherit','open','closed','','7-2','','','2019-05-20 10:45:28','2019-05-20 10:45:28','',152,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/7-2.png',0,'attachment','image/png',0),(161,1,'2019-05-20 10:45:39','2019-05-20 10:45:39','<!-- wp:paragraph -->\n<p> Jenkins uses a Master-Slave architecture to manage distributed builds. In this architecture, Master and Slave communicate through TCP/IP protocol. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":153} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/jenkins-master-slave-configuration.jpg\" alt=\"\" class=\"wp-image-153\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>In this tutorial, we learn how to add Jenkins slave node in Linux machine.<br> Step 1: Enable agent on TCP port<br> Go to Manage Jenkins > Configure Global Security</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":154} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/3-2.png\" alt=\"\" class=\"wp-image-154\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> Scroll down and find <strong>Agents</strong> Section and click on <strong>Fixed port or random port</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":155} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/4-3.png\" alt=\"\" class=\"wp-image-155\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 2: Add node<br> Go to Manage Jenkins > Manage Nodes</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":156} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/1-2.png\" alt=\"\" class=\"wp-image-156\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>\n\nClick on&nbsp;<strong>New Node</strong>&nbsp;and give&nbsp;<strong>Node name</strong>.\n\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":157} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/3-1-1-1024x193.png\" alt=\"\" class=\"wp-image-157\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> Configure the Node parameter according to your requirements and Save. <strong>(Choose Launch method \'Launch slave agent via SSH\') </strong>and other details like below screenshot.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":158} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/4-1-1-1024x530.png\" alt=\"\" class=\"wp-image-158\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 3: Activate Node</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now you can see Slave node is added successfully. But it is offline. To activate the slave node <strong>Click on Launch agent</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":159} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/6-2-1024x256.png\" alt=\"\" class=\"wp-image-159\"/><figcaption> <br>.<br></figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> Go to Jenkins Master and Check, Now Jenkins Successfully connected with the slave node. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":160} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/7-2-1024x289.png\" alt=\"\" class=\"wp-image-160\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><br></p>\n<!-- /wp:paragraph -->','Add Jenkins Slave node in Linux system','','inherit','closed','closed','','152-revision-v1','','','2019-05-20 10:45:39','2019-05-20 10:45:39','',152,'http://192.168.1.181:8080/wordpress/index.php/2019/05/20/152-revision-v1/',0,'revision','',0),(162,1,'2019-05-20 10:53:59','2019-05-20 10:53:59','<!-- wp:paragraph -->\n<p>In this tutorial, we will learn how to Jenkins automatically create a build if it detects changes to a GitHub repository.<br> GitHub webhooks feature in Jenkins is used to trigger the build whenever a developer commits something to the master branch.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":163} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/1-3.png\" alt=\"\" class=\"wp-image-163\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Plugin installation</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>Login to Jenkins and navigate to Manage Jenkins &gt; Manage Plugins</li><li>Install a Github Plugin.<br> Create webhook in the Github repository</li><li>Go to your project repository.</li><li>Go to settings in the right corner.</li><li>Click on Webhooks</li><li>Click Add webhooks</li><li>Write the Payload URL as \'http://JENKINS_URL/github-webhook/\'</li><li>Click on Add webhook</li><li></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:image {\"id\":164} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2-1-1024x765.png\" alt=\"\" class=\"wp-image-164\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> Now you can see webhook is successfully&nbsp;added.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":165} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/3-3-1024x226.png\" alt=\"\" class=\"wp-image-165\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Configure webhook&nbsp;in the Jenkins Job/Pipeline</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Go to the Jenkins pipeline and select&nbsp;<strong>\'GitHub hook trigger for GITScm polling\'</strong>&nbsp;in<strong>Build Triggers</strong>&nbsp;Section </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":166} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/4-4.png\" alt=\"\" class=\"wp-image-166\"/><figcaption><br></figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> Now it\'s done. from onwards whenever developers commit code to GitHub repository, our Jenkins&nbsp;job build will be automatically triggered.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><br></p>\n<!-- /wp:paragraph -->','Configure GitHub Webhook in Jenkins Job','','publish','open','open','','configure-github-webhook-in-jenkins-job','','','2019-05-20 10:55:14','2019-05-20 10:55:14','',0,'http://192.168.1.181:8080/wordpress/?p=162',0,'post','',0),(163,1,'2019-05-20 10:49:11','2019-05-20 10:49:11','','1','','inherit','open','closed','','1-3','','','2019-05-20 10:49:11','2019-05-20 10:49:11','',162,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/1-3.png',0,'attachment','image/png',0),(164,1,'2019-05-20 10:50:52','2019-05-20 10:50:52','','2','','inherit','open','closed','','2-2','','','2019-05-20 10:50:52','2019-05-20 10:50:52','',162,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2-1.png',0,'attachment','image/png',0),(165,1,'2019-05-20 10:51:55','2019-05-20 10:51:55','','3','','inherit','open','closed','','3-3','','','2019-05-20 10:51:55','2019-05-20 10:51:55','',162,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/3-3.png',0,'attachment','image/png',0),(166,1,'2019-05-20 10:53:01','2019-05-20 10:53:01','','4','','inherit','open','closed','','4-4','','','2019-05-20 10:53:01','2019-05-20 10:53:01','',162,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/4-4.png',0,'attachment','image/png',0),(167,1,'2019-05-20 10:53:59','2019-05-20 10:53:59','<!-- wp:paragraph -->\n<p>In this tutorial, we will learn how to Jenkins automatically create a build if it detects changes to a GitHub repository.<br> GitHub webhooks feature in Jenkins is used to trigger the build whenever a developer commits something to the master branch.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":163} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/1-3.png\" alt=\"\" class=\"wp-image-163\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Plugin installation</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>Login to Jenkins and navigate to Manage Jenkins > Manage Plugins</li><li>Install a Github Plugin.<br> Create webhook in the Github repository</li><li>Go to your project repository.</li><li>Go to settings in the right corner.</li><li>Click on Webhooks</li><li>Click Add webhooks</li><li>Write the Payload URL as \'http://JENKINS_URL/github-webhook/\'</li><li>Click on Add webhook</li><li></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:image {\"id\":164} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2-1-1024x765.png\" alt=\"\" class=\"wp-image-164\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> Now you can see webhook is successfully added.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":165} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/3-3-1024x226.png\" alt=\"\" class=\"wp-image-165\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Configure webhook&nbsp;in the Jenkins Job/Pipeline</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Go to the Jenkins pipeline and select <strong>\'GitHub hook trigger for GITScm polling\'</strong> in<strong>Build Triggers</strong> Section </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":166} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/4-4.png\" alt=\"\" class=\"wp-image-166\"/><figcaption><br><br><br></figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> Now it\'s done. from onwards whenever developers commit code to GitHub repository, our Jenkins job build will be automatically triggered.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><br></p>\n<!-- /wp:paragraph -->','Configure GitHub Webhook in Jenkins Job','','inherit','closed','closed','','162-revision-v1','','','2019-05-20 10:53:59','2019-05-20 10:53:59','',162,'http://192.168.1.181:8080/wordpress/index.php/2019/05/20/162-revision-v1/',0,'revision','',0),(168,1,'2019-05-20 10:55:14','2019-05-20 10:55:14','<!-- wp:paragraph -->\n<p>In this tutorial, we will learn how to Jenkins automatically create a build if it detects changes to a GitHub repository.<br> GitHub webhooks feature in Jenkins is used to trigger the build whenever a developer commits something to the master branch.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":163} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/1-3.png\" alt=\"\" class=\"wp-image-163\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Plugin installation</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>Login to Jenkins and navigate to Manage Jenkins &gt; Manage Plugins</li><li>Install a Github Plugin.<br> Create webhook in the Github repository</li><li>Go to your project repository.</li><li>Go to settings in the right corner.</li><li>Click on Webhooks</li><li>Click Add webhooks</li><li>Write the Payload URL as \'http://JENKINS_URL/github-webhook/\'</li><li>Click on Add webhook</li><li></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:image {\"id\":164} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/2-1-1024x765.png\" alt=\"\" class=\"wp-image-164\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> Now you can see webhook is successfully&nbsp;added.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":165} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/3-3-1024x226.png\" alt=\"\" class=\"wp-image-165\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Configure webhook&nbsp;in the Jenkins Job/Pipeline</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Go to the Jenkins pipeline and select&nbsp;<strong>\'GitHub hook trigger for GITScm polling\'</strong>&nbsp;in<strong>Build Triggers</strong>&nbsp;Section </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":166} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/4-4.png\" alt=\"\" class=\"wp-image-166\"/><figcaption><br></figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> Now it\'s done. from onwards whenever developers commit code to GitHub repository, our Jenkins&nbsp;job build will be automatically triggered.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><br></p>\n<!-- /wp:paragraph -->','Configure GitHub Webhook in Jenkins Job','','inherit','closed','closed','','162-revision-v1','','','2019-05-20 10:55:14','2019-05-20 10:55:14','',162,'http://192.168.1.181:8080/wordpress/index.php/2019/05/20/162-revision-v1/',0,'revision','',0),(169,1,'2019-05-20 11:02:12','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2019-05-20 11:02:12','0000-00-00 00:00:00','',0,'http://192.168.1.181:8080/wordpress/?p=169',0,'post','',0),(170,1,'2019-05-20 11:05:12','2019-05-20 11:05:12','<!-- wp:paragraph -->\n<p> In this tutorial, we will learn step by step how to generate android APK from source code in Jenkins. I assume you have already installed Jenkins.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":171} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/1-1024x256.jpg\" alt=\"\" class=\"wp-image-171\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Setup Android SDK<br>\ncreate directory<br>\n mkdir -p /var/lib/jenkins/android-sdk/ <br>\ngo to an android-SDK directory<br>\ncd /var/lib/jenkins/android-sdk/  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Perform below command for setup android SDK.<br>\n # download android sdk  <br>\n sudo curl https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip -o android-sdk.zip  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p># install unzip command  <br>  sudo apt-get install unzip  <br>  # unzip into this folder  <br>  sudo unzip android-sdk.zip -d .  <br>  # remove the zip file  <br>  sudo rm android-sdk.zip  <br> Install Plugins<br> Install Android Emulator and Gradle Plugin.<br> Open Jenkins: Manage Jenkins >> Mange Plugins >> Available</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":173} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/gradle-1024x84.png\" alt=\"\" class=\"wp-image-173\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Configure Jenkins<br>\nOpen Jenkins: Manage Jenkins &gt;&gt; Configure System &gt;&gt; Global properties &gt;&gt; Environment variables  and add:<br>\nANDROID_HOME : /var/lib/jenkins/android-sdk<br>\nJAVA_HOME : /usr/lib/jvm/java-8-oracle</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Create Android build job</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Open Jenkins -> New Item. Enter any job name. Choose Freestyle project. Press OK.<br> Source Code Management -> Check Git and give:<br> Repository URL: Git URL to your repo. Take this URL from Github. It should be a format of git@github.com:{username}/{repo}.git<br> Credentials: Select the one you created before.<br> Branches to build: branch_name<br> Build >> Execute shell<br>  chmod +x gradlew  <br>  ./gradlew clean  <br>  ./gradlew assembleDebug  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":174} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Build.png\" alt=\"\" class=\"wp-image-174\"/><figcaption> <br>Post-build Actions -> Archive artifacts: <code>**/*.apk</code><br><br> </figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:image {\"id\":175} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/post-build.png\" alt=\"\" class=\"wp-image-175\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Start the Build</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>From the job dashboard, click <strong>Build Now</strong> and you will see job run. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":176} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/buils_now.png\" alt=\"\" class=\"wp-image-176\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> After successfully build you can see generated an android app in project information.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":177} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/after_build.png\" alt=\"\" class=\"wp-image-177\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><br></p>\n<!-- /wp:paragraph -->','Generate Android APK from source code in Jenkins','','publish','open','open','','generate-android-apk-from-source-code-in-jenkins','','','2019-05-20 11:11:39','2019-05-20 11:11:39','',0,'http://192.168.1.181:8080/wordpress/?p=170',0,'post','',0),(171,1,'2019-05-20 11:03:45','2019-05-20 11:03:45','','1','','inherit','open','closed','','1-4','','','2019-05-20 11:03:45','2019-05-20 11:03:45','',170,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/1.jpg',0,'attachment','image/jpeg',0),(172,1,'2019-05-20 11:05:12','2019-05-20 11:05:12','<!-- wp:paragraph -->\n<p> In this tutorial, we will learn step by step how to generate android APK from source code in Jenkins. I assume you have already installed Jenkins.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":171} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/1-1024x256.jpg\" alt=\"\" class=\"wp-image-171\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Setup Android SDK<br>\ncreate directory<br>\n mkdir -p /var/lib/jenkins/android-sdk/ <br>\ngo to an android-SDK directory<br>\ncd /var/lib/jenkins/android-sdk/  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Perform below command for setup android SDK.<br>\n # download android sdk  <br>\n sudo curl https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip -o android-sdk.zip  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p># install unzip command  <br>\n sudo apt-get install unzip  <br>\n # unzip into this folder  <br>\n sudo unzip android-sdk.zip -d .  <br>\n # remove the zip file  <br>\n sudo rm android-sdk.zip  <br>\nInstall Plugins<br>\nInstall Android Emulator and Gradle Plugin.<br>\nOpen Jenkins: Manage Jenkins &gt;&gt; Mange Plugins &gt;&gt; Available</p>\n<!-- /wp:paragraph -->','Generate Android APK from source code in Jenkins','','inherit','closed','closed','','170-revision-v1','','','2019-05-20 11:05:12','2019-05-20 11:05:12','',170,'http://192.168.1.181:8080/wordpress/index.php/2019/05/20/170-revision-v1/',0,'revision','',0),(173,1,'2019-05-20 11:06:23','2019-05-20 11:06:23','','gradle','','inherit','open','closed','','gradle','','','2019-05-20 11:06:23','2019-05-20 11:06:23','',170,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/gradle.png',0,'attachment','image/png',0),(174,1,'2019-05-20 11:07:33','2019-05-20 11:07:33','','Build','','inherit','open','closed','','build','','','2019-05-20 11:07:33','2019-05-20 11:07:33','',170,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Build.png',0,'attachment','image/png',0),(175,1,'2019-05-20 11:08:16','2019-05-20 11:08:16','','post-build','','inherit','open','closed','','post-build','','','2019-05-20 11:08:16','2019-05-20 11:08:16','',170,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/post-build.png',0,'attachment','image/png',0),(176,1,'2019-05-20 11:09:10','2019-05-20 11:09:10','','buils_now','','inherit','open','closed','','buils_now','','','2019-05-20 11:09:10','2019-05-20 11:09:10','',170,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/buils_now.png',0,'attachment','image/png',0),(177,1,'2019-05-20 11:09:54','2019-05-20 11:09:54','','after_build','','inherit','open','closed','','after_build','','','2019-05-20 11:09:54','2019-05-20 11:09:54','',170,'http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/after_build.png',0,'attachment','image/png',0),(178,1,'2019-05-20 11:10:01','2019-05-20 11:10:01','<!-- wp:paragraph -->\n<p> In this tutorial, we will learn step by step how to generate android APK from source code in Jenkins. I assume you have already installed Jenkins.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":171} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/1-1024x256.jpg\" alt=\"\" class=\"wp-image-171\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Setup Android SDK<br>\ncreate directory<br>\n mkdir -p /var/lib/jenkins/android-sdk/ <br>\ngo to an android-SDK directory<br>\ncd /var/lib/jenkins/android-sdk/  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Perform below command for setup android SDK.<br>\n # download android sdk  <br>\n sudo curl https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip -o android-sdk.zip  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p># install unzip command  <br>  sudo apt-get install unzip  <br>  # unzip into this folder  <br>  sudo unzip android-sdk.zip -d .  <br>  # remove the zip file  <br>  sudo rm android-sdk.zip  <br> Install Plugins<br> Install Android Emulator and Gradle Plugin.<br> Open Jenkins: Manage Jenkins >> Mange Plugins >> Available</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":173} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/gradle-1024x84.png\" alt=\"\" class=\"wp-image-173\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Configure Jenkins<br>\nOpen Jenkins: Manage Jenkins &gt;&gt; Configure System &gt;&gt; Global properties &gt;&gt; Environment variables  and add:<br>\nANDROID_HOME : /var/lib/jenkins/android-sdk<br>\nJAVA_HOME : /usr/lib/jvm/java-8-oracle</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Create Android build job</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Open Jenkins -> New Item. Enter any job name. Choose Freestyle project. Press OK.<br> Source Code Management -> Check Git and give:<br> Repository URL: Git URL to your repo. Take this URL from Github. It should be a format of git@github.com:{username}/{repo}.git<br> Credentials: Select the one you created before.<br> Branches to build: branch_name<br> Build >> Execute shell<br>  chmod +x gradlew  <br>  ./gradlew clean  <br>  ./gradlew assembleDebug  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":174} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/Build.png\" alt=\"\" class=\"wp-image-174\"/><figcaption> <br>Post-build Actions -> Archive artifacts: <code>**/*.apk</code><br><br> </figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:image {\"id\":175} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/post-build.png\" alt=\"\" class=\"wp-image-175\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Start the Build</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>From the job dashboard, click <strong>Build Now</strong> and you will see job run. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":176} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/buils_now.png\" alt=\"\" class=\"wp-image-176\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> After successfully build you can see generated an android app in project information.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":177} -->\n<figure class=\"wp-block-image\"><img src=\"http://192.168.1.181:8080/wordpress/wp-content/uploads/2019/05/after_build.png\" alt=\"\" class=\"wp-image-177\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><br></p>\n<!-- /wp:paragraph -->','Generate Android APK from source code in Jenkins','','inherit','closed','closed','','170-revision-v1','','','2019-05-20 11:10:01','2019-05-20 11:10:01','',170,'http://192.168.1.181:8080/wordpress/index.php/2019/05/20/170-revision-v1/',0,'revision','',0);
/*!40000 ALTER TABLE `wp_posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_relationships`
--

DROP TABLE IF EXISTS `wp_term_relationships`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_relationships` (
  `object_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_taxonomy_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_order` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  KEY `term_taxonomy_id` (`term_taxonomy_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_relationships`
--

LOCK TABLES `wp_term_relationships` WRITE;
/*!40000 ALTER TABLE `wp_term_relationships` DISABLE KEYS */;
INSERT INTO `wp_term_relationships` VALUES (1,1,0),(20,3,0),(22,3,0),(24,3,0),(26,3,0),(39,3,0),(39,7,0),(49,4,0),(62,4,0),(64,4,0),(67,5,0),(69,4,0),(71,4,0),(82,2,0),(83,2,0),(84,2,0),(85,2,0),(86,2,0),(88,5,0),(91,5,0),(93,5,0),(101,8,0),(108,8,0),(110,8,0),(116,9,0),(119,5,0),(121,5,0),(125,5,0),(138,5,0),(141,5,0),(152,5,0),(162,5,0),(170,5,0);
/*!40000 ALTER TABLE `wp_term_relationships` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_taxonomy`
--

DROP TABLE IF EXISTS `wp_term_taxonomy`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_taxonomy` (
  `term_taxonomy_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `taxonomy` varchar(32) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `description` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_taxonomy_id`),
  UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  KEY `taxonomy` (`taxonomy`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_taxonomy`
--

LOCK TABLES `wp_term_taxonomy` WRITE;
/*!40000 ALTER TABLE `wp_term_taxonomy` DISABLE KEYS */;
INSERT INTO `wp_term_taxonomy` VALUES (1,1,'category','',5,0),(2,2,'nav_menu','',0,5),(3,3,'category','',0,5),(4,4,'category','',0,5),(5,5,'category','',0,12),(6,6,'nav_menu','',0,0),(7,7,'post_format','',0,1),(8,8,'category','',0,3),(9,9,'category','',0,1);
/*!40000 ALTER TABLE `wp_term_taxonomy` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_termmeta`
--

DROP TABLE IF EXISTS `wp_termmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_termmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_520_ci,
  PRIMARY KEY (`meta_id`),
  KEY `term_id` (`term_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_termmeta`
--

LOCK TABLES `wp_termmeta` WRITE;
/*!40000 ALTER TABLE `wp_termmeta` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_termmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_terms`
--

DROP TABLE IF EXISTS `wp_terms`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_terms` (
  `term_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `slug` varchar(200) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_id`),
  KEY `slug` (`slug`(191)),
  KEY `name` (`name`(191))
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_terms`
--

LOCK TABLES `wp_terms` WRITE;
/*!40000 ALTER TABLE `wp_terms` DISABLE KEYS */;
INSERT INTO `wp_terms` VALUES (1,'Uncategorized','uncategorized',0),(2,'Nagios','nagios',0),(3,'Nagios','nagios',0),(4,'Nginx-apache','nginx-apache',0),(5,'Jenkins','jenkins',0),(6,'Jenkins','jenkins',0),(7,'post-format-link','post-format-link',0),(8,'Git','git',0),(9,'Docker','docker',0);
/*!40000 ALTER TABLE `wp_terms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_usermeta`
--

DROP TABLE IF EXISTS `wp_usermeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_usermeta` (
  `umeta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_520_ci,
  PRIMARY KEY (`umeta_id`),
  KEY `user_id` (`user_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_usermeta`
--

LOCK TABLES `wp_usermeta` WRITE;
/*!40000 ALTER TABLE `wp_usermeta` DISABLE KEYS */;
INSERT INTO `wp_usermeta` VALUES (1,1,'nickname','manoj'),(2,1,'first_name',''),(3,1,'last_name',''),(4,1,'description',''),(5,1,'rich_editing','true'),(6,1,'syntax_highlighting','true'),(7,1,'comment_shortcuts','false'),(8,1,'admin_color','fresh'),(9,1,'use_ssl','0'),(10,1,'show_admin_bar_front','true'),(11,1,'locale',''),(12,1,'wp_capabilities','a:1:{s:13:\"administrator\";b:1;}'),(13,1,'wp_user_level','10'),(14,1,'dismissed_wp_pointers','wp496_privacy'),(15,1,'show_welcome_panel','1'),(17,1,'wp_dashboard_quick_press_last_post_id','118'),(18,1,'community-events-location','a:1:{s:2:\"ip\";s:11:\"192.168.1.0\";}'),(19,1,'nav_menu_recently_edited','2'),(20,1,'managenav-menuscolumnshidden','a:5:{i:0;s:11:\"link-target\";i:1;s:11:\"css-classes\";i:2;s:3:\"xfn\";i:3;s:11:\"description\";i:4;s:15:\"title-attribute\";}'),(21,1,'metaboxhidden_nav-menus','a:2:{i:0;s:12:\"add-post_tag\";i:1;s:15:\"add-post_format\";}'),(22,1,'wp_user-settings','libraryContent=browse'),(23,1,'wp_user-settings-time','1556865918'),(24,1,'session_tokens','a:1:{s:64:\"f0d7f1763200b446f65350c08781b9370e3b62f356f21e7b689dfaef05fc35dc\";a:4:{s:10:\"expiration\";i:1558506101;s:2:\"ip\";s:13:\"192.168.1.189\";s:2:\"ua\";s:102:\"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36\";s:5:\"login\";i:1558333301;}}');
/*!40000 ALTER TABLE `wp_usermeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_users`
--

DROP TABLE IF EXISTS `wp_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_users` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_login` varchar(60) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_pass` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_nicename` varchar(50) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_email` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_url` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(250) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`ID`),
  KEY `user_login_key` (`user_login`),
  KEY `user_nicename` (`user_nicename`),
  KEY `user_email` (`user_email`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_users`
--

LOCK TABLES `wp_users` WRITE;
/*!40000 ALTER TABLE `wp_users` DISABLE KEYS */;
INSERT INTO `wp_users` VALUES (1,'manoj','$P$BoiS6jZ3y7r3P7Viety16ydw/RJCyP0','manoj','manoj.himt@gmail.com','http://manojdevops.blogspot','2019-03-08 10:11:22','',0,'manoj');
/*!40000 ALTER TABLE `wp_users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-05-30 16:59:35
